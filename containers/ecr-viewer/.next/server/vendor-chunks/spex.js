"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/spex";
exports.ids = ["vendor-chunks/spex"];
exports.modules = {

/***/ "(rsc)/./node_modules/spex/lib/adapter.js":
/*!******************************************!*\
  !*** ./node_modules/spex/lib/adapter.js ***!
  \******************************************/
/***/ ((module) => {

eval("/**\r\n * @class PromiseAdapter\r\n * @description\r\n * Adapter for the primary promise operations.\r\n *\r\n * Provides compatibility with promise libraries that cannot be recognized automatically,\r\n * via functions that implement the primary operations with promises:\r\n *\r\n *  - construct a new promise with a callback function\r\n *  - resolve a promise with some result data\r\n *  - reject a promise with a reason\r\n *\r\n * #### Example\r\n *\r\n * Below is an example of setting up a [client-side]{@tutorial client} adapter for AngularJS $q.\r\n *\r\n * ```js\r\n * const spexLib = require('spex'); // or include client-side spex.js\r\n *\r\n * const adapter = new spexLib.PromiseAdapter(\r\n *    cb => $q(cb), // creating a new promise;\r\n *    data => $q.when(data), // resolving a promise;\r\n *    reason => $q.reject(reason) // rejecting a promise;\r\n *    );\r\n *\r\n * const spex = spexLib(adapter);\r\n * ```\r\n *\r\n * @param {Function} create\r\n * A function that takes a callback parameter and returns a new promise object.\r\n * The callback parameter is expected to be `function(resolve, reject)`.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to create a promise.`\r\n *\r\n * @param {Function} resolve\r\n * A function that takes an optional data parameter and resolves a promise with it.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to resolve a promise.`\r\n *\r\n * @param {Function} reject\r\n * A function that takes an optional error parameter and rejects a promise with it.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to reject a promise.`\r\n *\r\n * @see {@tutorial client}\r\n *\r\n */ \nclass PromiseAdapter {\n    constructor(create, resolve, reject){\n        this.create = create;\n        this.resolve = resolve;\n        this.reject = reject;\n        if (typeof create !== \"function\") {\n            throw new TypeError(\"Adapter requires a function to create a promise.\");\n        }\n        if (typeof resolve !== \"function\") {\n            throw new TypeError(\"Adapter requires a function to resolve a promise.\");\n        }\n        if (typeof reject !== \"function\") {\n            throw new TypeError(\"Adapter requires a function to reject a promise.\");\n        }\n    }\n}\nmodule.exports = PromiseAdapter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3BleC9saWIvYWRhcHRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQThDQztBQUNELE1BQU1BO0lBQ0ZDLFlBQVlDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxNQUFNLENBQUU7UUFDakMsSUFBSSxDQUFDRixNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQyxNQUFNLEdBQUdBO1FBRWQsSUFBSSxPQUFPRixXQUFXLFlBQVk7WUFDOUIsTUFBTSxJQUFJRyxVQUFVO1FBQ3hCO1FBRUEsSUFBSSxPQUFPRixZQUFZLFlBQVk7WUFDL0IsTUFBTSxJQUFJRSxVQUFVO1FBQ3hCO1FBRUEsSUFBSSxPQUFPRCxXQUFXLFlBQVk7WUFDOUIsTUFBTSxJQUFJQyxVQUFVO1FBQ3hCO0lBQ0o7QUFDSjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHRtbC1jb252ZXJ0ZXIvLi9ub2RlX21vZHVsZXMvc3BleC9saWIvYWRhcHRlci5qcz9mZTlhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAY2xhc3MgUHJvbWlzZUFkYXB0ZXJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEFkYXB0ZXIgZm9yIHRoZSBwcmltYXJ5IHByb21pc2Ugb3BlcmF0aW9ucy5cclxuICpcclxuICogUHJvdmlkZXMgY29tcGF0aWJpbGl0eSB3aXRoIHByb21pc2UgbGlicmFyaWVzIHRoYXQgY2Fubm90IGJlIHJlY29nbml6ZWQgYXV0b21hdGljYWxseSxcclxuICogdmlhIGZ1bmN0aW9ucyB0aGF0IGltcGxlbWVudCB0aGUgcHJpbWFyeSBvcGVyYXRpb25zIHdpdGggcHJvbWlzZXM6XHJcbiAqXHJcbiAqICAtIGNvbnN0cnVjdCBhIG5ldyBwcm9taXNlIHdpdGggYSBjYWxsYmFjayBmdW5jdGlvblxyXG4gKiAgLSByZXNvbHZlIGEgcHJvbWlzZSB3aXRoIHNvbWUgcmVzdWx0IGRhdGFcclxuICogIC0gcmVqZWN0IGEgcHJvbWlzZSB3aXRoIGEgcmVhc29uXHJcbiAqXHJcbiAqICMjIyMgRXhhbXBsZVxyXG4gKlxyXG4gKiBCZWxvdyBpcyBhbiBleGFtcGxlIG9mIHNldHRpbmcgdXAgYSBbY2xpZW50LXNpZGVde0B0dXRvcmlhbCBjbGllbnR9IGFkYXB0ZXIgZm9yIEFuZ3VsYXJKUyAkcS5cclxuICpcclxuICogYGBganNcclxuICogY29uc3Qgc3BleExpYiA9IHJlcXVpcmUoJ3NwZXgnKTsgLy8gb3IgaW5jbHVkZSBjbGllbnQtc2lkZSBzcGV4LmpzXHJcbiAqXHJcbiAqIGNvbnN0IGFkYXB0ZXIgPSBuZXcgc3BleExpYi5Qcm9taXNlQWRhcHRlcihcclxuICogICAgY2IgPT4gJHEoY2IpLCAvLyBjcmVhdGluZyBhIG5ldyBwcm9taXNlO1xyXG4gKiAgICBkYXRhID0+ICRxLndoZW4oZGF0YSksIC8vIHJlc29sdmluZyBhIHByb21pc2U7XHJcbiAqICAgIHJlYXNvbiA9PiAkcS5yZWplY3QocmVhc29uKSAvLyByZWplY3RpbmcgYSBwcm9taXNlO1xyXG4gKiAgICApO1xyXG4gKlxyXG4gKiBjb25zdCBzcGV4ID0gc3BleExpYihhZGFwdGVyKTtcclxuICogYGBgXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNyZWF0ZVxyXG4gKiBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSBjYWxsYmFjayBwYXJhbWV0ZXIgYW5kIHJldHVybnMgYSBuZXcgcHJvbWlzZSBvYmplY3QuXHJcbiAqIFRoZSBjYWxsYmFjayBwYXJhbWV0ZXIgaXMgZXhwZWN0ZWQgdG8gYmUgYGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdClgLlxyXG4gKlxyXG4gKiBQYXNzaW5nIGluIGFueXRoaW5nIG90aGVyIHRoYW4gYSBmdW5jdGlvbiB3aWxsIHRocm93IGBBZGFwdGVyIHJlcXVpcmVzIGEgZnVuY3Rpb24gdG8gY3JlYXRlIGEgcHJvbWlzZS5gXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmVcclxuICogQSBmdW5jdGlvbiB0aGF0IHRha2VzIGFuIG9wdGlvbmFsIGRhdGEgcGFyYW1ldGVyIGFuZCByZXNvbHZlcyBhIHByb21pc2Ugd2l0aCBpdC5cclxuICpcclxuICogUGFzc2luZyBpbiBhbnl0aGluZyBvdGhlciB0aGFuIGEgZnVuY3Rpb24gd2lsbCB0aHJvdyBgQWRhcHRlciByZXF1aXJlcyBhIGZ1bmN0aW9uIHRvIHJlc29sdmUgYSBwcm9taXNlLmBcclxuICpcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0XHJcbiAqIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhbiBvcHRpb25hbCBlcnJvciBwYXJhbWV0ZXIgYW5kIHJlamVjdHMgYSBwcm9taXNlIHdpdGggaXQuXHJcbiAqXHJcbiAqIFBhc3NpbmcgaW4gYW55dGhpbmcgb3RoZXIgdGhhbiBhIGZ1bmN0aW9uIHdpbGwgdGhyb3cgYEFkYXB0ZXIgcmVxdWlyZXMgYSBmdW5jdGlvbiB0byByZWplY3QgYSBwcm9taXNlLmBcclxuICpcclxuICogQHNlZSB7QHR1dG9yaWFsIGNsaWVudH1cclxuICpcclxuICovXHJcbmNsYXNzIFByb21pc2VBZGFwdGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGNyZWF0ZSwgcmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgdGhpcy5jcmVhdGUgPSBjcmVhdGU7XHJcbiAgICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgICAgICB0aGlzLnJlamVjdCA9IHJlamVjdDtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBjcmVhdGUgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQWRhcHRlciByZXF1aXJlcyBhIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIHByb21pc2UuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHJlc29sdmUgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQWRhcHRlciByZXF1aXJlcyBhIGZ1bmN0aW9uIHRvIHJlc29sdmUgYSBwcm9taXNlLicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiByZWplY3QgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQWRhcHRlciByZXF1aXJlcyBhIGZ1bmN0aW9uIHRvIHJlamVjdCBhIHByb21pc2UuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2VBZGFwdGVyO1xyXG4iXSwibmFtZXMiOlsiUHJvbWlzZUFkYXB0ZXIiLCJjb25zdHJ1Y3RvciIsImNyZWF0ZSIsInJlc29sdmUiLCJyZWplY3QiLCJUeXBlRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spex/lib/adapter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spex/lib/errors/batch.js":
/*!***********************************************!*\
  !*** ./node_modules/spex/lib/errors/batch.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst npm = {\n    u: __webpack_require__(/*! util */ \"util\"),\n    os: __webpack_require__(/*! os */ \"os\"),\n    utils: __webpack_require__(/*! ../utils/static */ \"(rsc)/./node_modules/spex/lib/utils/static.js\")\n};\n/**\r\n * @class errors.BatchError\r\n * @augments external:Error\r\n * @description\r\n * This type represents all errors rejected by method {@link batch}, except for {@link external:TypeError TypeError}\r\n * when the method receives invalid input parameters.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `BatchError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * It represents the message of the first error encountered in the batch, and is a safe\r\n * version of using `first.message`.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {array} data\r\n * Array of objects `{success, result, [origin]}`:\r\n * - `success` = true/false, indicates whether the corresponding value in the input array was resolved.\r\n * - `result` = resolved data, if `success`=`true`, or else the rejection reason.\r\n * - `origin` - set only when failed as a result of an unsuccessful call into the notification callback\r\n *    (parameter `cb` of method {@link batch})\r\n *\r\n * The array has the same size as the input one that was passed into method {@link batch}, providing direct mapping.\r\n *\r\n * @property {} stat\r\n * Resolution Statistics.\r\n *\r\n * @property {number} stat.total\r\n * Total number of elements in the batch.\r\n *\r\n * @property {number} stat.succeeded\r\n * Number of resolved values in the batch.\r\n *\r\n * @property {number} stat.failed\r\n * Number of rejected values in the batch.\r\n *\r\n * @property {number} stat.duration\r\n * Time in milliseconds it took to settle all values.\r\n *\r\n * @property {} first\r\n * The very first error within the batch, with support for nested batch results, it is also the same error\r\n * as $[promise.all] would provide.\r\n *\r\n * @see {@link batch}\r\n *\r\n */ class BatchError extends Error {\n    constructor(result, errors, duration){\n        function getErrors() {\n            const err = new Array(errors.length);\n            for(let i = 0; i < errors.length; i++){\n                err[i] = result[errors[i]].result;\n                if (err[i] instanceof BatchError) {\n                    err[i] = err[i].getErrors();\n                }\n            }\n            npm.utils.extend(err, \"$isErrorList\", true);\n            return err;\n        }\n        const e = getErrors();\n        let first = e[0];\n        while(first && first.$isErrorList){\n            first = first[0];\n        }\n        let message;\n        if (first instanceof Error) {\n            message = first.message;\n        } else {\n            if (typeof first !== \"string\") {\n                first = npm.u.inspect(first);\n            }\n            message = first;\n        }\n        super(message);\n        this.name = this.constructor.name;\n        this.data = result;\n        // we do not show it within the inspect, because when the error\n        // happens for a nested result, the output becomes a mess.\n        this.first = first;\n        this.stat = {\n            total: result.length,\n            succeeded: result.length - e.length,\n            failed: e.length,\n            duration: duration\n        };\n        this.getErrors = getErrors;\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\n/**\r\n * @method errors.BatchError.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * The output is an abbreviated version of the error, because the complete error\r\n * is often too much for displaying or even logging, as a batch can be of any size.\r\n * Therefore, only errors are rendered from the `data` property, alongside their indexes,\r\n * and only up to the first 5, to avoid polluting the screen or the log file.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */ BatchError.prototype.toString = function(level) {\n    level = level > 0 ? parseInt(level) : 0;\n    const gap0 = npm.utils.messageGap(level), gap1 = npm.utils.messageGap(level + 1), gap2 = npm.utils.messageGap(level + 2), lines = [\n        \"BatchError {\",\n        gap1 + \"stat: { total: \" + this.stat.total + \", succeeded: \" + this.stat.succeeded + \", failed: \" + this.stat.failed + \", duration: \" + this.stat.duration + \" }\",\n        gap1 + \"errors: [\"\n    ];\n    // In order to avoid polluting the error log or the console, \n    // we limit the log output to the top 5 errors:\n    const maxErrors = 5;\n    let counter = 0;\n    this.data.forEach((d, index)=>{\n        if (!d.success && counter < maxErrors) {\n            lines.push(gap2 + index + \": \" + npm.utils.formatError(d.result, level + 2));\n            counter++;\n        }\n    });\n    lines.push(gap1 + \"]\");\n    lines.push(gap0 + \"}\");\n    return lines.join(npm.os.EOL);\n};\nnpm.utils.addInspection(BatchError, function() {\n    return this.toString();\n});\nmodule.exports = {\n    BatchError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spex/lib/errors/batch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spex/lib/errors/index.js":
/*!***********************************************!*\
  !*** ./node_modules/spex/lib/errors/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { BatchError } = __webpack_require__(/*! ./batch */ \"(rsc)/./node_modules/spex/lib/errors/batch.js\");\nconst { PageError } = __webpack_require__(/*! ./page */ \"(rsc)/./node_modules/spex/lib/errors/page.js\");\nconst { SequenceError } = __webpack_require__(/*! ./sequence */ \"(rsc)/./node_modules/spex/lib/errors/sequence.js\");\n/**\r\n * @namespace errors\r\n * @description\r\n * Namespace for all custom error types supported by the library.\r\n *\r\n * In addition to the custom error type used by each method (regular error), they can also reject with\r\n * {@link external:TypeError TypeError} when receiving invalid input parameters.\r\n *\r\n * @property {function} BatchError\r\n * {@link errors.BatchError BatchError} class.\r\n *\r\n * Represents regular errors that can be reported by method {@link batch}.\r\n *\r\n * @property {function} PageError\r\n * {@link errors.PageError PageError} class.\r\n *\r\n * Represents regular errors that can be reported by method {@link page}.\r\n *\r\n * @property {function} SequenceError\r\n * {@link errors.SequenceError SequenceError} class.\r\n *\r\n * Represents regular errors that can be reported by method {@link sequence}.\r\n *\r\n */ module.exports = {\n    BatchError,\n    PageError,\n    SequenceError\n};\nObject.freeze(module.exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3BleC9saWIvZXJyb3JzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLEVBQUNBLFVBQVUsRUFBQyxHQUFHQyxtQkFBT0EsQ0FBQztBQUM3QixNQUFNLEVBQUNDLFNBQVMsRUFBQyxHQUFHRCxtQkFBT0EsQ0FBQztBQUM1QixNQUFNLEVBQUNFLGFBQWEsRUFBQyxHQUFHRixtQkFBT0EsQ0FBQztBQUdoQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0F1QkMsR0FDREcsT0FBT0MsT0FBTyxHQUFHO0lBQ2JMO0lBQ0FFO0lBQ0FDO0FBQ0o7QUFFQUcsT0FBT0MsTUFBTSxDQUFDSCxPQUFPQyxPQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHRtbC1jb252ZXJ0ZXIvLi9ub2RlX21vZHVsZXMvc3BleC9saWIvZXJyb3JzL2luZGV4LmpzPzc1ZGEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge0JhdGNoRXJyb3J9ID0gcmVxdWlyZSgnLi9iYXRjaCcpO1xyXG5jb25zdCB7UGFnZUVycm9yfSA9IHJlcXVpcmUoJy4vcGFnZScpO1xyXG5jb25zdCB7U2VxdWVuY2VFcnJvcn0gPSByZXF1aXJlKCcuL3NlcXVlbmNlJyk7XHJcblxyXG5cclxuLyoqXHJcbiAqIEBuYW1lc3BhY2UgZXJyb3JzXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBOYW1lc3BhY2UgZm9yIGFsbCBjdXN0b20gZXJyb3IgdHlwZXMgc3VwcG9ydGVkIGJ5IHRoZSBsaWJyYXJ5LlxyXG4gKlxyXG4gKiBJbiBhZGRpdGlvbiB0byB0aGUgY3VzdG9tIGVycm9yIHR5cGUgdXNlZCBieSBlYWNoIG1ldGhvZCAocmVndWxhciBlcnJvciksIHRoZXkgY2FuIGFsc28gcmVqZWN0IHdpdGhcclxuICoge0BsaW5rIGV4dGVybmFsOlR5cGVFcnJvciBUeXBlRXJyb3J9IHdoZW4gcmVjZWl2aW5nIGludmFsaWQgaW5wdXQgcGFyYW1ldGVycy5cclxuICpcclxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gQmF0Y2hFcnJvclxyXG4gKiB7QGxpbmsgZXJyb3JzLkJhdGNoRXJyb3IgQmF0Y2hFcnJvcn0gY2xhc3MuXHJcbiAqXHJcbiAqIFJlcHJlc2VudHMgcmVndWxhciBlcnJvcnMgdGhhdCBjYW4gYmUgcmVwb3J0ZWQgYnkgbWV0aG9kIHtAbGluayBiYXRjaH0uXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFBhZ2VFcnJvclxyXG4gKiB7QGxpbmsgZXJyb3JzLlBhZ2VFcnJvciBQYWdlRXJyb3J9IGNsYXNzLlxyXG4gKlxyXG4gKiBSZXByZXNlbnRzIHJlZ3VsYXIgZXJyb3JzIHRoYXQgY2FuIGJlIHJlcG9ydGVkIGJ5IG1ldGhvZCB7QGxpbmsgcGFnZX0uXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFNlcXVlbmNlRXJyb3JcclxuICoge0BsaW5rIGVycm9ycy5TZXF1ZW5jZUVycm9yIFNlcXVlbmNlRXJyb3J9IGNsYXNzLlxyXG4gKlxyXG4gKiBSZXByZXNlbnRzIHJlZ3VsYXIgZXJyb3JzIHRoYXQgY2FuIGJlIHJlcG9ydGVkIGJ5IG1ldGhvZCB7QGxpbmsgc2VxdWVuY2V9LlxyXG4gKlxyXG4gKi9cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBCYXRjaEVycm9yLFxyXG4gICAgUGFnZUVycm9yLFxyXG4gICAgU2VxdWVuY2VFcnJvclxyXG59O1xyXG5cclxuT2JqZWN0LmZyZWV6ZShtb2R1bGUuZXhwb3J0cyk7XHJcbiJdLCJuYW1lcyI6WyJCYXRjaEVycm9yIiwicmVxdWlyZSIsIlBhZ2VFcnJvciIsIlNlcXVlbmNlRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiT2JqZWN0IiwiZnJlZXplIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spex/lib/errors/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spex/lib/errors/page.js":
/*!**********************************************!*\
  !*** ./node_modules/spex/lib/errors/page.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst npm = {\n    u: __webpack_require__(/*! util */ \"util\"),\n    os: __webpack_require__(/*! os */ \"os\"),\n    utils: __webpack_require__(/*! ../utils/static */ \"(rsc)/./node_modules/spex/lib/utils/static.js\")\n};\nconst errorReasons = {\n    0: \"Page with index %d rejected.\",\n    1: \"Source %s returned a rejection at index %d.\",\n    2: \"Source %s threw an error at index %d.\",\n    3: \"Destination %s returned a rejection at index %d.\",\n    4: \"Destination %s threw an error at index %d.\",\n    5: \"Source %s returned a non-array value at index %d.\"\n};\n/**\r\n * @class errors.PageError\r\n * @augments external:Error\r\n * @description\r\n * This type represents all errors rejected by method {@link page}, except for {@link external:TypeError TypeError}\r\n * when the method receives invalid input parameters.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `PageError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {} error\r\n * The error that was thrown, or the rejection reason.\r\n *\r\n * @property {number} index\r\n * Index of the element in the sequence for which the error/rejection occurred.\r\n *\r\n * @property {number} duration\r\n * Duration (in milliseconds) of processing until the error/rejection occurred.\r\n *\r\n * @property {string} reason\r\n * Textual explanation of why the method failed.\r\n *\r\n * @property {} source\r\n * Resolved `data` parameter that was passed into the `source` function.\r\n *\r\n * It is only set when the error/rejection occurred inside the `source` function.\r\n *\r\n * @property {} dest\r\n * Resolved `data` parameter that was passed into the `dest` function.\r\n *\r\n * It is only set when the error/rejection occurred inside the `dest` function.\r\n *\r\n * @see\r\n * {@link page},\r\n * {@link batch}\r\n *\r\n */ class PageError extends Error {\n    constructor(e, code, cbName, duration){\n        let message;\n        if (e.error instanceof Error) {\n            message = e.error.message;\n        } else {\n            message = e.error;\n            if (typeof message !== \"string\") {\n                message = npm.u.inspect(message);\n            }\n        }\n        super(message);\n        this.name = this.constructor.name;\n        this.index = e.index;\n        this.duration = duration;\n        this.error = e.error;\n        if (\"source\" in e) {\n            this.source = e.source;\n        }\n        if (\"dest\" in e) {\n            this.dest = e.dest;\n        }\n        if (code) {\n            cbName = cbName ? \"'\" + cbName + \"'\" : \"<anonymous>\";\n            this.reason = npm.u.format(errorReasons[code], cbName, e.index);\n        } else {\n            this.reason = npm.u.format(errorReasons[code], e.index);\n        }\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\n/**\r\n * @method errors.PageError.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */ PageError.prototype.toString = function(level) {\n    level = level > 0 ? parseInt(level) : 0;\n    const gap0 = npm.utils.messageGap(level), gap1 = npm.utils.messageGap(level + 1), lines = [\n        \"PageError {\",\n        gap1 + \"message: \" + JSON.stringify(this.message),\n        gap1 + \"reason: \" + this.reason,\n        gap1 + \"index: \" + this.index,\n        gap1 + \"duration: \" + this.duration\n    ];\n    lines.push(gap1 + \"error: \" + npm.utils.formatError(this.error, level + 1));\n    lines.push(gap0 + \"}\");\n    return lines.join(npm.os.EOL);\n};\nnpm.utils.addInspection(PageError, function() {\n    return this.toString();\n});\nmodule.exports = {\n    PageError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spex/lib/errors/page.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spex/lib/errors/sequence.js":
/*!**************************************************!*\
  !*** ./node_modules/spex/lib/errors/sequence.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst npm = {\n    u: __webpack_require__(/*! util */ \"util\"),\n    os: __webpack_require__(/*! os */ \"os\"),\n    utils: __webpack_require__(/*! ../utils/static */ \"(rsc)/./node_modules/spex/lib/utils/static.js\")\n};\nconst errorReasons = {\n    0: \"Source %s returned a rejection at index %d.\",\n    1: \"Source %s threw an error at index %d.\",\n    2: \"Destination %s returned a rejection at index %d.\",\n    3: \"Destination %s threw an error at index %d.\"\n};\n/**\r\n * @class errors.SequenceError\r\n * @augments external:Error\r\n * @description\r\n * This type represents all errors rejected by method {@link sequence}, except for {@link external:TypeError TypeError}\r\n * when the method receives invalid input parameters.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `SequenceError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {} error\r\n * The error that was thrown or the rejection reason.\r\n *\r\n * @property {number} index\r\n * Index of the element in the sequence for which the error/rejection occurred.\r\n *\r\n * @property {number} duration\r\n * Duration (in milliseconds) of processing until the error/rejection occurred.\r\n *\r\n * @property {string} reason\r\n * Textual explanation of why the method failed.\r\n *\r\n * @property {} source\r\n * Resolved `data` parameter that was passed into the `source` function.\r\n *\r\n * It is only set when the error/rejection occurred inside the `source` function.\r\n *\r\n * @property {} dest\r\n * Resolved `data` parameter that was passed into the `dest` function.\r\n *\r\n * It is only set when the error/rejection occurred inside the `dest` function.\r\n *\r\n * @see {@link sequence}\r\n *\r\n */ class SequenceError extends Error {\n    constructor(e, code, cbName, duration){\n        let message;\n        if (e.error instanceof Error) {\n            message = e.error.message;\n        } else {\n            message = e.error;\n            if (typeof message !== \"string\") {\n                message = npm.u.inspect(message);\n            }\n        }\n        super(message);\n        this.name = this.constructor.name;\n        this.index = e.index;\n        this.duration = duration;\n        this.error = e.error;\n        if (\"source\" in e) {\n            this.source = e.source;\n        } else {\n            this.dest = e.dest;\n        }\n        cbName = cbName ? \"'\" + cbName + \"'\" : \"<anonymous>\";\n        this.reason = npm.u.format(errorReasons[code], cbName, e.index);\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\n/**\r\n * @method errors.SequenceError.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */ SequenceError.prototype.toString = function(level) {\n    level = level > 0 ? parseInt(level) : 0;\n    const gap0 = npm.utils.messageGap(level), gap1 = npm.utils.messageGap(level + 1), lines = [\n        \"SequenceError {\",\n        gap1 + \"message: \" + JSON.stringify(this.message),\n        gap1 + \"reason: \" + this.reason,\n        gap1 + \"index: \" + this.index,\n        gap1 + \"duration: \" + this.duration\n    ];\n    lines.push(gap1 + \"error: \" + npm.utils.formatError(this.error, level + 1));\n    lines.push(gap0 + \"}\");\n    return lines.join(npm.os.EOL);\n};\nnpm.utils.addInspection(SequenceError, function() {\n    return this.toString();\n});\nmodule.exports = {\n    SequenceError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spex/lib/errors/sequence.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spex/lib/ext/batch.js":
/*!********************************************!*\
  !*** ./node_modules/spex/lib/ext/batch.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { BatchError } = __webpack_require__(/*! ../errors/batch */ \"(rsc)/./node_modules/spex/lib/errors/batch.js\");\n/**\r\n * @method batch\r\n * @description\r\n * Settles (resolves or rejects) every [mixed value]{@tutorial mixed} in the input array.\r\n *\r\n * The method resolves with an array of results, the same as the standard $[promise.all],\r\n * while providing comprehensive error details in case of a reject, in the form of\r\n * type {@link errors.BatchError BatchError}.\r\n *\r\n * @param {Array} values\r\n * Array of [mixed values]{@tutorial mixed} (it can be empty), to be resolved asynchronously, in no particular order.\r\n *\r\n * Passing in anything other than an array will reject with {@link external:TypeError TypeError} =\r\n * `Method 'batch' requires an array of values.`\r\n *\r\n * @param {Object} [options]\r\n * Optional Parameters.\r\n *\r\n * @param {Function|generator} [options.cb]\r\n * Optional callback (or generator) to receive the result for each settled value.\r\n *\r\n * Callback Parameters:\r\n *  - `index` = index of the value in the source array\r\n *  - `success` - indicates whether the value was resolved (`true`), or rejected (`false`)\r\n *  - `result` = resolved data, if `success`=`true`, or else the rejection reason\r\n *  - `delay` = number of milliseconds since the last call (`undefined` when `index=0`)\r\n *\r\n * The function inherits `this` context from the calling method.\r\n *\r\n * It can optionally return a promise to indicate that notifications are handled asynchronously.\r\n * And if the returned promise resolves, it signals a successful handling, while any resolved\r\n * data is ignored.\r\n *\r\n * If the function returns a rejected promise or throws an error, the entire method rejects\r\n * with {@link errors.BatchError BatchError} where the corresponding value in property `data`\r\n * is set to `{success, result, origin}`:\r\n *  - `success` = `false`\r\n *  - `result` = the rejection reason or the error thrown by the notification callback\r\n *  - `origin` = the original data passed into the callback as object `{success, result}`\r\n *\r\n * @returns {external:Promise}\r\n *\r\n * The method resolves with an array of individual resolved results, the same as the standard $[promise.all].\r\n * In addition, the array is extended with a hidden read-only property `duration` - number of milliseconds\r\n * spent resolving all the data.\r\n *\r\n * The method rejects with {@link errors.BatchError BatchError} when any of the following occurs:\r\n *  - one or more values rejected or threw an error while being resolved as a [mixed value]{@tutorial mixed}\r\n *  - notification callback `cb` returned a rejected promise or threw an error\r\n *\r\n */ function batch(values, options, config) {\n    const $p = config.promise, utils = config.utils;\n    if (!Array.isArray(values)) {\n        return $p.reject(new TypeError(\"Method 'batch' requires an array of values.\"));\n    }\n    if (!values.length) {\n        const empty = [];\n        utils.extend(empty, \"duration\", 0);\n        return $p.resolve(empty);\n    }\n    options = options || {};\n    const cb = utils.wrap(options.cb), self = this, start = Date.now();\n    return $p((resolve, reject)=>{\n        let cbTime, remaining = values.length;\n        const errors = [], result = new Array(remaining);\n        values.forEach((item, i)=>{\n            utils.resolve.call(self, item, null, (data)=>{\n                result[i] = data;\n                step(i, true, data);\n            }, (reason)=>{\n                result[i] = {\n                    success: false,\n                    result: reason\n                };\n                errors.push(i);\n                step(i, false, reason);\n            });\n        });\n        function step(idx, pass, data) {\n            if (cb) {\n                const cbNow = Date.now(), cbDelay = idx ? cbNow - cbTime : undefined;\n                let cbResult;\n                cbTime = cbNow;\n                try {\n                    cbResult = cb.call(self, idx, pass, data, cbDelay);\n                } catch (e) {\n                    setError(e);\n                }\n                if (utils.isPromise(cbResult)) {\n                    cbResult.then(check).catch((error)=>{\n                        setError(error);\n                        check();\n                    });\n                } else {\n                    check();\n                }\n            } else {\n                check();\n            }\n            function setError(e) {\n                const r = pass ? {\n                    success: false\n                } : result[idx];\n                if (pass) {\n                    result[idx] = r;\n                    errors.push(idx);\n                }\n                r.result = e;\n                r.origin = {\n                    success: pass,\n                    result: data\n                };\n            }\n            function check() {\n                if (!--remaining) {\n                    if (errors.length) {\n                        errors.sort();\n                        if (errors.length < result.length) {\n                            for(let i = 0, k = 0; i < result.length; i++){\n                                if (i === errors[k]) {\n                                    k++;\n                                } else {\n                                    result[i] = {\n                                        success: true,\n                                        result: result[i]\n                                    };\n                                }\n                            }\n                        }\n                        reject(new BatchError(result, errors, Date.now() - start));\n                    } else {\n                        utils.extend(result, \"duration\", Date.now() - start);\n                        resolve(result);\n                    }\n                }\n                return null; // this dummy return is just to prevent Bluebird warnings;\n            }\n        }\n    });\n}\nmodule.exports = function(config) {\n    return function(values, options) {\n        return batch.call(this, values, options, config);\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spex/lib/ext/batch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spex/lib/ext/page.js":
/*!*******************************************!*\
  !*** ./node_modules/spex/lib/ext/page.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { PageError } = __webpack_require__(/*! ../errors/page */ \"(rsc)/./node_modules/spex/lib/errors/page.js\");\n/**\r\n * @method page\r\n * @description\r\n * Resolves a dynamic sequence of pages/arrays with [mixed values]{@tutorial mixed}.\r\n *\r\n * The method acquires pages (arrays of [mixed values]{@tutorial mixed}) from the `source` function, one by one,\r\n * and resolves each page as a {@link batch}, till no more pages left or an error/reject occurs.\r\n *\r\n * @param {Function|generator} source\r\n * Expected to return a [mixed value]{@tutorial mixed} that resolves with the next page of data (array of [mixed values]{@tutorial mixed}).\r\n * Returning or resolving with `undefined` ends the sequence, and the method resolves.\r\n *\r\n * The function inherits `this` context from the calling method.\r\n *\r\n * Parameters:\r\n *  - `index` = index of the page being requested\r\n *  - `data` = previously returned page, resolved as a {@link batch} (`undefined` when `index=0`)\r\n *  - `delay` = number of milliseconds since the last call (`undefined` when `index=0`)\r\n *\r\n * If the function throws an error or returns a rejected promise, the method rejects with\r\n * {@link errors.PageError PageError}, which will have property `source` set.\r\n *\r\n * And if the function returns or resolves with anything other than an array or `undefined`,\r\n * the method rejects with the same {@link errors.PageError PageError}, but with `error` set to\r\n * `Unexpected data returned from the source.`\r\n *\r\n * Passing in anything other than a function will reject with {@link external:TypeError TypeError} = `Parameter 'source' must be a function.`\r\n *\r\n * @param {Object} [options]\r\n * Optional Parameters.\r\n *\r\n * @param {Function|generator} [options.dest]\r\n * Optional destination function (or generator), to receive a resolved {@link batch} of data\r\n * for each page, process it and respond as required.\r\n *\r\n * Parameters:\r\n *  - `index` = page index in the sequence\r\n *  - `data` = page data resolved as a {@link batch}\r\n *  - `delay` = number of milliseconds since the last call (`undefined` when `index=0`)\r\n *\r\n * The function inherits `this` context from the calling method.\r\n *\r\n * It can optionally return a promise object, if notifications are handled asynchronously.\r\n * And if a promise is returned, the method will not request another page from the `source`\r\n * function until the promise has been resolved.\r\n *\r\n * If the function throws an error or returns a rejected promise, the sequence terminates,\r\n * and the method rejects with {@link errors.PageError PageError}, which will have property `dest` set.\r\n *\r\n * @param {Number} [options.limit=0]\r\n * Limits the maximum number of pages to be requested from the `source`. If the value is greater\r\n * than 0, the method will successfully resolve once the specified limit has been reached.\r\n *\r\n * When `limit` isn't specified (default), the sequence is unlimited, and it will continue\r\n * till one of the following occurs:\r\n *  - `source` returns or resolves with `undefined` or an invalid value (non-array)\r\n *  - either `source` or `dest` functions throw an error or return a rejected promise\r\n *\r\n * @returns {external:Promise}\r\n *\r\n * When successful, the method resolves with object `{pages, total, duration}`:\r\n *  - `pages` = number of pages resolved\r\n *  - `total` = the sum of all page sizes (total number of values resolved)\r\n *  - `duration` = number of milliseconds consumed by the method\r\n *\r\n * When the method fails, it rejects with {@link errors.PageError PageError}.\r\n *\r\n */ function page(source, options, config) {\n    const $p = config.promise, spex = config.spex, utils = config.utils;\n    if (typeof source !== \"function\") {\n        return $p.reject(new TypeError(\"Parameter 'source' must be a function.\"));\n    }\n    options = options || {};\n    source = utils.wrap(source);\n    const limit = options.limit > 0 ? parseInt(options.limit) : 0, dest = utils.wrap(options.dest), self = this, start = Date.now();\n    let request, srcTime, destTime, total = 0;\n    return $p((resolve, reject)=>{\n        function loop(idx) {\n            const srcNow = Date.now(), srcDelay = idx ? srcNow - srcTime : undefined;\n            srcTime = srcNow;\n            utils.resolve.call(self, source, [\n                idx,\n                request,\n                srcDelay\n            ], (value)=>{\n                if (value === undefined) {\n                    success();\n                } else {\n                    if (value instanceof Array) {\n                        spex.batch(value).then((data)=>{\n                            request = data;\n                            total += data.length;\n                            if (dest) {\n                                const destNow = Date.now(), destDelay = idx ? destNow - destTime : undefined;\n                                let destResult;\n                                destTime = destNow;\n                                try {\n                                    destResult = dest.call(self, idx, data, destDelay);\n                                } catch (err) {\n                                    fail({\n                                        error: err,\n                                        dest: data\n                                    }, 4, dest.name);\n                                    return;\n                                }\n                                if (utils.isPromise(destResult)) {\n                                    destResult.then(next).catch((error)=>{\n                                        fail({\n                                            error: error,\n                                            dest: data\n                                        }, 3, dest.name);\n                                    });\n                                } else {\n                                    next();\n                                }\n                            } else {\n                                next();\n                            }\n                            return null; // this dummy return is just to prevent Bluebird warnings;\n                        }).catch((error)=>{\n                            fail({\n                                error: error\n                            }, 0);\n                        });\n                    } else {\n                        fail({\n                            error: new Error(\"Unexpected data returned from the source.\"),\n                            source: request\n                        }, 5, source.name);\n                    }\n                }\n            }, (reason, isRej)=>{\n                fail({\n                    error: reason,\n                    source: request\n                }, isRej ? 1 : 2, source.name);\n            });\n            function next() {\n                if (limit === ++idx) {\n                    success();\n                } else {\n                    loop(idx);\n                }\n                return null; // this dummy return is just to prevent Bluebird warnings;\n            }\n            function success() {\n                resolve({\n                    pages: idx,\n                    total: total,\n                    duration: Date.now() - start\n                });\n            }\n            function fail(reason, code, cbName) {\n                reason.index = idx;\n                reject(new PageError(reason, code, cbName, Date.now() - start));\n            }\n        }\n        loop(0);\n    });\n}\nmodule.exports = function(config) {\n    return function(source, options) {\n        return page.call(this, source, options, config);\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spex/lib/ext/page.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spex/lib/ext/sequence.js":
/*!***********************************************!*\
  !*** ./node_modules/spex/lib/ext/sequence.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { SequenceError } = __webpack_require__(/*! ../errors/sequence */ \"(rsc)/./node_modules/spex/lib/errors/sequence.js\");\n/**\r\n * @method sequence\r\n * @description\r\n * Resolves a dynamic sequence of [mixed values]{@tutorial mixed}.\r\n *\r\n * The method acquires [mixed values]{@tutorial mixed} from the `source` function, one at a time, and resolves them,\r\n * till either no more values left in the sequence or an error/reject occurs.\r\n *\r\n * It supports both [linked and detached sequencing]{@tutorial sequencing}.\r\n *\r\n * @param {Function|generator} source\r\n * Expected to return the next [mixed value]{@tutorial mixed} to be resolved. Returning or resolving\r\n * with `undefined` ends the sequence, and the method resolves.\r\n *\r\n * Parameters:\r\n *  - `index` = current request index in the sequence\r\n *  - `data` = resolved data from the previous call (`undefined` when `index=0`)\r\n *  - `delay` = number of milliseconds since the last call (`undefined` when `index=0`)\r\n *\r\n * The function inherits `this` context from the calling method.\r\n *\r\n * If the function throws an error or returns a rejected promise, the sequence terminates,\r\n * and the method rejects with {@link errors.SequenceError SequenceError}, which will have property `source` set.\r\n *\r\n * Passing in anything other than a function will reject with {@link external:TypeError TypeError} = `Parameter 'source' must be a function.`\r\n *\r\n * @param {Object} [options]\r\n * Optional Parameters.\r\n *\r\n * @param {Function|generator} [options.dest=null]\r\n * Optional destination function (or generator), to receive resolved data for each index,\r\n * process it and respond as required.\r\n *\r\n * Parameters:\r\n *  - `index` = index of the resolved data in the sequence\r\n *  - `data` = the data resolved\r\n *  - `delay` = number of milliseconds since the last call (`undefined` when `index=0`)\r\n *\r\n * The function inherits `this` context from the calling method.\r\n *\r\n * It can optionally return a promise object, if data processing is done asynchronously.\r\n * If a promise is returned, the method will not request another value from the `source` function,\r\n * until the promise has been resolved (the resolved value is ignored).\r\n *\r\n * If the function throws an error or returns a rejected promise, the sequence terminates,\r\n * and the method rejects with {@link errors.SequenceError SequenceError}, which will have property `dest` set.\r\n *\r\n * @param {Number} [options.limit=0]\r\n * Limits the maximum size of the sequence. If the value is greater than 0, the method will\r\n * successfully resolve once the specified limit has been reached.\r\n *\r\n * When `limit` isn't specified (default), the sequence is unlimited, and it will continue\r\n * till one of the following occurs:\r\n *  - `source` either returns or resolves with `undefined`\r\n *  - either `source` or `dest` functions throw an error or return a rejected promise\r\n *\r\n * @param {Boolean} [options.track=false]\r\n * Changes the type of data to be resolved by this method. By default, it is `false`\r\n * (see the return result). When set to be `true`, the method tracks/collects all resolved data\r\n * into an array internally, and resolves with that array once the method has finished successfully.\r\n *\r\n * It must be used with caution, as to the size of the sequence, because accumulating data for\r\n * a very large sequence can result in consuming too much memory.\r\n *\r\n * @returns {external:Promise}\r\n *\r\n * When successful, the resolved data depends on parameter `track`. When `track` is `false`\r\n * (default), the method resolves with object `{total, duration}`:\r\n *  - `total` = number of values resolved by the sequence\r\n *  - `duration` = number of milliseconds consumed by the method\r\n *\r\n * When `track` is `true`, the method resolves with an array of all the data that has been resolved,\r\n * the same way that the standard $[promise.all] resolves. In addition, the array comes extended with\r\n * a hidden read-only property `duration` - number of milliseconds consumed by the method.\r\n *\r\n * When the method fails, it rejects with {@link errors.SequenceError SequenceError}.\r\n */ function sequence(source, options, config) {\n    const $p = config.promise, utils = config.utils;\n    if (typeof source !== \"function\") {\n        return $p.reject(new TypeError(\"Parameter 'source' must be a function.\"));\n    }\n    source = utils.wrap(source);\n    options = options || {};\n    const limit = options.limit > 0 ? parseInt(options.limit) : 0, dest = utils.wrap(options.dest), self = this, start = Date.now();\n    let data, srcTime, destTime, result = [];\n    return $p((resolve, reject)=>{\n        function loop(idx) {\n            const srcNow = Date.now(), srcDelay = idx ? srcNow - srcTime : undefined;\n            srcTime = srcNow;\n            utils.resolve.call(self, source, [\n                idx,\n                data,\n                srcDelay\n            ], (value, delayed)=>{\n                data = value;\n                if (data === undefined) {\n                    success();\n                } else {\n                    if (options.track) {\n                        result.push(data);\n                    }\n                    if (dest) {\n                        const destNow = Date.now(), destDelay = idx ? destNow - destTime : undefined;\n                        let destResult;\n                        destTime = destNow;\n                        try {\n                            destResult = dest.call(self, idx, data, destDelay);\n                        } catch (e) {\n                            fail({\n                                error: e,\n                                dest: data\n                            }, 3, dest.name);\n                            return;\n                        }\n                        if (utils.isPromise(destResult)) {\n                            destResult.then(()=>{\n                                next(true);\n                                return null; // this dummy return is just to prevent Bluebird warnings;\n                            }).catch((error)=>{\n                                fail({\n                                    error: error,\n                                    dest: data\n                                }, 2, dest.name);\n                            });\n                        } else {\n                            next(delayed);\n                        }\n                    } else {\n                        next(delayed);\n                    }\n                }\n            }, (reason, isRej)=>{\n                fail({\n                    error: reason,\n                    source: data\n                }, isRej ? 0 : 1, source.name);\n            });\n            function next(delayed) {\n                if (limit === ++idx) {\n                    success();\n                } else {\n                    if (delayed) {\n                        loop(idx);\n                    } else {\n                        $p.resolve().then(()=>{\n                            loop(idx);\n                            return null; // this dummy return is just to prevent Bluebird warnings;\n                        });\n                    }\n                }\n            }\n            function success() {\n                const length = Date.now() - start;\n                if (options.track) {\n                    utils.extend(result, \"duration\", length);\n                } else {\n                    result = {\n                        total: idx,\n                        duration: length\n                    };\n                }\n                resolve(result);\n            }\n            function fail(reason, code, cbName) {\n                reason.index = idx;\n                reject(new SequenceError(reason, code, cbName, Date.now() - start));\n            }\n        }\n        loop(0);\n    });\n}\nmodule.exports = function(config) {\n    return function(source, options) {\n        return sequence.call(this, source, options, config);\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spex/lib/ext/sequence.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spex/lib/ext/stream/index.js":
/*!***************************************************!*\
  !*** ./node_modules/spex/lib/ext/stream/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst npm = {\n    read: __webpack_require__(/*! ./read */ \"(rsc)/./node_modules/spex/lib/ext/stream/read.js\")\n};\n/**\r\n * @namespace stream\r\n * @description\r\n * Namespace with methods that implement stream operations, and {@link stream.read read} is the only method currently supported.\r\n *\r\n * **Synchronous Stream Processing**\r\n *\r\n * ```js\r\n * const stream = require('spex')(Promise).stream;\r\n * const fs = require('fs');\r\n *\r\n * const rs = fs.createReadStream('values.txt');\r\n *\r\n * function receiver(index, data, delay) {\r\n *    console.log('RECEIVED:', index, data, delay);\r\n * }\r\n *\r\n * stream.read(rs, receiver)\r\n *     .then(data => {\r\n *         console.log('DATA:', data);\r\n *     })\r\n *     .catch(error => {\r\n *         console.log('ERROR:', error);\r\n *     });\r\n * ```\r\n *\r\n * **Asynchronous Stream Processing**\r\n *\r\n * ```js\r\n * const stream = require('spex')(Promise).stream;\r\n * const fs = require('fs');\r\n *\r\n * const rs = fs.createReadStream('values.txt');\r\n *\r\n * function receiver(index, data, delay) {\r\n *    return new Promise(resolve => {\r\n *        console.log('RECEIVED:', index, data, delay);\r\n *        resolve();\r\n *    });\r\n * }\r\n *\r\n * stream.read(rs, receiver)\r\n *     .then(data => {\r\n *         console.log('DATA:', data);\r\n *     })\r\n *     .catch(error => {\r\n *         console.log('ERROR:', error);\r\n *    });\r\n * ```\r\n *\r\n * @property {function} stream.read\r\n * Consumes and processes data from a $[Readable] stream.\r\n *\r\n */ module.exports = function(config) {\n    const res = {\n        read: npm.read(config)\n    };\n    Object.freeze(res);\n    return res;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3BleC9saWIvZXh0L3N0cmVhbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsTUFBTTtJQUNSQyxNQUFNQyxtQkFBT0EsQ0FBQztBQUNsQjtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXFEQyxHQUNEQyxPQUFPQyxPQUFPLEdBQUcsU0FBVUMsTUFBTTtJQUM3QixNQUFNQyxNQUFNO1FBQ1JMLE1BQU1ELElBQUlDLElBQUksQ0FBQ0k7SUFDbkI7SUFDQUUsT0FBT0MsTUFBTSxDQUFDRjtJQUNkLE9BQU9BO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odG1sLWNvbnZlcnRlci8uL25vZGVfbW9kdWxlcy9zcGV4L2xpYi9leHQvc3RyZWFtL2luZGV4LmpzP2M5MGIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbnBtID0ge1xyXG4gICAgcmVhZDogcmVxdWlyZSgnLi9yZWFkJylcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAbmFtZXNwYWNlIHN0cmVhbVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogTmFtZXNwYWNlIHdpdGggbWV0aG9kcyB0aGF0IGltcGxlbWVudCBzdHJlYW0gb3BlcmF0aW9ucywgYW5kIHtAbGluayBzdHJlYW0ucmVhZCByZWFkfSBpcyB0aGUgb25seSBtZXRob2QgY3VycmVudGx5IHN1cHBvcnRlZC5cclxuICpcclxuICogKipTeW5jaHJvbm91cyBTdHJlYW0gUHJvY2Vzc2luZyoqXHJcbiAqXHJcbiAqIGBgYGpzXHJcbiAqIGNvbnN0IHN0cmVhbSA9IHJlcXVpcmUoJ3NwZXgnKShQcm9taXNlKS5zdHJlYW07XHJcbiAqIGNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcclxuICpcclxuICogY29uc3QgcnMgPSBmcy5jcmVhdGVSZWFkU3RyZWFtKCd2YWx1ZXMudHh0Jyk7XHJcbiAqXHJcbiAqIGZ1bmN0aW9uIHJlY2VpdmVyKGluZGV4LCBkYXRhLCBkZWxheSkge1xyXG4gKiAgICBjb25zb2xlLmxvZygnUkVDRUlWRUQ6JywgaW5kZXgsIGRhdGEsIGRlbGF5KTtcclxuICogfVxyXG4gKlxyXG4gKiBzdHJlYW0ucmVhZChycywgcmVjZWl2ZXIpXHJcbiAqICAgICAudGhlbihkYXRhID0+IHtcclxuICogICAgICAgICBjb25zb2xlLmxvZygnREFUQTonLCBkYXRhKTtcclxuICogICAgIH0pXHJcbiAqICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gKiAgICAgICAgIGNvbnNvbGUubG9nKCdFUlJPUjonLCBlcnJvcik7XHJcbiAqICAgICB9KTtcclxuICogYGBgXHJcbiAqXHJcbiAqICoqQXN5bmNocm9ub3VzIFN0cmVhbSBQcm9jZXNzaW5nKipcclxuICpcclxuICogYGBganNcclxuICogY29uc3Qgc3RyZWFtID0gcmVxdWlyZSgnc3BleCcpKFByb21pc2UpLnN0cmVhbTtcclxuICogY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xyXG4gKlxyXG4gKiBjb25zdCBycyA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0oJ3ZhbHVlcy50eHQnKTtcclxuICpcclxuICogZnVuY3Rpb24gcmVjZWl2ZXIoaW5kZXgsIGRhdGEsIGRlbGF5KSB7XHJcbiAqICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICogICAgICAgIGNvbnNvbGUubG9nKCdSRUNFSVZFRDonLCBpbmRleCwgZGF0YSwgZGVsYXkpO1xyXG4gKiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gKiAgICB9KTtcclxuICogfVxyXG4gKlxyXG4gKiBzdHJlYW0ucmVhZChycywgcmVjZWl2ZXIpXHJcbiAqICAgICAudGhlbihkYXRhID0+IHtcclxuICogICAgICAgICBjb25zb2xlLmxvZygnREFUQTonLCBkYXRhKTtcclxuICogICAgIH0pXHJcbiAqICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gKiAgICAgICAgIGNvbnNvbGUubG9nKCdFUlJPUjonLCBlcnJvcik7XHJcbiAqICAgIH0pO1xyXG4gKiBgYGBcclxuICpcclxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gc3RyZWFtLnJlYWRcclxuICogQ29uc3VtZXMgYW5kIHByb2Nlc3NlcyBkYXRhIGZyb20gYSAkW1JlYWRhYmxlXSBzdHJlYW0uXHJcbiAqXHJcbiAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjb25maWcpIHtcclxuICAgIGNvbnN0IHJlcyA9IHtcclxuICAgICAgICByZWFkOiBucG0ucmVhZChjb25maWcpXHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmZyZWV6ZShyZXMpO1xyXG4gICAgcmV0dXJuIHJlcztcclxufTtcclxuIl0sIm5hbWVzIjpbIm5wbSIsInJlYWQiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImNvbmZpZyIsInJlcyIsIk9iamVjdCIsImZyZWV6ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spex/lib/ext/stream/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spex/lib/ext/stream/read.js":
/*!**************************************************!*\
  !*** ./node_modules/spex/lib/ext/stream/read.js ***!
  \**************************************************/
/***/ ((module) => {

eval("/**\r\n * @method stream.read\r\n * @description\r\n * Consumes and processes data from a $[Readable] stream.\r\n *\r\n * It reads the entire stream, using either **paused mode** (default), or in chunks (see `options.readChunks`)\r\n * with support for both synchronous and asynchronous data processing.\r\n *\r\n * **NOTE:** Once the method has finished, the onus is on the caller to release the stream\r\n * according to its protocol.\r\n *\r\n * @param {Object} stream\r\n * $[Readable] stream object.\r\n *\r\n * Passing in anything else will throw `Readable stream is required.`\r\n *\r\n * @param {Function|generator} receiver\r\n * Data processing callback (or generator).\r\n *\r\n * Passing in anything else will throw `Invalid stream receiver.`\r\n *\r\n * Parameters:\r\n *  - `index` = index of the call made to the function\r\n *  - `data` = array of all data reads from the stream's buffer\r\n *  - `delay` = number of milliseconds since the last call (`undefined` when `index=0`)\r\n *\r\n * The function is called with the same `this` context as the calling method.\r\n *\r\n * It can optionally return a promise object, if data processing is asynchronous.\r\n * And if a promise is returned, the method will not read data from the stream again,\r\n * until the promise has been resolved.\r\n *\r\n * If the function throws an error or returns a rejected promise, the method rejects\r\n * with the same error / rejection reason.\r\n *\r\n * @param {Object} [options]\r\n * Optional Parameters.\r\n *\r\n * @param {Boolean} [options.closable=false]\r\n * Instructs the method to resolve on event `close` supported by the stream, as opposed to event\r\n * `end` that's used by default.\r\n *\r\n * @param {Boolean} [options.readChunks=false]\r\n * By default, the method handles event `readable` of the stream to consume data in a simplified form,\r\n * item by item. If you enable this option, the method will instead handle event `data` of the stream,\r\n * to consume chunks of data.\r\n *\r\n * @param {Number} [options.readSize]\r\n * When the value is greater than 0, it sets the read size from the stream's buffer\r\n * when the next data is available. By default, the method uses as few reads as possible\r\n * to get all the data currently available in the buffer.\r\n *\r\n * NOTE: This option is ignored when option `readChunks` is enabled.\r\n *\r\n * @returns {external:Promise}\r\n *\r\n * When finished successfully, resolves with object `{calls, reads, length, duration}`:\r\n *  - `calls` = number of calls made into the `receiver`\r\n *  - `reads` = number of successful reads from the stream\r\n *  - `length` = total length for all the data reads from the stream\r\n *  - `duration` = number of milliseconds consumed by the method\r\n *\r\n * When it fails, the method rejects with the error/reject specified,\r\n * which can happen as a result of:\r\n *  - event `error` emitted by the stream\r\n *  - receiver throws an error or returns a rejected promise\r\n */ \nfunction read(stream, receiver, options, config) {\n    const $p = config.promise, utils = config.utils;\n    if (!utils.isReadableStream(stream)) {\n        return $p.reject(new TypeError(\"Readable stream is required.\"));\n    }\n    if (typeof receiver !== \"function\") {\n        return $p.reject(new TypeError(\"Invalid stream receiver.\"));\n    }\n    receiver = utils.wrap(receiver);\n    options = options || {};\n    const readSize = options.readSize > 0 ? parseInt(options.readSize) : null, self = this, start = Date.now(), receiveEvent = options.readChunks ? \"data\" : \"readable\";\n    let cbTime, ready, waiting, stop, reads = 0, length = 0, index = 0;\n    return $p((resolve, reject)=>{\n        function onReceive(data) {\n            ready = true;\n            process(data);\n        }\n        function onEnd() {\n            if (!options.closable) {\n                success();\n            }\n        }\n        function onClose() {\n            success();\n        }\n        function onError(error) {\n            fail(error);\n        }\n        stream.on(receiveEvent, onReceive);\n        stream.on(\"end\", onEnd);\n        stream.on(\"close\", onClose);\n        stream.on(\"error\", onError);\n        function process(data) {\n            if (!ready || stop || waiting) {\n                return;\n            }\n            ready = false;\n            let cache;\n            if (options.readChunks) {\n                cache = data;\n                // istanbul ignore else;\n                // we cannot test the else condition, as it requires a special broken stream interface.\n                if (!Array.isArray(cache)) {\n                    cache = [\n                        cache\n                    ];\n                }\n                length += cache.length;\n                reads++;\n            } else {\n                cache = [];\n                waiting = true;\n                let page;\n                do {\n                    page = stream.read(readSize);\n                    if (page) {\n                        cache.push(page);\n                        // istanbul ignore next: requires a unique stream that\n                        // creates objects without property `length` defined.\n                        length += page.length || 0;\n                        reads++;\n                    }\n                }while (page);\n                if (!cache.length) {\n                    waiting = false;\n                    return;\n                }\n            }\n            const cbNow = Date.now(), cbDelay = index ? cbNow - cbTime : undefined;\n            let result;\n            cbTime = cbNow;\n            try {\n                result = receiver.call(self, index++, cache, cbDelay);\n            } catch (e) {\n                fail(e);\n                return;\n            }\n            if (utils.isPromise(result)) {\n                result.then(()=>{\n                    waiting = false;\n                    process();\n                    return null; // this dummy return is just to prevent Bluebird warnings;\n                }).catch((error)=>{\n                    fail(error);\n                });\n            } else {\n                waiting = false;\n                process();\n            }\n        }\n        function success() {\n            cleanup();\n            resolve({\n                calls: index,\n                reads: reads,\n                length: length,\n                duration: Date.now() - start\n            });\n        }\n        function fail(error) {\n            stop = true;\n            cleanup();\n            reject(error);\n        }\n        function cleanup() {\n            stream.removeListener(receiveEvent, onReceive);\n            stream.removeListener(\"close\", onClose);\n            stream.removeListener(\"error\", onError);\n            stream.removeListener(\"end\", onEnd);\n        }\n    });\n}\nmodule.exports = function(config) {\n    return function(stream, receiver, options) {\n        return read.call(this, stream, receiver, options, config);\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spex/lib/ext/stream/read.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spex/lib/index.js":
/*!****************************************!*\
  !*** ./node_modules/spex/lib/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst npm = {\n    utils: __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/spex/lib/utils/index.js\"),\n    batch: __webpack_require__(/*! ./ext/batch */ \"(rsc)/./node_modules/spex/lib/ext/batch.js\"),\n    page: __webpack_require__(/*! ./ext/page */ \"(rsc)/./node_modules/spex/lib/ext/page.js\"),\n    sequence: __webpack_require__(/*! ./ext/sequence */ \"(rsc)/./node_modules/spex/lib/ext/sequence.js\"),\n    stream: __webpack_require__(/*! ./ext/stream */ \"(rsc)/./node_modules/spex/lib/ext/stream/index.js\"),\n    errors: __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/spex/lib/errors/index.js\")\n};\n/**\r\n * @module spex\r\n * @summary Specialized Promise Extensions\r\n * @author Vitaly Tomilov\r\n *\r\n * @description\r\n * Attaches to an external promise library and provides additional methods built solely\r\n * on the basic promise operations:\r\n *  - construct a new promise with a callback function\r\n *  - resolve a promise with some result data\r\n *  - reject a promise with a reason\r\n *\r\n * ### usage\r\n * For any third-party promise library:\r\n * ```js\r\n * const promise = require('bluebird');\r\n * const spex = require('spex')(promise);\r\n * ```\r\n * For ES6 promises:\r\n * ```js\r\n * const spex = require('spex')(Promise);\r\n * ```\r\n *\r\n * @param {Object|Function} promiseLib\r\n * Instance of a promise library to be used by this module.\r\n *\r\n * Some implementations use `Promise` constructor to create a new promise, while\r\n * others use the module's function for it. Both types are supported the same.\r\n *\r\n * Alternatively, an object of type {@link PromiseAdapter} can be passed in, which provides\r\n * compatibility with any promise library outside of the standard.\r\n *\r\n * Passing in a promise library that cannot be recognized will throw\r\n * `Invalid promise library specified.`\r\n *\r\n * @returns {Object}\r\n * Namespace with all supported methods.\r\n *\r\n * @see {@link PromiseAdapter}, {@link batch}, {@link page}, {@link sequence}, {@link stream}\r\n */ function main(promiseLib) {\n    const spex = {}, promise = parsePromiseLib(promiseLib); // promise library parsing;\n    const config = {\n        spex: spex,\n        promise: promise,\n        utils: npm.utils(promise)\n    };\n    spex.errors = npm.errors;\n    spex.batch = npm.batch(config);\n    spex.page = npm.page(config);\n    spex.sequence = npm.sequence(config);\n    spex.stream = npm.stream(config);\n    config.utils.extend(spex, \"$p\", promise);\n    Object.freeze(spex);\n    return spex;\n}\n//////////////////////////////////////////\n// Parses and validates a promise library;\nfunction parsePromiseLib(lib) {\n    if (lib) {\n        let promise;\n        if (lib instanceof main.PromiseAdapter) {\n            promise = function(func) {\n                return lib.create(func);\n            };\n            promise.resolve = lib.resolve;\n            promise.reject = lib.reject;\n            return promise;\n        }\n        const t = typeof lib;\n        if (t === \"function\" || t === \"object\") {\n            const Root = typeof lib.Promise === \"function\" ? lib.Promise : lib;\n            promise = function(func) {\n                return new Root(func);\n            };\n            promise.resolve = Root.resolve;\n            promise.reject = Root.reject;\n            if (typeof promise.resolve === \"function\" && typeof promise.reject === \"function\") {\n                return promise;\n            }\n        }\n    }\n    throw new TypeError(\"Invalid promise library specified.\");\n}\nmain.PromiseAdapter = __webpack_require__(/*! ./adapter */ \"(rsc)/./node_modules/spex/lib/adapter.js\");\nmain.errors = npm.errors;\nObject.freeze(main);\nmodule.exports = main; /**\r\n * @external Error\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\r\n */  /**\r\n * @external TypeError\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\r\n */  /**\r\n * @external Promise\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3BleC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLE1BQU07SUFDUkMsT0FBT0MsbUJBQU9BLENBQUM7SUFDZkMsT0FBT0QsbUJBQU9BLENBQUM7SUFDZkUsTUFBTUYsbUJBQU9BLENBQUM7SUFDZEcsVUFBVUgsbUJBQU9BLENBQUM7SUFDbEJJLFFBQVFKLG1CQUFPQSxDQUFDO0lBQ2hCSyxRQUFRTCxtQkFBT0EsQ0FBQztBQUNwQjtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0F1Q0MsR0FDRCxTQUFTTSxLQUFLQyxVQUFVO0lBRXBCLE1BQU1DLE9BQU8sQ0FBQyxHQUNWQyxVQUFVQyxnQkFBZ0JILGFBQWEsMkJBQTJCO0lBRXRFLE1BQU1JLFNBQVM7UUFDWEgsTUFBTUE7UUFDTkMsU0FBU0E7UUFDVFYsT0FBT0QsSUFBSUMsS0FBSyxDQUFDVTtJQUNyQjtJQUVBRCxLQUFLSCxNQUFNLEdBQUdQLElBQUlPLE1BQU07SUFDeEJHLEtBQUtQLEtBQUssR0FBR0gsSUFBSUcsS0FBSyxDQUFDVTtJQUN2QkgsS0FBS04sSUFBSSxHQUFHSixJQUFJSSxJQUFJLENBQUNTO0lBQ3JCSCxLQUFLTCxRQUFRLEdBQUdMLElBQUlLLFFBQVEsQ0FBQ1E7SUFDN0JILEtBQUtKLE1BQU0sR0FBR04sSUFBSU0sTUFBTSxDQUFDTztJQUV6QkEsT0FBT1osS0FBSyxDQUFDYSxNQUFNLENBQUNKLE1BQU0sTUFBTUM7SUFFaENJLE9BQU9DLE1BQU0sQ0FBQ047SUFFZCxPQUFPQTtBQUNYO0FBRUEsMENBQTBDO0FBQzFDLDBDQUEwQztBQUMxQyxTQUFTRSxnQkFBZ0JLLEdBQUc7SUFDeEIsSUFBSUEsS0FBSztRQUNMLElBQUlOO1FBQ0osSUFBSU0sZUFBZVQsS0FBS1UsY0FBYyxFQUFFO1lBQ3BDUCxVQUFVLFNBQVVRLElBQUk7Z0JBQ3BCLE9BQU9GLElBQUlHLE1BQU0sQ0FBQ0Q7WUFDdEI7WUFDQVIsUUFBUVUsT0FBTyxHQUFHSixJQUFJSSxPQUFPO1lBQzdCVixRQUFRVyxNQUFNLEdBQUdMLElBQUlLLE1BQU07WUFDM0IsT0FBT1g7UUFDWDtRQUNBLE1BQU1ZLElBQUksT0FBT047UUFDakIsSUFBSU0sTUFBTSxjQUFjQSxNQUFNLFVBQVU7WUFDcEMsTUFBTUMsT0FBTyxPQUFPUCxJQUFJUSxPQUFPLEtBQUssYUFBYVIsSUFBSVEsT0FBTyxHQUFHUjtZQUMvRE4sVUFBVSxTQUFVUSxJQUFJO2dCQUNwQixPQUFPLElBQUlLLEtBQUtMO1lBQ3BCO1lBQ0FSLFFBQVFVLE9BQU8sR0FBR0csS0FBS0gsT0FBTztZQUM5QlYsUUFBUVcsTUFBTSxHQUFHRSxLQUFLRixNQUFNO1lBQzVCLElBQUksT0FBT1gsUUFBUVUsT0FBTyxLQUFLLGNBQWMsT0FBT1YsUUFBUVcsTUFBTSxLQUFLLFlBQVk7Z0JBQy9FLE9BQU9YO1lBQ1g7UUFDSjtJQUNKO0lBQ0EsTUFBTSxJQUFJZSxVQUFVO0FBQ3hCO0FBRUFsQixLQUFLVSxjQUFjLEdBQUdoQixtQkFBT0EsQ0FBQztBQUM5Qk0sS0FBS0QsTUFBTSxHQUFHUCxJQUFJTyxNQUFNO0FBRXhCUSxPQUFPQyxNQUFNLENBQUNSO0FBRWRtQixPQUFPQyxPQUFPLEdBQUdwQixNQUVqQjs7O0NBR0MsSUFFRDs7O0NBR0MsSUFFRDs7O0NBR0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odG1sLWNvbnZlcnRlci8uL25vZGVfbW9kdWxlcy9zcGV4L2xpYi9pbmRleC5qcz9iM2FhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG5wbSA9IHtcclxuICAgIHV0aWxzOiByZXF1aXJlKCcuL3V0aWxzJyksXHJcbiAgICBiYXRjaDogcmVxdWlyZSgnLi9leHQvYmF0Y2gnKSxcclxuICAgIHBhZ2U6IHJlcXVpcmUoJy4vZXh0L3BhZ2UnKSxcclxuICAgIHNlcXVlbmNlOiByZXF1aXJlKCcuL2V4dC9zZXF1ZW5jZScpLFxyXG4gICAgc3RyZWFtOiByZXF1aXJlKCcuL2V4dC9zdHJlYW0nKSxcclxuICAgIGVycm9yczogcmVxdWlyZSgnLi9lcnJvcnMnKVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBtb2R1bGUgc3BleFxyXG4gKiBAc3VtbWFyeSBTcGVjaWFsaXplZCBQcm9taXNlIEV4dGVuc2lvbnNcclxuICogQGF1dGhvciBWaXRhbHkgVG9taWxvdlxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQXR0YWNoZXMgdG8gYW4gZXh0ZXJuYWwgcHJvbWlzZSBsaWJyYXJ5IGFuZCBwcm92aWRlcyBhZGRpdGlvbmFsIG1ldGhvZHMgYnVpbHQgc29sZWx5XHJcbiAqIG9uIHRoZSBiYXNpYyBwcm9taXNlIG9wZXJhdGlvbnM6XHJcbiAqICAtIGNvbnN0cnVjdCBhIG5ldyBwcm9taXNlIHdpdGggYSBjYWxsYmFjayBmdW5jdGlvblxyXG4gKiAgLSByZXNvbHZlIGEgcHJvbWlzZSB3aXRoIHNvbWUgcmVzdWx0IGRhdGFcclxuICogIC0gcmVqZWN0IGEgcHJvbWlzZSB3aXRoIGEgcmVhc29uXHJcbiAqXHJcbiAqICMjIyB1c2FnZVxyXG4gKiBGb3IgYW55IHRoaXJkLXBhcnR5IHByb21pc2UgbGlicmFyeTpcclxuICogYGBganNcclxuICogY29uc3QgcHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XHJcbiAqIGNvbnN0IHNwZXggPSByZXF1aXJlKCdzcGV4JykocHJvbWlzZSk7XHJcbiAqIGBgYFxyXG4gKiBGb3IgRVM2IHByb21pc2VzOlxyXG4gKiBgYGBqc1xyXG4gKiBjb25zdCBzcGV4ID0gcmVxdWlyZSgnc3BleCcpKFByb21pc2UpO1xyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R8RnVuY3Rpb259IHByb21pc2VMaWJcclxuICogSW5zdGFuY2Ugb2YgYSBwcm9taXNlIGxpYnJhcnkgdG8gYmUgdXNlZCBieSB0aGlzIG1vZHVsZS5cclxuICpcclxuICogU29tZSBpbXBsZW1lbnRhdGlvbnMgdXNlIGBQcm9taXNlYCBjb25zdHJ1Y3RvciB0byBjcmVhdGUgYSBuZXcgcHJvbWlzZSwgd2hpbGVcclxuICogb3RoZXJzIHVzZSB0aGUgbW9kdWxlJ3MgZnVuY3Rpb24gZm9yIGl0LiBCb3RoIHR5cGVzIGFyZSBzdXBwb3J0ZWQgdGhlIHNhbWUuXHJcbiAqXHJcbiAqIEFsdGVybmF0aXZlbHksIGFuIG9iamVjdCBvZiB0eXBlIHtAbGluayBQcm9taXNlQWRhcHRlcn0gY2FuIGJlIHBhc3NlZCBpbiwgd2hpY2ggcHJvdmlkZXNcclxuICogY29tcGF0aWJpbGl0eSB3aXRoIGFueSBwcm9taXNlIGxpYnJhcnkgb3V0c2lkZSBvZiB0aGUgc3RhbmRhcmQuXHJcbiAqXHJcbiAqIFBhc3NpbmcgaW4gYSBwcm9taXNlIGxpYnJhcnkgdGhhdCBjYW5ub3QgYmUgcmVjb2duaXplZCB3aWxsIHRocm93XHJcbiAqIGBJbnZhbGlkIHByb21pc2UgbGlicmFyeSBzcGVjaWZpZWQuYFxyXG4gKlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gKiBOYW1lc3BhY2Ugd2l0aCBhbGwgc3VwcG9ydGVkIG1ldGhvZHMuXHJcbiAqXHJcbiAqIEBzZWUge0BsaW5rIFByb21pc2VBZGFwdGVyfSwge0BsaW5rIGJhdGNofSwge0BsaW5rIHBhZ2V9LCB7QGxpbmsgc2VxdWVuY2V9LCB7QGxpbmsgc3RyZWFtfVxyXG4gKi9cclxuZnVuY3Rpb24gbWFpbihwcm9taXNlTGliKSB7XHJcblxyXG4gICAgY29uc3Qgc3BleCA9IHt9LCAvLyBsaWJyYXJ5IGluc3RhbmNlO1xyXG4gICAgICAgIHByb21pc2UgPSBwYXJzZVByb21pc2VMaWIocHJvbWlzZUxpYik7IC8vIHByb21pc2UgbGlicmFyeSBwYXJzaW5nO1xyXG5cclxuICAgIGNvbnN0IGNvbmZpZyA9IHtcclxuICAgICAgICBzcGV4OiBzcGV4LFxyXG4gICAgICAgIHByb21pc2U6IHByb21pc2UsXHJcbiAgICAgICAgdXRpbHM6IG5wbS51dGlscyhwcm9taXNlKVxyXG4gICAgfTtcclxuXHJcbiAgICBzcGV4LmVycm9ycyA9IG5wbS5lcnJvcnM7XHJcbiAgICBzcGV4LmJhdGNoID0gbnBtLmJhdGNoKGNvbmZpZyk7XHJcbiAgICBzcGV4LnBhZ2UgPSBucG0ucGFnZShjb25maWcpO1xyXG4gICAgc3BleC5zZXF1ZW5jZSA9IG5wbS5zZXF1ZW5jZShjb25maWcpO1xyXG4gICAgc3BleC5zdHJlYW0gPSBucG0uc3RyZWFtKGNvbmZpZyk7XHJcblxyXG4gICAgY29uZmlnLnV0aWxzLmV4dGVuZChzcGV4LCAnJHAnLCBwcm9taXNlKTtcclxuXHJcbiAgICBPYmplY3QuZnJlZXplKHNwZXgpO1xyXG5cclxuICAgIHJldHVybiBzcGV4O1xyXG59XHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy8gUGFyc2VzIGFuZCB2YWxpZGF0ZXMgYSBwcm9taXNlIGxpYnJhcnk7XHJcbmZ1bmN0aW9uIHBhcnNlUHJvbWlzZUxpYihsaWIpIHtcclxuICAgIGlmIChsaWIpIHtcclxuICAgICAgICBsZXQgcHJvbWlzZTtcclxuICAgICAgICBpZiAobGliIGluc3RhbmNlb2YgbWFpbi5Qcm9taXNlQWRhcHRlcikge1xyXG4gICAgICAgICAgICBwcm9taXNlID0gZnVuY3Rpb24gKGZ1bmMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsaWIuY3JlYXRlKGZ1bmMpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBwcm9taXNlLnJlc29sdmUgPSBsaWIucmVzb2x2ZTtcclxuICAgICAgICAgICAgcHJvbWlzZS5yZWplY3QgPSBsaWIucmVqZWN0O1xyXG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdCA9IHR5cGVvZiBsaWI7XHJcbiAgICAgICAgaWYgKHQgPT09ICdmdW5jdGlvbicgfHwgdCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgY29uc3QgUm9vdCA9IHR5cGVvZiBsaWIuUHJvbWlzZSA9PT0gJ2Z1bmN0aW9uJyA/IGxpYi5Qcm9taXNlIDogbGliO1xyXG4gICAgICAgICAgICBwcm9taXNlID0gZnVuY3Rpb24gKGZ1bmMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUm9vdChmdW5jKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlID0gUm9vdC5yZXNvbHZlO1xyXG4gICAgICAgICAgICBwcm9taXNlLnJlamVjdCA9IFJvb3QucmVqZWN0O1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHByb21pc2UucmVzb2x2ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgcHJvbWlzZS5yZWplY3QgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBwcm9taXNlIGxpYnJhcnkgc3BlY2lmaWVkLicpO1xyXG59XHJcblxyXG5tYWluLlByb21pc2VBZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVyJyk7XHJcbm1haW4uZXJyb3JzID0gbnBtLmVycm9ycztcclxuXHJcbk9iamVjdC5mcmVlemUobWFpbik7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IG1haW47XHJcblxyXG4vKipcclxuICogQGV4dGVybmFsIEVycm9yXHJcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRXJyb3JcclxuICovXHJcblxyXG4vKipcclxuICogQGV4dGVybmFsIFR5cGVFcnJvclxyXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1R5cGVFcnJvclxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAZXh0ZXJuYWwgUHJvbWlzZVxyXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1Byb21pc2VcclxuICovXHJcbiJdLCJuYW1lcyI6WyJucG0iLCJ1dGlscyIsInJlcXVpcmUiLCJiYXRjaCIsInBhZ2UiLCJzZXF1ZW5jZSIsInN0cmVhbSIsImVycm9ycyIsIm1haW4iLCJwcm9taXNlTGliIiwic3BleCIsInByb21pc2UiLCJwYXJzZVByb21pc2VMaWIiLCJjb25maWciLCJleHRlbmQiLCJPYmplY3QiLCJmcmVlemUiLCJsaWIiLCJQcm9taXNlQWRhcHRlciIsImZ1bmMiLCJjcmVhdGUiLCJyZXNvbHZlIiwicmVqZWN0IiwidCIsIlJvb3QiLCJQcm9taXNlIiwiVHlwZUVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spex/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spex/lib/utils/index.js":
/*!**********************************************!*\
  !*** ./node_modules/spex/lib/utils/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst npm = {\n    stat: __webpack_require__(/*! ./static */ \"(rsc)/./node_modules/spex/lib/utils/static.js\")\n};\nmodule.exports = function($p) {\n    const exp = {\n        formatError: npm.stat.formatError,\n        isPromise: npm.stat.isPromise,\n        isReadableStream: npm.stat.isReadableStream,\n        messageGap: npm.stat.messageGap,\n        extend: npm.stat.extend,\n        resolve: resolve,\n        wrap: wrap\n    };\n    return exp;\n    //////////////////////////////////////////\n    // Checks if the function is a generator,\n    // and if so - wraps it up into a promise;\n    function wrap(func) {\n        if (typeof func === \"function\") {\n            if (func.constructor.name === \"GeneratorFunction\") {\n                return asyncAdapter(func);\n            }\n            return func;\n        }\n        return null;\n    }\n    /////////////////////////////////////////////////////\n    // Resolves a mixed value into the actual value,\n    // consistent with the way mixed values are defined:\n    // https://github.com/vitaly-t/spex/wiki/Mixed-Values\n    function resolve(value, params, onSuccess, onError) {\n        const self = this;\n        let delayed = false;\n        function loop() {\n            while(typeof value === \"function\"){\n                if (value.constructor.name === \"GeneratorFunction\") {\n                    value = asyncAdapter(value);\n                }\n                try {\n                    value = params ? value.apply(self, params) : value.call(self);\n                } catch (e) {\n                    onError(e, false); // false means 'threw an error'\n                    return;\n                }\n            }\n            if (exp.isPromise(value)) {\n                value.then((data)=>{\n                    delayed = true;\n                    value = data;\n                    loop();\n                    return null; // this dummy return is just to prevent Bluebird warnings;\n                }).catch((error)=>{\n                    onError(error, true); // true means 'rejected'\n                });\n            } else {\n                onSuccess(value, delayed);\n            }\n        }\n        loop();\n    }\n    // Generator-to-Promise adapter;\n    // Based on: https://www.promisejs.org/generators/#both\n    function asyncAdapter(generator) {\n        return function() {\n            const g = generator.apply(this, arguments);\n            function handle(result) {\n                if (result.done) {\n                    return $p.resolve(result.value);\n                }\n                return $p.resolve(result.value).then((res)=>handle(g.next(res)), (err)=>handle(g.throw(err)));\n            }\n            return handle(g.next());\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3BleC9saWIvdXRpbHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLE1BQU07SUFDUkMsTUFBTUMsbUJBQU9BLENBQUM7QUFDbEI7QUFFQUMsT0FBT0MsT0FBTyxHQUFHLFNBQVVDLEVBQUU7SUFFekIsTUFBTUMsTUFBTTtRQUNSQyxhQUFhUCxJQUFJQyxJQUFJLENBQUNNLFdBQVc7UUFDakNDLFdBQVdSLElBQUlDLElBQUksQ0FBQ08sU0FBUztRQUM3QkMsa0JBQWtCVCxJQUFJQyxJQUFJLENBQUNRLGdCQUFnQjtRQUMzQ0MsWUFBWVYsSUFBSUMsSUFBSSxDQUFDUyxVQUFVO1FBQy9CQyxRQUFRWCxJQUFJQyxJQUFJLENBQUNVLE1BQU07UUFDdkJDLFNBQVNBO1FBQ1RDLE1BQU1BO0lBQ1Y7SUFFQSxPQUFPUDtJQUVQLDBDQUEwQztJQUMxQyx5Q0FBeUM7SUFDekMsMENBQTBDO0lBQzFDLFNBQVNPLEtBQUtDLElBQUk7UUFDZCxJQUFJLE9BQU9BLFNBQVMsWUFBWTtZQUM1QixJQUFJQSxLQUFLQyxXQUFXLENBQUNDLElBQUksS0FBSyxxQkFBcUI7Z0JBQy9DLE9BQU9DLGFBQWFIO1lBQ3hCO1lBQ0EsT0FBT0E7UUFDWDtRQUNBLE9BQU87SUFDWDtJQUVBLHFEQUFxRDtJQUNyRCxnREFBZ0Q7SUFDaEQsb0RBQW9EO0lBQ3BELHFEQUFxRDtJQUNyRCxTQUFTRixRQUFRTSxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxPQUFPO1FBRTlDLE1BQU1DLE9BQU8sSUFBSTtRQUNqQixJQUFJQyxVQUFVO1FBRWQsU0FBU0M7WUFDTCxNQUFPLE9BQU9OLFVBQVUsV0FBWTtnQkFDaEMsSUFBSUEsTUFBTUgsV0FBVyxDQUFDQyxJQUFJLEtBQUsscUJBQXFCO29CQUNoREUsUUFBUUQsYUFBYUM7Z0JBQ3pCO2dCQUNBLElBQUk7b0JBQ0FBLFFBQVFDLFNBQVNELE1BQU1PLEtBQUssQ0FBQ0gsTUFBTUgsVUFBVUQsTUFBTVEsSUFBSSxDQUFDSjtnQkFDNUQsRUFBRSxPQUFPSyxHQUFHO29CQUNSTixRQUFRTSxHQUFHLFFBQVEsK0JBQStCO29CQUNsRDtnQkFDSjtZQUNKO1lBQ0EsSUFBSXJCLElBQUlFLFNBQVMsQ0FBQ1UsUUFBUTtnQkFDdEJBLE1BQ0tVLElBQUksQ0FBQ0MsQ0FBQUE7b0JBQ0ZOLFVBQVU7b0JBQ1ZMLFFBQVFXO29CQUNSTDtvQkFDQSxPQUFPLE1BQU0sMERBQTBEO2dCQUMzRSxHQUNDTSxLQUFLLENBQUNDLENBQUFBO29CQUNIVixRQUFRVSxPQUFPLE9BQU8sd0JBQXdCO2dCQUNsRDtZQUNSLE9BQU87Z0JBQ0hYLFVBQVVGLE9BQU9LO1lBQ3JCO1FBQ0o7UUFFQUM7SUFDSjtJQUVBLGdDQUFnQztJQUNoQyx1REFBdUQ7SUFDdkQsU0FBU1AsYUFBYWUsU0FBUztRQUMzQixPQUFPO1lBQ0gsTUFBTUMsSUFBSUQsVUFBVVAsS0FBSyxDQUFDLElBQUksRUFBRVM7WUFFaEMsU0FBU0MsT0FBT0MsTUFBTTtnQkFDbEIsSUFBSUEsT0FBT0MsSUFBSSxFQUFFO29CQUNiLE9BQU9oQyxHQUFHTyxPQUFPLENBQUN3QixPQUFPbEIsS0FBSztnQkFDbEM7Z0JBQ0EsT0FBT2IsR0FBR08sT0FBTyxDQUFDd0IsT0FBT2xCLEtBQUssRUFDekJVLElBQUksQ0FBQ1UsQ0FBQUEsTUFBT0gsT0FBT0YsRUFBRU0sSUFBSSxDQUFDRCxPQUFPRSxDQUFBQSxNQUFPTCxPQUFPRixFQUFFUSxLQUFLLENBQUNEO1lBQ2hFO1lBRUEsT0FBT0wsT0FBT0YsRUFBRU0sSUFBSTtRQUN4QjtJQUNKO0FBRUoiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odG1sLWNvbnZlcnRlci8uL25vZGVfbW9kdWxlcy9zcGV4L2xpYi91dGlscy9pbmRleC5qcz8zMjFhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG5wbSA9IHtcclxuICAgIHN0YXQ6IHJlcXVpcmUoJy4vc3RhdGljJylcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCRwKSB7XHJcblxyXG4gICAgY29uc3QgZXhwID0ge1xyXG4gICAgICAgIGZvcm1hdEVycm9yOiBucG0uc3RhdC5mb3JtYXRFcnJvcixcclxuICAgICAgICBpc1Byb21pc2U6IG5wbS5zdGF0LmlzUHJvbWlzZSxcclxuICAgICAgICBpc1JlYWRhYmxlU3RyZWFtOiBucG0uc3RhdC5pc1JlYWRhYmxlU3RyZWFtLFxyXG4gICAgICAgIG1lc3NhZ2VHYXA6IG5wbS5zdGF0Lm1lc3NhZ2VHYXAsXHJcbiAgICAgICAgZXh0ZW5kOiBucG0uc3RhdC5leHRlbmQsXHJcbiAgICAgICAgcmVzb2x2ZTogcmVzb2x2ZSxcclxuICAgICAgICB3cmFwOiB3cmFwXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBleHA7XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyBDaGVja3MgaWYgdGhlIGZ1bmN0aW9uIGlzIGEgZ2VuZXJhdG9yLFxyXG4gICAgLy8gYW5kIGlmIHNvIC0gd3JhcHMgaXQgdXAgaW50byBhIHByb21pc2U7XHJcbiAgICBmdW5jdGlvbiB3cmFwKGZ1bmMpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGZ1bmMgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgaWYgKGZ1bmMuY29uc3RydWN0b3IubmFtZSA9PT0gJ0dlbmVyYXRvckZ1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFzeW5jQWRhcHRlcihmdW5jKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZnVuYztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vIFJlc29sdmVzIGEgbWl4ZWQgdmFsdWUgaW50byB0aGUgYWN0dWFsIHZhbHVlLFxyXG4gICAgLy8gY29uc2lzdGVudCB3aXRoIHRoZSB3YXkgbWl4ZWQgdmFsdWVzIGFyZSBkZWZpbmVkOlxyXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3ZpdGFseS10L3NwZXgvd2lraS9NaXhlZC1WYWx1ZXNcclxuICAgIGZ1bmN0aW9uIHJlc29sdmUodmFsdWUsIHBhcmFtcywgb25TdWNjZXNzLCBvbkVycm9yKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGxldCBkZWxheWVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGxvb3AoKSB7XHJcbiAgICAgICAgICAgIHdoaWxlICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnR2VuZXJhdG9yRnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBhc3luY0FkYXB0ZXIodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcmFtcyA/IHZhbHVlLmFwcGx5KHNlbGYsIHBhcmFtcykgOiB2YWx1ZS5jYWxsKHNlbGYpO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoZSwgZmFsc2UpOyAvLyBmYWxzZSBtZWFucyAndGhyZXcgYW4gZXJyb3InXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChleHAuaXNQcm9taXNlKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXllZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9vcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gdGhpcyBkdW1teSByZXR1cm4gaXMganVzdCB0byBwcmV2ZW50IEJsdWViaXJkIHdhcm5pbmdzO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnJvciwgdHJ1ZSk7IC8vIHRydWUgbWVhbnMgJ3JlamVjdGVkJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgb25TdWNjZXNzKHZhbHVlLCBkZWxheWVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbG9vcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdlbmVyYXRvci10by1Qcm9taXNlIGFkYXB0ZXI7XHJcbiAgICAvLyBCYXNlZCBvbjogaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy9nZW5lcmF0b3JzLyNib3RoXHJcbiAgICBmdW5jdGlvbiBhc3luY0FkYXB0ZXIoZ2VuZXJhdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3QgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRwLnJlc29sdmUocmVzdWx0LnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiAkcC5yZXNvbHZlKHJlc3VsdC52YWx1ZSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXMgPT4gaGFuZGxlKGcubmV4dChyZXMpKSwgZXJyID0+IGhhbmRsZShnLnRocm93KGVycikpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShnLm5leHQoKSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbn07XHJcbiJdLCJuYW1lcyI6WyJucG0iLCJzdGF0IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCIkcCIsImV4cCIsImZvcm1hdEVycm9yIiwiaXNQcm9taXNlIiwiaXNSZWFkYWJsZVN0cmVhbSIsIm1lc3NhZ2VHYXAiLCJleHRlbmQiLCJyZXNvbHZlIiwid3JhcCIsImZ1bmMiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJhc3luY0FkYXB0ZXIiLCJ2YWx1ZSIsInBhcmFtcyIsIm9uU3VjY2VzcyIsIm9uRXJyb3IiLCJzZWxmIiwiZGVsYXllZCIsImxvb3AiLCJhcHBseSIsImNhbGwiLCJlIiwidGhlbiIsImRhdGEiLCJjYXRjaCIsImVycm9yIiwiZ2VuZXJhdG9yIiwiZyIsImFyZ3VtZW50cyIsImhhbmRsZSIsInJlc3VsdCIsImRvbmUiLCJyZXMiLCJuZXh0IiwiZXJyIiwidGhyb3ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spex/lib/utils/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spex/lib/utils/static.js":
/*!***********************************************!*\
  !*** ./node_modules/spex/lib/utils/static.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst npm = {\n    stream: __webpack_require__(/*! stream */ \"stream\"),\n    util: __webpack_require__(/*! util */ \"util\")\n};\n/////////////////////////////////////\n// Checks if the value is a promise;\nfunction isPromise(value) {\n    return value && typeof value.then === \"function\";\n}\n////////////////////////////////////////////\n// Checks object for being a readable stream;\nfunction isReadableStream(obj) {\n    return obj instanceof npm.stream.Stream && typeof obj._read === \"function\" && typeof obj._readableState === \"object\";\n}\n////////////////////////////////////////////////////////////\n// Sets an object property as read-only and non-enumerable.\nfunction extend(obj, name, value) {\n    Object.defineProperty(obj, name, {\n        value: value,\n        configurable: false,\n        enumerable: false,\n        writable: false\n    });\n}\n///////////////////////////////////////////\n// Returns a space gap for console output;\nfunction messageGap(level) {\n    return \" \".repeat(level * 4);\n}\nfunction formatError(error, level) {\n    const names = [\n        \"BatchError\",\n        \"PageError\",\n        \"SequenceError\"\n    ];\n    let msg = npm.util.inspect(error);\n    if (error instanceof Error) {\n        if (names.indexOf(error.name) === -1) {\n            const gap = messageGap(level);\n            msg = msg.split(\"\\n\").map((line, index)=>{\n                return (index ? gap : \"\") + line;\n            }).join(\"\\n\");\n        } else {\n            msg = error.toString(level);\n        }\n    }\n    return msg;\n}\n////////////////////////////////////////////////////////\n// Adds prototype inspection, with support of the newer\n// Custom Inspection, which was added in Node.js 6.x\nfunction addInspection(type, cb) {\n    // istanbul ignore next;\n    if (npm.util.inspect.custom) {\n        // Custom inspection is supported:\n        type.prototype[npm.util.inspect.custom] = cb;\n    } else {\n        // Use classic inspection:\n        type.prototype.inspect = cb;\n    }\n}\nmodule.exports = {\n    addInspection: addInspection,\n    formatError: formatError,\n    isPromise: isPromise,\n    isReadableStream: isReadableStream,\n    messageGap: messageGap,\n    extend: extend\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3BleC9saWIvdXRpbHMvc3RhdGljLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxNQUFNO0lBQ1JDLFFBQVFDLG1CQUFPQSxDQUFDO0lBQ2hCQyxNQUFNRCxtQkFBT0EsQ0FBQztBQUNsQjtBQUVBLHFDQUFxQztBQUNyQyxvQ0FBb0M7QUFDcEMsU0FBU0UsVUFBVUMsS0FBSztJQUNwQixPQUFPQSxTQUFTLE9BQU9BLE1BQU1DLElBQUksS0FBSztBQUMxQztBQUVBLDRDQUE0QztBQUM1Qyw2Q0FBNkM7QUFDN0MsU0FBU0MsaUJBQWlCQyxHQUFHO0lBQ3pCLE9BQU9BLGVBQWVSLElBQUlDLE1BQU0sQ0FBQ1EsTUFBTSxJQUNuQyxPQUFPRCxJQUFJRSxLQUFLLEtBQUssY0FDckIsT0FBT0YsSUFBSUcsY0FBYyxLQUFLO0FBQ3RDO0FBRUEsNERBQTREO0FBQzVELDJEQUEyRDtBQUMzRCxTQUFTQyxPQUFPSixHQUFHLEVBQUVLLElBQUksRUFBRVIsS0FBSztJQUM1QlMsT0FBT0MsY0FBYyxDQUFDUCxLQUFLSyxNQUFNO1FBQzdCUixPQUFPQTtRQUNQVyxjQUFjO1FBQ2RDLFlBQVk7UUFDWkMsVUFBVTtJQUNkO0FBQ0o7QUFFQSwyQ0FBMkM7QUFDM0MsMENBQTBDO0FBQzFDLFNBQVNDLFdBQVdDLEtBQUs7SUFDckIsT0FBTyxJQUFJQyxNQUFNLENBQUNELFFBQVE7QUFDOUI7QUFFQSxTQUFTRSxZQUFZQyxLQUFLLEVBQUVILEtBQUs7SUFDN0IsTUFBTUksUUFBUTtRQUFDO1FBQWM7UUFBYTtLQUFnQjtJQUMxRCxJQUFJQyxNQUFNekIsSUFBSUcsSUFBSSxDQUFDdUIsT0FBTyxDQUFDSDtJQUMzQixJQUFJQSxpQkFBaUJJLE9BQU87UUFDeEIsSUFBSUgsTUFBTUksT0FBTyxDQUFDTCxNQUFNVixJQUFJLE1BQU0sQ0FBQyxHQUFHO1lBQ2xDLE1BQU1nQixNQUFNVixXQUFXQztZQUN2QkssTUFBTUEsSUFBSUssS0FBSyxDQUFDLE1BQU1DLEdBQUcsQ0FBQyxDQUFDQyxNQUFNQztnQkFDN0IsT0FBTyxDQUFDQSxRQUFRSixNQUFNLEVBQUMsSUFBS0c7WUFDaEMsR0FBR0UsSUFBSSxDQUFDO1FBQ1osT0FBTztZQUNIVCxNQUFNRixNQUFNWSxRQUFRLENBQUNmO1FBQ3pCO0lBQ0o7SUFDQSxPQUFPSztBQUNYO0FBRUEsd0RBQXdEO0FBQ3hELHVEQUF1RDtBQUN2RCxvREFBb0Q7QUFDcEQsU0FBU1csY0FBY0MsSUFBSSxFQUFFQyxFQUFFO0lBQzNCLHdCQUF3QjtJQUN4QixJQUFJdEMsSUFBSUcsSUFBSSxDQUFDdUIsT0FBTyxDQUFDYSxNQUFNLEVBQUU7UUFDekIsa0NBQWtDO1FBQ2xDRixLQUFLRyxTQUFTLENBQUN4QyxJQUFJRyxJQUFJLENBQUN1QixPQUFPLENBQUNhLE1BQU0sQ0FBQyxHQUFHRDtJQUM5QyxPQUFPO1FBQ0gsMEJBQTBCO1FBQzFCRCxLQUFLRyxTQUFTLENBQUNkLE9BQU8sR0FBR1k7SUFDN0I7QUFDSjtBQUVBRyxPQUFPQyxPQUFPLEdBQUc7SUFDYk4sZUFBZUE7SUFDZmQsYUFBYUE7SUFDYmxCLFdBQVdBO0lBQ1hHLGtCQUFrQkE7SUFDbEJZLFlBQVlBO0lBQ1pQLFFBQVFBO0FBQ1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odG1sLWNvbnZlcnRlci8uL25vZGVfbW9kdWxlcy9zcGV4L2xpYi91dGlscy9zdGF0aWMuanM/MmExNCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBucG0gPSB7XHJcbiAgICBzdHJlYW06IHJlcXVpcmUoJ3N0cmVhbScpLFxyXG4gICAgdXRpbDogcmVxdWlyZSgndXRpbCcpXHJcbn07XHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vIENoZWNrcyBpZiB0aGUgdmFsdWUgaXMgYSBwcm9taXNlO1xyXG5mdW5jdGlvbiBpc1Byb21pc2UodmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJztcclxufVxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy8gQ2hlY2tzIG9iamVjdCBmb3IgYmVpbmcgYSByZWFkYWJsZSBzdHJlYW07XHJcbmZ1bmN0aW9uIGlzUmVhZGFibGVTdHJlYW0ob2JqKSB7XHJcbiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgbnBtLnN0cmVhbS5TdHJlYW0gJiZcclxuICAgICAgICB0eXBlb2Ygb2JqLl9yZWFkID09PSAnZnVuY3Rpb24nICYmXHJcbiAgICAgICAgdHlwZW9mIG9iai5fcmVhZGFibGVTdGF0ZSA9PT0gJ29iamVjdCc7XHJcbn1cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vLyBTZXRzIGFuIG9iamVjdCBwcm9wZXJ0eSBhcyByZWFkLW9ubHkgYW5kIG5vbi1lbnVtZXJhYmxlLlxyXG5mdW5jdGlvbiBleHRlbmQob2JqLCBuYW1lLCB2YWx1ZSkge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbmFtZSwge1xyXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy8gUmV0dXJucyBhIHNwYWNlIGdhcCBmb3IgY29uc29sZSBvdXRwdXQ7XHJcbmZ1bmN0aW9uIG1lc3NhZ2VHYXAobGV2ZWwpIHtcclxuICAgIHJldHVybiAnICcucmVwZWF0KGxldmVsICogNCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZvcm1hdEVycm9yKGVycm9yLCBsZXZlbCkge1xyXG4gICAgY29uc3QgbmFtZXMgPSBbJ0JhdGNoRXJyb3InLCAnUGFnZUVycm9yJywgJ1NlcXVlbmNlRXJyb3InXTtcclxuICAgIGxldCBtc2cgPSBucG0udXRpbC5pbnNwZWN0KGVycm9yKTtcclxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgaWYgKG5hbWVzLmluZGV4T2YoZXJyb3IubmFtZSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGdhcCA9IG1lc3NhZ2VHYXAobGV2ZWwpO1xyXG4gICAgICAgICAgICBtc2cgPSBtc2cuc3BsaXQoJ1xcbicpLm1hcCgobGluZSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoaW5kZXggPyBnYXAgOiAnJykgKyBsaW5lO1xyXG4gICAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBtc2cgPSBlcnJvci50b1N0cmluZyhsZXZlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1zZztcclxufVxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy8gQWRkcyBwcm90b3R5cGUgaW5zcGVjdGlvbiwgd2l0aCBzdXBwb3J0IG9mIHRoZSBuZXdlclxyXG4vLyBDdXN0b20gSW5zcGVjdGlvbiwgd2hpY2ggd2FzIGFkZGVkIGluIE5vZGUuanMgNi54XHJcbmZ1bmN0aW9uIGFkZEluc3BlY3Rpb24odHlwZSwgY2IpIHtcclxuICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0O1xyXG4gICAgaWYgKG5wbS51dGlsLmluc3BlY3QuY3VzdG9tKSB7XHJcbiAgICAgICAgLy8gQ3VzdG9tIGluc3BlY3Rpb24gaXMgc3VwcG9ydGVkOlxyXG4gICAgICAgIHR5cGUucHJvdG90eXBlW25wbS51dGlsLmluc3BlY3QuY3VzdG9tXSA9IGNiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBVc2UgY2xhc3NpYyBpbnNwZWN0aW9uOlxyXG4gICAgICAgIHR5cGUucHJvdG90eXBlLmluc3BlY3QgPSBjYjtcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBhZGRJbnNwZWN0aW9uOiBhZGRJbnNwZWN0aW9uLFxyXG4gICAgZm9ybWF0RXJyb3I6IGZvcm1hdEVycm9yLFxyXG4gICAgaXNQcm9taXNlOiBpc1Byb21pc2UsXHJcbiAgICBpc1JlYWRhYmxlU3RyZWFtOiBpc1JlYWRhYmxlU3RyZWFtLFxyXG4gICAgbWVzc2FnZUdhcDogbWVzc2FnZUdhcCxcclxuICAgIGV4dGVuZDogZXh0ZW5kXHJcbn07XHJcbiJdLCJuYW1lcyI6WyJucG0iLCJzdHJlYW0iLCJyZXF1aXJlIiwidXRpbCIsImlzUHJvbWlzZSIsInZhbHVlIiwidGhlbiIsImlzUmVhZGFibGVTdHJlYW0iLCJvYmoiLCJTdHJlYW0iLCJfcmVhZCIsIl9yZWFkYWJsZVN0YXRlIiwiZXh0ZW5kIiwibmFtZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwibWVzc2FnZUdhcCIsImxldmVsIiwicmVwZWF0IiwiZm9ybWF0RXJyb3IiLCJlcnJvciIsIm5hbWVzIiwibXNnIiwiaW5zcGVjdCIsIkVycm9yIiwiaW5kZXhPZiIsImdhcCIsInNwbGl0IiwibWFwIiwibGluZSIsImluZGV4Iiwiam9pbiIsInRvU3RyaW5nIiwiYWRkSW5zcGVjdGlvbiIsInR5cGUiLCJjYiIsImN1c3RvbSIsInByb3RvdHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spex/lib/utils/static.js\n");

/***/ })

};
;