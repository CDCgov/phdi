"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pg-promise";
exports.ids = ["vendor-chunks/pg-promise"];
exports.modules = {

/***/ "(rsc)/./node_modules/pg-promise/lib/assert.js":
/*!***********************************************!*\
  !*** ./node_modules/pg-promise/lib/assert.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { assertOptions } = __webpack_require__(/*! assert-options */ \"(rsc)/./node_modules/assert-options/dist/src/index.js\");\n// this to allow override options-related errors globally (for pg-promise)\nglobal.pgPromiseAssert = assertOptions;\nmodule.exports = {\n    assert () {\n        return global.pgPromiseAssert.apply(null, [\n            ...arguments\n        ]);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvYXNzZXJ0LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLEVBQUNBLGFBQWEsRUFBQyxHQUFHQyxtQkFBT0EsQ0FBQztBQUVoQywwRUFBMEU7QUFDMUVDLE9BQU9DLGVBQWUsR0FBR0g7QUFFekJJLE9BQU9DLE9BQU8sR0FBRztJQUNiQztRQUNJLE9BQU9KLE9BQU9DLGVBQWUsQ0FBQ0ksS0FBSyxDQUFDLE1BQU07ZUFBSUM7U0FBVTtJQUM1RDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHRtbC1jb252ZXJ0ZXIvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvYXNzZXJ0LmpzP2EzZTQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge2Fzc2VydE9wdGlvbnN9ID0gcmVxdWlyZSgnYXNzZXJ0LW9wdGlvbnMnKTtcclxuXHJcbi8vIHRoaXMgdG8gYWxsb3cgb3ZlcnJpZGUgb3B0aW9ucy1yZWxhdGVkIGVycm9ycyBnbG9iYWxseSAoZm9yIHBnLXByb21pc2UpXHJcbmdsb2JhbC5wZ1Byb21pc2VBc3NlcnQgPSBhc3NlcnRPcHRpb25zO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBhc3NlcnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIGdsb2JhbC5wZ1Byb21pc2VBc3NlcnQuYXBwbHkobnVsbCwgWy4uLmFyZ3VtZW50c10pO1xyXG4gICAgfVxyXG59O1xyXG4iXSwibmFtZXMiOlsiYXNzZXJ0T3B0aW9ucyIsInJlcXVpcmUiLCJnbG9iYWwiLCJwZ1Byb21pc2VBc3NlcnQiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXNzZXJ0IiwiYXBwbHkiLCJhcmd1bWVudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/assert.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/connect.js":
/*!************************************************!*\
  !*** ./node_modules/pg-promise/lib/connect.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { Events } = __webpack_require__(/*! ./events */ \"(rsc)/./node_modules/pg-promise/lib/events.js\");\nconst { ColorConsole } = __webpack_require__(/*! ./utils/color */ \"(rsc)/./node_modules/pg-promise/lib/utils/color.js\");\nconst npm = {\n    utils: __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\"),\n    text: __webpack_require__(/*! ./text */ \"(rsc)/./node_modules/pg-promise/lib/text.js\"),\n    formatting: __webpack_require__(/*! ./formatting */ \"(rsc)/./node_modules/pg-promise/lib/formatting.js\")\n};\nfunction poolConnect(ctx, db, config) {\n    return config.promise((resolve, reject)=>{\n        const p = db.$pool;\n        if (p.ending) {\n            db.$destroy();\n            const err = new Error(npm.text.poolDestroyed);\n            Events.error(ctx.options, err, {\n                dc: ctx.dc\n            });\n            reject(err);\n            return;\n        }\n        p.connect((err, client)=>{\n            if (err) {\n                Events.error(ctx.options, err, {\n                    cn: npm.utils.getSafeConnection(ctx.cn),\n                    dc: ctx.dc\n                });\n                reject(err);\n            } else {\n                if (\"$useCount\" in client) {\n                    // Make sure useCount drops to 1, if it ever reaches maximum integer number;\n                    // We do not drop it to zero, to avoid rerun of initialization queries that\n                    // usually check for useCount === 0;\n                    // istanbul ignore if\n                    if (client.$useCount >= Number.MAX_SAFE_INTEGER) {\n                        client.$useCount = 1; // resetting; cannot auto-test this\n                    } else {\n                        client.$useCount = ++client.$useCount;\n                    }\n                } else {\n                    Object.defineProperty(client, \"$useCount\", {\n                        value: 0,\n                        configurable: false,\n                        enumerable: false,\n                        writable: true\n                    });\n                    setSchema(client, ctx);\n                }\n                setCtx(client, ctx);\n                const end = lockClientEnd(client);\n                client.on(\"error\", onError);\n                resolve({\n                    client,\n                    useCount: client.$useCount,\n                    release (kill) {\n                        client.end = end;\n                        client.release(kill || client.$connectionError);\n                        Events.disconnect(ctx, client);\n                        client.removeListener(\"error\", onError);\n                    }\n                });\n                Events.connect(ctx, client, client.$useCount);\n            }\n        });\n    });\n}\nfunction directConnect(ctx, config) {\n    return config.promise((resolve, reject)=>{\n        const client = new config.pgp.pg.Client(ctx.cn);\n        client.connect((err)=>{\n            if (err) {\n                Events.error(ctx.options, err, {\n                    cn: npm.utils.getSafeConnection(ctx.cn),\n                    dc: ctx.dc\n                });\n                reject(err);\n            } else {\n                setSchema(client, ctx);\n                setCtx(client, ctx);\n                const end = lockClientEnd(client);\n                client.on(\"error\", onError);\n                resolve({\n                    client,\n                    useCount: 0,\n                    release () {\n                        client.end = end;\n                        const p = config.promise((res, rej)=>client.end().then(res).catch(rej));\n                        Events.disconnect(ctx, client);\n                        client.removeListener(\"error\", onError);\n                        return p;\n                    }\n                });\n                Events.connect(ctx, client, 0);\n            }\n        });\n    });\n}\n// this event only happens when the connection is lost physically,\n// which cannot be tested automatically; removing from coverage:\n// istanbul ignore next\nfunction onError(err) {\n    const ctx = this.$ctx;\n    const cn = npm.utils.getSafeConnection(ctx.cn);\n    Events.error(ctx.options, err, {\n        cn,\n        dc: ctx.dc\n    });\n    if (ctx.cnOptions && typeof ctx.cnOptions.onLost === \"function\" && !ctx.notified) {\n        try {\n            ctx.cnOptions.onLost.call(this, err, {\n                cn,\n                dc: ctx.dc,\n                start: ctx.start,\n                client: this\n            });\n        } catch (e) {\n            ColorConsole.error(e && e.stack || e);\n        }\n        ctx.notified = true;\n    }\n}\nfunction lockClientEnd(client) {\n    const end = client.end;\n    client.end = (doNotCall)=>{\n        // This call can happen only in the following two cases:\n        // 1. the client made the call directly, against the library's documentation (invalid code)\n        // 2. connection with the server broke, and the pool is terminating all clients forcefully.\n        ColorConsole.error(`${npm.text.clientEnd}\\n${npm.utils.getLocalStack(1, 3)}\\n`);\n        if (!doNotCall) {\n            end.call(client);\n        }\n    };\n    return end;\n}\nfunction setCtx(client, ctx) {\n    Object.defineProperty(client, \"$ctx\", {\n        value: ctx,\n        writable: true\n    });\n}\nfunction setSchema(client, ctx) {\n    let s = ctx.options.schema;\n    if (!s) {\n        return;\n    }\n    if (typeof s === \"function\") {\n        s = s.call(ctx.dc, ctx.dc);\n    }\n    if (Array.isArray(s)) {\n        s = s.filter((a)=>a && typeof a === \"string\");\n    }\n    if (typeof s === \"string\" || Array.isArray(s) && s.length) {\n        client.query(npm.formatting.as.format(\"SET search_path TO $1:name\", [\n            s\n        ]), (err)=>{\n            // istanbul ignore if;\n            if (err) {\n                // This is unlikely to ever happen, unless the connection is created faulty,\n                // and fails on the very first query, which is impossible to test automatically.\n                throw err;\n            }\n        });\n    }\n}\nmodule.exports = (config)=>({\n        pool: (ctx, db)=>poolConnect(ctx, db, config),\n        direct: (ctx)=>directConnect(ctx, config)\n    });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/connect.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/context.js":
/*!************************************************!*\
  !*** ./node_modules/pg-promise/lib/context.js ***!
  \************************************************/
/***/ ((module) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ /**\r\n * @class ConnectionContext\r\n * @private\r\n * @summary Internal connection context.\r\n *\r\n * @param {object} cc\r\n * Connection Context.\r\n *\r\n * @param {object} cc.cn\r\n * Connection details\r\n *\r\n * @param {*} cc.dc\r\n * Database Context\r\n *\r\n * @param {object} cc.options\r\n * Library's Initialization Options\r\n *\r\n * @param {object} cc.db\r\n * Database Session we're attached to, if any.\r\n *\r\n * @param {number} cc.level\r\n * Task Level\r\n *\r\n * @param {number} cc.txLevel\r\n * Transaction Level\r\n *\r\n * @param {object} cc.parentCtx\r\n * Connection Context of the parent operation, if any.\r\n *\r\n */ \nclass ConnectionContext {\n    constructor(cc){\n        this.cn = cc.cn; // connection details;\n        this.dc = cc.dc; // database context;\n        this.options = cc.options; // library options;\n        this.db = cc.db; // database session;\n        this.level = cc.level; // task level;\n        this.txLevel = cc.txLevel; // transaction level;\n        this.parentCtx = null; // parent context\n        this.taskCtx = null; // task context\n        this.start = null; // Date/Time when connected\n        this.txCount = 0;\n    }\n    connect(db) {\n        this.db = db;\n        this.start = new Date();\n    }\n    disconnect(kill) {\n        if (this.db) {\n            const p = this.db.release(kill);\n            this.db = null;\n            return p;\n        }\n    }\n    clone() {\n        const obj = new ConnectionContext(this);\n        obj.parent = this;\n        obj.parentCtx = this.taskCtx;\n        return obj;\n    }\n    get nextTxCount() {\n        let txCurrent = this, txTop = this;\n        while(txCurrent.parent){\n            txCurrent = txCurrent.parent;\n            if (txCurrent.taskCtx && txCurrent.taskCtx.isTX) {\n                txTop = txCurrent;\n            }\n        }\n        return txTop.txCount++;\n    }\n}\n/**\r\n * Connection Context\r\n * @module context\r\n * @author Vitaly Tomilov\r\n * @private\r\n */ module.exports = {\n    ConnectionContext\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvY29udGV4dC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztDQU9DLEdBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBNkJDO0FBQ0QsTUFBTUE7SUFFRkMsWUFBWUMsRUFBRSxDQUFFO1FBQ1osSUFBSSxDQUFDQyxFQUFFLEdBQUdELEdBQUdDLEVBQUUsRUFBRSxzQkFBc0I7UUFDdkMsSUFBSSxDQUFDQyxFQUFFLEdBQUdGLEdBQUdFLEVBQUUsRUFBRSxvQkFBb0I7UUFDckMsSUFBSSxDQUFDQyxPQUFPLEdBQUdILEdBQUdHLE9BQU8sRUFBRSxtQkFBbUI7UUFDOUMsSUFBSSxDQUFDQyxFQUFFLEdBQUdKLEdBQUdJLEVBQUUsRUFBRSxvQkFBb0I7UUFDckMsSUFBSSxDQUFDQyxLQUFLLEdBQUdMLEdBQUdLLEtBQUssRUFBRSxjQUFjO1FBQ3JDLElBQUksQ0FBQ0MsT0FBTyxHQUFHTixHQUFHTSxPQUFPLEVBQUUscUJBQXFCO1FBQ2hELElBQUksQ0FBQ0MsU0FBUyxHQUFHLE1BQU0saUJBQWlCO1FBQ3hDLElBQUksQ0FBQ0MsT0FBTyxHQUFHLE1BQU0sZUFBZTtRQUNwQyxJQUFJLENBQUNDLEtBQUssR0FBRyxNQUFNLDJCQUEyQjtRQUM5QyxJQUFJLENBQUNDLE9BQU8sR0FBRztJQUNuQjtJQUVBQyxRQUFRUCxFQUFFLEVBQUU7UUFDUixJQUFJLENBQUNBLEVBQUUsR0FBR0E7UUFDVixJQUFJLENBQUNLLEtBQUssR0FBRyxJQUFJRztJQUNyQjtJQUVBQyxXQUFXQyxJQUFJLEVBQUU7UUFDYixJQUFJLElBQUksQ0FBQ1YsRUFBRSxFQUFFO1lBQ1QsTUFBTVcsSUFBSSxJQUFJLENBQUNYLEVBQUUsQ0FBQ1ksT0FBTyxDQUFDRjtZQUMxQixJQUFJLENBQUNWLEVBQUUsR0FBRztZQUNWLE9BQU9XO1FBQ1g7SUFDSjtJQUVBRSxRQUFRO1FBQ0osTUFBTUMsTUFBTSxJQUFJcEIsa0JBQWtCLElBQUk7UUFDdENvQixJQUFJQyxNQUFNLEdBQUcsSUFBSTtRQUNqQkQsSUFBSVgsU0FBUyxHQUFHLElBQUksQ0FBQ0MsT0FBTztRQUM1QixPQUFPVTtJQUNYO0lBRUEsSUFBSUUsY0FBYztRQUNkLElBQUlDLFlBQVksSUFBSSxFQUFFQyxRQUFRLElBQUk7UUFDbEMsTUFBT0QsVUFBVUYsTUFBTSxDQUFFO1lBQ3JCRSxZQUFZQSxVQUFVRixNQUFNO1lBQzVCLElBQUlFLFVBQVViLE9BQU8sSUFBSWEsVUFBVWIsT0FBTyxDQUFDZSxJQUFJLEVBQUU7Z0JBQzdDRCxRQUFRRDtZQUNaO1FBQ0o7UUFDQSxPQUFPQyxNQUFNWixPQUFPO0lBQ3hCO0FBQ0o7QUFFQTs7Ozs7Q0FLQyxHQUNEYyxPQUFPQyxPQUFPLEdBQUc7SUFBQzNCO0FBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHRtbC1jb252ZXJ0ZXIvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvY29udGV4dC5qcz8xYzFkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBWaXRhbHkgVG9taWxvdlxyXG4gKlxyXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBhdCB0aGUgdG9wLWxldmVsIGRpcmVjdG9yeSBvZiB0aGlzIGRpc3RyaWJ1dGlvblxyXG4gKiBmb3IgbGljZW5zaW5nIGluZm9ybWF0aW9uLlxyXG4gKlxyXG4gKiBSZW1vdmFsIG9yIG1vZGlmaWNhdGlvbiBvZiB0aGlzIGNvcHlyaWdodCBub3RpY2UgaXMgcHJvaGliaXRlZC5cclxuICovXHJcblxyXG4vKipcclxuICogQGNsYXNzIENvbm5lY3Rpb25Db250ZXh0XHJcbiAqIEBwcml2YXRlXHJcbiAqIEBzdW1tYXJ5IEludGVybmFsIGNvbm5lY3Rpb24gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtvYmplY3R9IGNjXHJcbiAqIENvbm5lY3Rpb24gQ29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtvYmplY3R9IGNjLmNuXHJcbiAqIENvbm5lY3Rpb24gZGV0YWlsc1xyXG4gKlxyXG4gKiBAcGFyYW0geyp9IGNjLmRjXHJcbiAqIERhdGFiYXNlIENvbnRleHRcclxuICpcclxuICogQHBhcmFtIHtvYmplY3R9IGNjLm9wdGlvbnNcclxuICogTGlicmFyeSdzIEluaXRpYWxpemF0aW9uIE9wdGlvbnNcclxuICpcclxuICogQHBhcmFtIHtvYmplY3R9IGNjLmRiXHJcbiAqIERhdGFiYXNlIFNlc3Npb24gd2UncmUgYXR0YWNoZWQgdG8sIGlmIGFueS5cclxuICpcclxuICogQHBhcmFtIHtudW1iZXJ9IGNjLmxldmVsXHJcbiAqIFRhc2sgTGV2ZWxcclxuICpcclxuICogQHBhcmFtIHtudW1iZXJ9IGNjLnR4TGV2ZWxcclxuICogVHJhbnNhY3Rpb24gTGV2ZWxcclxuICpcclxuICogQHBhcmFtIHtvYmplY3R9IGNjLnBhcmVudEN0eFxyXG4gKiBDb25uZWN0aW9uIENvbnRleHQgb2YgdGhlIHBhcmVudCBvcGVyYXRpb24sIGlmIGFueS5cclxuICpcclxuICovXHJcbmNsYXNzIENvbm5lY3Rpb25Db250ZXh0IHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjYykge1xyXG4gICAgICAgIHRoaXMuY24gPSBjYy5jbjsgLy8gY29ubmVjdGlvbiBkZXRhaWxzO1xyXG4gICAgICAgIHRoaXMuZGMgPSBjYy5kYzsgLy8gZGF0YWJhc2UgY29udGV4dDtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBjYy5vcHRpb25zOyAvLyBsaWJyYXJ5IG9wdGlvbnM7XHJcbiAgICAgICAgdGhpcy5kYiA9IGNjLmRiOyAvLyBkYXRhYmFzZSBzZXNzaW9uO1xyXG4gICAgICAgIHRoaXMubGV2ZWwgPSBjYy5sZXZlbDsgLy8gdGFzayBsZXZlbDtcclxuICAgICAgICB0aGlzLnR4TGV2ZWwgPSBjYy50eExldmVsOyAvLyB0cmFuc2FjdGlvbiBsZXZlbDtcclxuICAgICAgICB0aGlzLnBhcmVudEN0eCA9IG51bGw7IC8vIHBhcmVudCBjb250ZXh0XHJcbiAgICAgICAgdGhpcy50YXNrQ3R4ID0gbnVsbDsgLy8gdGFzayBjb250ZXh0XHJcbiAgICAgICAgdGhpcy5zdGFydCA9IG51bGw7IC8vIERhdGUvVGltZSB3aGVuIGNvbm5lY3RlZFxyXG4gICAgICAgIHRoaXMudHhDb3VudCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgY29ubmVjdChkYikge1xyXG4gICAgICAgIHRoaXMuZGIgPSBkYjtcclxuICAgICAgICB0aGlzLnN0YXJ0ID0gbmV3IERhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBkaXNjb25uZWN0KGtpbGwpIHtcclxuICAgICAgICBpZiAodGhpcy5kYikge1xyXG4gICAgICAgICAgICBjb25zdCBwID0gdGhpcy5kYi5yZWxlYXNlKGtpbGwpO1xyXG4gICAgICAgICAgICB0aGlzLmRiID0gbnVsbDtcclxuICAgICAgICAgICAgcmV0dXJuIHA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCkge1xyXG4gICAgICAgIGNvbnN0IG9iaiA9IG5ldyBDb25uZWN0aW9uQ29udGV4dCh0aGlzKTtcclxuICAgICAgICBvYmoucGFyZW50ID0gdGhpcztcclxuICAgICAgICBvYmoucGFyZW50Q3R4ID0gdGhpcy50YXNrQ3R4O1xyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG5leHRUeENvdW50KCkge1xyXG4gICAgICAgIGxldCB0eEN1cnJlbnQgPSB0aGlzLCB0eFRvcCA9IHRoaXM7XHJcbiAgICAgICAgd2hpbGUgKHR4Q3VycmVudC5wYXJlbnQpIHtcclxuICAgICAgICAgICAgdHhDdXJyZW50ID0gdHhDdXJyZW50LnBhcmVudDtcclxuICAgICAgICAgICAgaWYgKHR4Q3VycmVudC50YXNrQ3R4ICYmIHR4Q3VycmVudC50YXNrQ3R4LmlzVFgpIHtcclxuICAgICAgICAgICAgICAgIHR4VG9wID0gdHhDdXJyZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0eFRvcC50eENvdW50Kys7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb25uZWN0aW9uIENvbnRleHRcclxuICogQG1vZHVsZSBjb250ZXh0XHJcbiAqIEBhdXRob3IgVml0YWx5IFRvbWlsb3ZcclxuICogQHByaXZhdGVcclxuICovXHJcbm1vZHVsZS5leHBvcnRzID0ge0Nvbm5lY3Rpb25Db250ZXh0fTtcclxuIl0sIm5hbWVzIjpbIkNvbm5lY3Rpb25Db250ZXh0IiwiY29uc3RydWN0b3IiLCJjYyIsImNuIiwiZGMiLCJvcHRpb25zIiwiZGIiLCJsZXZlbCIsInR4TGV2ZWwiLCJwYXJlbnRDdHgiLCJ0YXNrQ3R4Iiwic3RhcnQiLCJ0eENvdW50IiwiY29ubmVjdCIsIkRhdGUiLCJkaXNjb25uZWN0Iiwia2lsbCIsInAiLCJyZWxlYXNlIiwiY2xvbmUiLCJvYmoiLCJwYXJlbnQiLCJuZXh0VHhDb3VudCIsInR4Q3VycmVudCIsInR4VG9wIiwiaXNUWCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/database-pool.js":
/*!******************************************************!*\
  !*** ./node_modules/pg-promise/lib/database-pool.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { ColorConsole } = __webpack_require__(/*! ./utils/color */ \"(rsc)/./node_modules/pg-promise/lib/utils/color.js\");\nconst npm = {\n    utils: __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\")\n};\n/**\r\n * @class DatabasePool\r\n * @static\r\n * @private\r\n */ class DatabasePool {\n    /**\r\n     * Global instance of the database pool repository.\r\n     *\r\n     * @returns {{dbMap: {}, dbs: Array}}\r\n     */ static get instance() {\n        const s = Symbol.for(\"pgPromiseDatabasePool\");\n        let scope = global[s];\n        if (!scope) {\n            scope = {\n                dbMap: {},\n                dbs: [] // all database objects\n            };\n            global[s] = scope;\n        }\n        return scope;\n    }\n    /**\r\n     * @method DatabasePool.register\r\n     * @static\r\n     * @description\r\n     *  - Registers each database object, to make sure no duplicates connections are used,\r\n     *    and if they are, produce a warning;\r\n     *  - Registers each Pool object, to be able to release them all when requested.\r\n     *\r\n     * @param {Database} db - The new Database object being registered.\r\n     */ static register(db) {\n        const cnKey = DatabasePool.createContextKey(db);\n        npm.utils.addReadProp(db, \"$cnKey\", cnKey, true);\n        const { dbMap, dbs } = DatabasePool.instance;\n        if (cnKey in dbMap) {\n            dbMap[cnKey]++;\n            /* istanbul ignore if */ if (!db.$config.options.noWarnings) {\n                ColorConsole.warn(`WARNING: Creating a duplicate database object for the same connection.\\n${npm.utils.getLocalStack(4, 3)}\\n`);\n            }\n        } else {\n            dbMap[cnKey] = 1;\n        }\n        dbs.push(db);\n    }\n    /**\r\n     * @method DatabasePool.unregister\r\n     * @static\r\n     * @param db\r\n     */ static unregister(db) {\n        const cnKey = db.$cnKey;\n        const { dbMap } = DatabasePool.instance;\n        if (!--dbMap[cnKey]) {\n            delete dbMap[cnKey];\n        }\n    }\n    /**\r\n     * @method DatabasePool.shutDown\r\n     * @static\r\n     */ static shutDown() {\n        const { instance } = DatabasePool;\n        instance.dbs.forEach((db)=>{\n            db.$destroy();\n        });\n        instance.dbs.length = 0;\n        instance.dbMap = {};\n    }\n    /**\r\n     * @method DatabasePool.createContextKey\r\n     * @static\r\n     * @description\r\n     * For connections that are objects it reorders the keys alphabetically,\r\n     * and then serializes the result into a JSON string.\r\n     *\r\n     * @param {Database} db - Database instance.\r\n     */ static createContextKey(db) {\n        let cn = db.$cn;\n        if (typeof cn === \"object\") {\n            const obj = {}, keys = Object.keys(cn).sort();\n            keys.forEach((name)=>{\n                obj[name] = cn[name];\n            });\n            cn = obj;\n        }\n        return npm.utils.toJson(npm.utils.getSafeConnection(cn)) + npm.utils.toJson(db.$dc);\n    }\n}\nmodule.exports = {\n    DatabasePool\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvZGF0YWJhc2UtcG9vbC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztDQU9DO0FBRUQsTUFBTSxFQUFDQSxZQUFZLEVBQUMsR0FBR0MsbUJBQU9BLENBQUM7QUFFL0IsTUFBTUMsTUFBTTtJQUNSQyxPQUFPRixtQkFBT0EsQ0FBQztBQUNuQjtBQUVBOzs7O0NBSUMsR0FDRCxNQUFNRztJQUVGOzs7O0tBSUMsR0FDRCxXQUFXQyxXQUFXO1FBQ2xCLE1BQU1DLElBQUlDLE9BQU9DLEdBQUcsQ0FBQztRQUNyQixJQUFJQyxRQUFRQyxNQUFNLENBQUNKLEVBQUU7UUFDckIsSUFBSSxDQUFDRyxPQUFPO1lBQ1JBLFFBQVE7Z0JBQ0pFLE9BQU8sQ0FBQztnQkFDUkMsS0FBSyxFQUFFLENBQUMsdUJBQXVCO1lBQ25DO1lBQ0FGLE1BQU0sQ0FBQ0osRUFBRSxHQUFHRztRQUNoQjtRQUNBLE9BQU9BO0lBQ1g7SUFFQTs7Ozs7Ozs7O0tBU0MsR0FDRCxPQUFPSSxTQUFTQyxFQUFFLEVBQUU7UUFDaEIsTUFBTUMsUUFBUVgsYUFBYVksZ0JBQWdCLENBQUNGO1FBQzVDWixJQUFJQyxLQUFLLENBQUNjLFdBQVcsQ0FBQ0gsSUFBSSxVQUFVQyxPQUFPO1FBQzNDLE1BQU0sRUFBQ0osS0FBSyxFQUFFQyxHQUFHLEVBQUMsR0FBR1IsYUFBYUMsUUFBUTtRQUMxQyxJQUFJVSxTQUFTSixPQUFPO1lBQ2hCQSxLQUFLLENBQUNJLE1BQU07WUFDWixzQkFBc0IsR0FDdEIsSUFBSSxDQUFDRCxHQUFHSSxPQUFPLENBQUNDLE9BQU8sQ0FBQ0MsVUFBVSxFQUFFO2dCQUNoQ3BCLGFBQWFxQixJQUFJLENBQUMsQ0FBQyx3RUFBd0UsRUFBRW5CLElBQUlDLEtBQUssQ0FBQ21CLGFBQWEsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1lBQ2xJO1FBQ0osT0FBTztZQUNIWCxLQUFLLENBQUNJLE1BQU0sR0FBRztRQUNuQjtRQUNBSCxJQUFJVyxJQUFJLENBQUNUO0lBQ2I7SUFFQTs7OztLQUlDLEdBQ0QsT0FBT1UsV0FBV1YsRUFBRSxFQUFFO1FBQ2xCLE1BQU1DLFFBQVFELEdBQUdXLE1BQU07UUFDdkIsTUFBTSxFQUFDZCxLQUFLLEVBQUMsR0FBR1AsYUFBYUMsUUFBUTtRQUNyQyxJQUFJLENBQUMsRUFBRU0sS0FBSyxDQUFDSSxNQUFNLEVBQUU7WUFDakIsT0FBT0osS0FBSyxDQUFDSSxNQUFNO1FBQ3ZCO0lBQ0o7SUFFQTs7O0tBR0MsR0FDRCxPQUFPVyxXQUFXO1FBQ2QsTUFBTSxFQUFDckIsUUFBUSxFQUFDLEdBQUdEO1FBQ25CQyxTQUFTTyxHQUFHLENBQUNlLE9BQU8sQ0FBQ2IsQ0FBQUE7WUFDakJBLEdBQUdjLFFBQVE7UUFDZjtRQUNBdkIsU0FBU08sR0FBRyxDQUFDaUIsTUFBTSxHQUFHO1FBQ3RCeEIsU0FBU00sS0FBSyxHQUFHLENBQUM7SUFDdEI7SUFFQTs7Ozs7Ozs7S0FRQyxHQUNELE9BQU9LLGlCQUFpQkYsRUFBRSxFQUFFO1FBQ3hCLElBQUlnQixLQUFLaEIsR0FBR2lCLEdBQUc7UUFDZixJQUFJLE9BQU9ELE9BQU8sVUFBVTtZQUN4QixNQUFNRSxNQUFNLENBQUMsR0FBR0MsT0FBT0MsT0FBT0QsSUFBSSxDQUFDSCxJQUFJSyxJQUFJO1lBQzNDRixLQUFLTixPQUFPLENBQUNTLENBQUFBO2dCQUNUSixHQUFHLENBQUNJLEtBQUssR0FBR04sRUFBRSxDQUFDTSxLQUFLO1lBQ3hCO1lBQ0FOLEtBQUtFO1FBQ1Q7UUFDQSxPQUFPOUIsSUFBSUMsS0FBSyxDQUFDa0MsTUFBTSxDQUFDbkMsSUFBSUMsS0FBSyxDQUFDbUMsaUJBQWlCLENBQUNSLE9BQU81QixJQUFJQyxLQUFLLENBQUNrQyxNQUFNLENBQUN2QixHQUFHeUIsR0FBRztJQUN0RjtBQUNKO0FBRUFDLE9BQU9DLE9BQU8sR0FBRztJQUFDckM7QUFBWSIsInNvdXJjZXMiOlsid2VicGFjazovL2h0bWwtY29udmVydGVyLy4vbm9kZV9tb2R1bGVzL3BnLXByb21pc2UvbGliL2RhdGFiYXNlLXBvb2wuanM/ZjI5YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgVml0YWx5IFRvbWlsb3ZcclxuICpcclxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHRvcC1sZXZlbCBkaXJlY3Rvcnkgb2YgdGhpcyBkaXN0cmlidXRpb25cclxuICogZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbi5cclxuICpcclxuICogUmVtb3ZhbCBvciBtb2RpZmljYXRpb24gb2YgdGhpcyBjb3B5cmlnaHQgbm90aWNlIGlzIHByb2hpYml0ZWQuXHJcbiAqL1xyXG5cclxuY29uc3Qge0NvbG9yQ29uc29sZX0gPSByZXF1aXJlKCcuL3V0aWxzL2NvbG9yJyk7XHJcblxyXG5jb25zdCBucG0gPSB7XHJcbiAgICB1dGlsczogcmVxdWlyZSgnLi91dGlscycpXHJcbn07XHJcblxyXG4vKipcclxuICogQGNsYXNzIERhdGFiYXNlUG9vbFxyXG4gKiBAc3RhdGljXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jbGFzcyBEYXRhYmFzZVBvb2wge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2xvYmFsIGluc3RhbmNlIG9mIHRoZSBkYXRhYmFzZSBwb29sIHJlcG9zaXRvcnkuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3tkYk1hcDoge30sIGRiczogQXJyYXl9fVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0IGluc3RhbmNlKCkge1xyXG4gICAgICAgIGNvbnN0IHMgPSBTeW1ib2wuZm9yKCdwZ1Byb21pc2VEYXRhYmFzZVBvb2wnKTtcclxuICAgICAgICBsZXQgc2NvcGUgPSBnbG9iYWxbc107XHJcbiAgICAgICAgaWYgKCFzY29wZSkge1xyXG4gICAgICAgICAgICBzY29wZSA9IHtcclxuICAgICAgICAgICAgICAgIGRiTWFwOiB7fSwgLy8gbWFwIG9mIHVzZWQgZGF0YWJhc2UgY29udGV4dCBrZXlzIChjb25uZWN0aW9uICsgZGMpXHJcbiAgICAgICAgICAgICAgICBkYnM6IFtdIC8vIGFsbCBkYXRhYmFzZSBvYmplY3RzXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGdsb2JhbFtzXSA9IHNjb3BlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2NvcGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbWV0aG9kIERhdGFiYXNlUG9vbC5yZWdpc3RlclxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiAgLSBSZWdpc3RlcnMgZWFjaCBkYXRhYmFzZSBvYmplY3QsIHRvIG1ha2Ugc3VyZSBubyBkdXBsaWNhdGVzIGNvbm5lY3Rpb25zIGFyZSB1c2VkLFxyXG4gICAgICogICAgYW5kIGlmIHRoZXkgYXJlLCBwcm9kdWNlIGEgd2FybmluZztcclxuICAgICAqICAtIFJlZ2lzdGVycyBlYWNoIFBvb2wgb2JqZWN0LCB0byBiZSBhYmxlIHRvIHJlbGVhc2UgdGhlbSBhbGwgd2hlbiByZXF1ZXN0ZWQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtEYXRhYmFzZX0gZGIgLSBUaGUgbmV3IERhdGFiYXNlIG9iamVjdCBiZWluZyByZWdpc3RlcmVkLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgcmVnaXN0ZXIoZGIpIHtcclxuICAgICAgICBjb25zdCBjbktleSA9IERhdGFiYXNlUG9vbC5jcmVhdGVDb250ZXh0S2V5KGRiKTtcclxuICAgICAgICBucG0udXRpbHMuYWRkUmVhZFByb3AoZGIsICckY25LZXknLCBjbktleSwgdHJ1ZSk7XHJcbiAgICAgICAgY29uc3Qge2RiTWFwLCBkYnN9ID0gRGF0YWJhc2VQb29sLmluc3RhbmNlO1xyXG4gICAgICAgIGlmIChjbktleSBpbiBkYk1hcCkge1xyXG4gICAgICAgICAgICBkYk1hcFtjbktleV0rKztcclxuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgICAgIGlmICghZGIuJGNvbmZpZy5vcHRpb25zLm5vV2FybmluZ3MpIHtcclxuICAgICAgICAgICAgICAgIENvbG9yQ29uc29sZS53YXJuKGBXQVJOSU5HOiBDcmVhdGluZyBhIGR1cGxpY2F0ZSBkYXRhYmFzZSBvYmplY3QgZm9yIHRoZSBzYW1lIGNvbm5lY3Rpb24uXFxuJHtucG0udXRpbHMuZ2V0TG9jYWxTdGFjayg0LCAzKX1cXG5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRiTWFwW2NuS2V5XSA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRicy5wdXNoKGRiKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBtZXRob2QgRGF0YWJhc2VQb29sLnVucmVnaXN0ZXJcclxuICAgICAqIEBzdGF0aWNcclxuICAgICAqIEBwYXJhbSBkYlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdW5yZWdpc3RlcihkYikge1xyXG4gICAgICAgIGNvbnN0IGNuS2V5ID0gZGIuJGNuS2V5O1xyXG4gICAgICAgIGNvbnN0IHtkYk1hcH0gPSBEYXRhYmFzZVBvb2wuaW5zdGFuY2U7XHJcbiAgICAgICAgaWYgKCEtLWRiTWFwW2NuS2V5XSkge1xyXG4gICAgICAgICAgICBkZWxldGUgZGJNYXBbY25LZXldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBtZXRob2QgRGF0YWJhc2VQb29sLnNodXREb3duXHJcbiAgICAgKiBAc3RhdGljXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBzaHV0RG93bigpIHtcclxuICAgICAgICBjb25zdCB7aW5zdGFuY2V9ID0gRGF0YWJhc2VQb29sO1xyXG4gICAgICAgIGluc3RhbmNlLmRicy5mb3JFYWNoKGRiID0+IHtcclxuICAgICAgICAgICAgZGIuJGRlc3Ryb3koKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpbnN0YW5jZS5kYnMubGVuZ3RoID0gMDtcclxuICAgICAgICBpbnN0YW5jZS5kYk1hcCA9IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG1ldGhvZCBEYXRhYmFzZVBvb2wuY3JlYXRlQ29udGV4dEtleVxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBGb3IgY29ubmVjdGlvbnMgdGhhdCBhcmUgb2JqZWN0cyBpdCByZW9yZGVycyB0aGUga2V5cyBhbHBoYWJldGljYWxseSxcclxuICAgICAqIGFuZCB0aGVuIHNlcmlhbGl6ZXMgdGhlIHJlc3VsdCBpbnRvIGEgSlNPTiBzdHJpbmcuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtEYXRhYmFzZX0gZGIgLSBEYXRhYmFzZSBpbnN0YW5jZS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZUNvbnRleHRLZXkoZGIpIHtcclxuICAgICAgICBsZXQgY24gPSBkYi4kY247XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjbiA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgY29uc3Qgb2JqID0ge30sIGtleXMgPSBPYmplY3Qua2V5cyhjbikuc29ydCgpO1xyXG4gICAgICAgICAgICBrZXlzLmZvckVhY2gobmFtZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBvYmpbbmFtZV0gPSBjbltuYW1lXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNuID0gb2JqO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnBtLnV0aWxzLnRvSnNvbihucG0udXRpbHMuZ2V0U2FmZUNvbm5lY3Rpb24oY24pKSArIG5wbS51dGlscy50b0pzb24oZGIuJGRjKTtcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7RGF0YWJhc2VQb29sfTtcclxuIl0sIm5hbWVzIjpbIkNvbG9yQ29uc29sZSIsInJlcXVpcmUiLCJucG0iLCJ1dGlscyIsIkRhdGFiYXNlUG9vbCIsImluc3RhbmNlIiwicyIsIlN5bWJvbCIsImZvciIsInNjb3BlIiwiZ2xvYmFsIiwiZGJNYXAiLCJkYnMiLCJyZWdpc3RlciIsImRiIiwiY25LZXkiLCJjcmVhdGVDb250ZXh0S2V5IiwiYWRkUmVhZFByb3AiLCIkY29uZmlnIiwib3B0aW9ucyIsIm5vV2FybmluZ3MiLCJ3YXJuIiwiZ2V0TG9jYWxTdGFjayIsInB1c2giLCJ1bnJlZ2lzdGVyIiwiJGNuS2V5Iiwic2h1dERvd24iLCJmb3JFYWNoIiwiJGRlc3Ryb3kiLCJsZW5ndGgiLCJjbiIsIiRjbiIsIm9iaiIsImtleXMiLCJPYmplY3QiLCJzb3J0IiwibmFtZSIsInRvSnNvbiIsImdldFNhZmVDb25uZWN0aW9uIiwiJGRjIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/database-pool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/database.js":
/*!*************************************************!*\
  !*** ./node_modules/pg-promise/lib/database.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { Events } = __webpack_require__(/*! ./events */ \"(rsc)/./node_modules/pg-promise/lib/events.js\");\nconst { assert } = __webpack_require__(/*! ./assert */ \"(rsc)/./node_modules/pg-promise/lib/assert.js\");\nconst { resultQuery, multiResultQuery, streamQuery } = __webpack_require__(/*! ./special-query */ \"(rsc)/./node_modules/pg-promise/lib/special-query.js\");\nconst { ConnectionContext } = __webpack_require__(/*! ./context */ \"(rsc)/./node_modules/pg-promise/lib/context.js\");\nconst { DatabasePool } = __webpack_require__(/*! ./database-pool */ \"(rsc)/./node_modules/pg-promise/lib/database-pool.js\");\nconst { queryResult } = __webpack_require__(/*! ./query-result */ \"(rsc)/./node_modules/pg-promise/lib/query-result.js\");\nconst npm = {\n    utils: __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\"),\n    pubUtils: __webpack_require__(/*! ./utils/public */ \"(rsc)/./node_modules/pg-promise/lib/utils/public.js\"),\n    connect: __webpack_require__(/*! ./connect */ \"(rsc)/./node_modules/pg-promise/lib/connect.js\"),\n    query: __webpack_require__(/*! ./query */ \"(rsc)/./node_modules/pg-promise/lib/query.js\"),\n    task: __webpack_require__(/*! ./task */ \"(rsc)/./node_modules/pg-promise/lib/task.js\"),\n    text: __webpack_require__(/*! ./text */ \"(rsc)/./node_modules/pg-promise/lib/text.js\")\n};\n/**\r\n * @class Database\r\n * @description\r\n *\r\n * Represents the database protocol, extensible via event {@link event:extend extend}.\r\n * This type is not available directly, it can only be created via the library's base call.\r\n *\r\n * **IMPORTANT:**\r\n *\r\n * For any given connection, you should only create a single {@link Database} object in a separate module,\r\n * to be shared in your application (see the code example below). If instead you keep creating the {@link Database}\r\n * object dynamically, your application will suffer from loss in performance, and will be getting a warning in a\r\n * development environment (when `NODE_ENV` = `development`):\r\n *\r\n * `WARNING: Creating a duplicate database object for the same connection.`\r\n *\r\n * If you ever see this warning, rectify your {@link Database} object initialization, so there is only one object\r\n * per connection details. See the example provided below.\r\n *\r\n * See also: property `noWarnings` in {@link module:pg-promise Initialization Options}.\r\n *\r\n * Note however, that in special cases you may need to re-create the database object, if its connection pool has been\r\n * shut-down externally. And in this case the library won't be showing any warning.\r\n *\r\n * @param {string|object} cn\r\n * Database connection details, which can be:\r\n *\r\n * - a configuration object\r\n * - a connection string\r\n *\r\n * For details see {@link https://github.com/vitaly-t/pg-promise/wiki/Connection-Syntax Connection Syntax}.\r\n *\r\n * The value can be accessed from the database object via property {@link Database.$cn $cn}.\r\n *\r\n * @param {*} [dc]\r\n * Database Context.\r\n *\r\n * Any object or value to be propagated through the protocol, to allow implementations and event handling\r\n * that depend on the database context.\r\n *\r\n * This is mainly to facilitate the use of multiple databases which may need separate protocol extensions,\r\n * or different implementations within a single task / transaction callback, depending on the database context.\r\n *\r\n * This parameter also adds uniqueness to the connection context that's used in combination with the connection\r\n * parameters, i.e. use of unique database context will prevent getting the warning about creating a duplicate\r\n * Database object.\r\n *\r\n * The value can be accessed from the database object via property {@link Database#$dc $dc}.\r\n *\r\n * @returns {Database}\r\n *\r\n * @see\r\n *\r\n * {@link Database#query query},\r\n * {@link Database#none none},\r\n * {@link Database#one one},\r\n * {@link Database#oneOrNone oneOrNone},\r\n * {@link Database#many many},\r\n * {@link Database#manyOrNone manyOrNone},\r\n * {@link Database#any any},\r\n * {@link Database#func func},\r\n * {@link Database#proc proc},\r\n * {@link Database#result result},\r\n * {@link Database#multiResult multiResult},\r\n * {@link Database#multi multi},\r\n * {@link Database#map map},\r\n * {@link Database#each each},\r\n * {@link Database#stream stream},\r\n * {@link Database#task task},\r\n * {@link Database#taskIf taskIf},\r\n * {@link Database#tx tx},\r\n * {@link Database#txIf txIf},\r\n * {@link Database#connect connect},\r\n * {@link Database#$config $config},\r\n * {@link Database#$cn $cn},\r\n * {@link Database#$dc $dc},\r\n * {@link Database#$pool $pool},\r\n * {@link event:extend extend}\r\n *\r\n * @example\r\n * // Proper way to initialize and share the Database object\r\n *\r\n * // Loading and initializing the library:\r\n * const pgp = require('pg-promise')({\r\n *     // Initialization Options\r\n * });\r\n *\r\n * // Preparing the connection details:\r\n * const cn = 'postgres://username:password@host:port/database';\r\n *\r\n * // Creating a new database instance from the connection details:\r\n * const db = pgp(cn);\r\n *\r\n * // Exporting the database object for shared use:\r\n * module.exports = db;\r\n */ function Database(cn, dc, config) {\n    const dbThis = this, $p = config.promise, poolConnection = typeof cn === \"string\" ? {\n        connectionString: cn\n    } : cn, pool = new config.pgp.pg.Pool(poolConnection), endMethod = pool.end;\n    let destroyed;\n    pool.end = (cb)=>{\n        const res = endMethod.call(pool, cb);\n        dbThis.$destroy();\n        return res;\n    };\n    pool.on(\"error\", onError);\n    /**\r\n     * @method Database#connect\r\n     *\r\n     * @description\r\n     * Acquires a new or existing connection, depending on the current state of the connection pool, and parameter `direct`.\r\n     *\r\n     * This method creates a shared connection for executing a chain of queries against it. The connection must be released\r\n     * in the end of the chain by calling `done()` on the connection object.\r\n     *\r\n     * Method `done` takes one optional parameter - boolean `kill` flag, to signal the connection pool that you want it to kill\r\n     * the physical connection. This flag is ignored for direct connections, as they always close when released.\r\n     *\r\n     * It should not be used just for chaining queries on the same connection, methods {@link Database#task task} and\r\n     * {@link Database#tx tx} (for transactions) are to be used for that. This method is primarily for special cases, like\r\n     * `LISTEN` notifications.\r\n     *\r\n     * **NOTE:** Even though this method exposes a {@link external:Client Client} object via property `client`,\r\n     * you cannot call `client.end()` directly, or it will print an error into the console:\r\n     * `Abnormal client.end() call, due to invalid code or failed server connection.`\r\n     * You should only call method `done()` to release the connection.\r\n     *\r\n     * @param {object} [options]\r\n     * Connection Options.\r\n     *\r\n     * @param {boolean} [options.direct=false]\r\n     * Creates a new connection directly, as a stand-alone {@link external:Client Client} object, bypassing the connection pool.\r\n     *\r\n     * By default, all connections are acquired from the connection pool. But if you set this option, the library will instead\r\n     * create a new {@link external:Client Client} object directly (separately from the pool), and then call its `connect` method.\r\n     *\r\n     * Note that specifically for direct connections, method `done` returns a {@link external:Promise Promise}, because those connections\r\n     * are closed physically, which may take time.\r\n     *\r\n     * **WARNING:**\r\n     *\r\n     * Do not use this option for regular query execution, because it exclusively occupies one physical channel, and it cannot scale.\r\n     * This option is only suitable for global connection usage, such as event listeners.\r\n     *\r\n     * @param {function} [options.onLost]\r\n     * Notification callback of the lost/broken connection, called with the following parameters:\r\n     *  - `err` - the original connectivity error\r\n     *  - `e` - error context object, which contains:\r\n     *    - `cn` - safe connection string/config (with the password hashed);\r\n     *    - `dc` - Database Context, as was used during {@link Database} construction;\r\n     *    - `start` - Date/Time (`Date` type) when the connection was established;\r\n     *    - `client` - {@link external:Client Client} object that has lost the connection.\r\n     *\r\n     * The notification is mostly valuable with `direct: true`, to be able to re-connect direct/permanent connections by calling\r\n     * method {@link Database#connect connect} again.\r\n     *\r\n     * You do not need to call `done` on lost connections, as it happens automatically. However, if you had event listeners\r\n     * set up on the connection's `client` object, you should remove them to avoid leaks:\r\n     *\r\n     * ```js\r\n     * function onLostConnection(err, e) {\r\n     *     e.client.removeListener('my-event', myHandler);\r\n     * }\r\n     * ```\r\n     *\r\n     * For a complete example see $[Robust Listeners].\r\n     *\r\n     * @returns {external:Promise}\r\n     * A promise object that represents the connection result:\r\n     *  - resolves with the complete {@link Database} protocol, extended with:\r\n     *    - property `client` of type {@link external:Client Client} that represents the open connection\r\n     *    - method `done` that must be called in the end, in order to release the connection (returns a {@link external:Promise Promise}\r\n     *      in case of direct connections)\r\n     *    - methods `batch`, `page` and `sequence`, same as inside a {@link Task}\r\n     *  - rejects with a connection-related error when it fails to connect.\r\n     *\r\n     * @see\r\n     * {@link Database#task Database.task},\r\n     * {@link Database#taskIf Database.taskIf},\r\n     * {@link Database#tx Database.tx},\r\n     * {@link Database#txIf Database.txIf}\r\n     *\r\n     * @example\r\n     *\r\n     * let sco; // shared connection object;\r\n     *\r\n     * db.connect()\r\n     *     .then(obj => {\r\n     *         // obj.client = new connected Client object;\r\n     *\r\n     *         sco = obj; // save the connection object;\r\n     *\r\n     *         // execute all the queries you need:\r\n     *         return sco.any('SELECT * FROM Users');\r\n     *     })\r\n     *     .then(data => {\r\n     *         // success\r\n     *     })\r\n     *     .catch(error => {\r\n     *         // error\r\n     *     })\r\n     *     .finally(() => {\r\n     *         // release the connection, if it was successful:\r\n     *         if (sco) {\r\n     *             // if you pass `true` into method done, i.e. done(true),\r\n     *             // it will make the pool kill the physical connection.\r\n     *             sco.done();\r\n     *         }\r\n     *     });\r\n     *\r\n     */ this.connect = function(options) {\n        options = options || {};\n        const ctx = createContext();\n        ctx.cnOptions = options;\n        const self = {\n            query (query, values, qrm) {\n                if (!ctx.db) {\n                    return $p.reject(new Error(npm.text.queryDisconnected));\n                }\n                return config.$npm.query.call(this, ctx, query, values, qrm);\n            },\n            done (kill) {\n                if (!ctx.db) {\n                    throw new Error(npm.text.looseQuery);\n                }\n                return ctx.disconnect(kill);\n            },\n            batch (values, opt) {\n                return config.$npm.spex.batch.call(this, values, opt);\n            },\n            page (source, opt) {\n                return config.$npm.spex.page.call(this, source, opt);\n            },\n            sequence (source, opt) {\n                return config.$npm.spex.sequence.call(this, source, opt);\n            }\n        };\n        const connection = options.direct ? config.$npm.connect.direct(ctx) : config.$npm.connect.pool(ctx, dbThis);\n        return connection.then((db)=>{\n            ctx.connect(db);\n            self.client = db.client;\n            extend(ctx, self);\n            return self;\n        });\n    };\n    /**\r\n     * @method Database#query\r\n     *\r\n     * @description\r\n     * Base query method that executes a generic query, expecting the return data according to parameter `qrm`.\r\n     *\r\n     * It performs the following steps:\r\n     *\r\n     *  1. Validates and formats the query via {@link formatting.format as.format}, according to the `query` and `values` passed in;\r\n     *  2. For a root-level query (against the {@link Database} object), it requests a new connection from the pool;\r\n     *  3. Executes the query;\r\n     *  4. For a root-level query (against the {@link Database} object), it releases the connection back to the pool;\r\n     *  5. Resolves/rejects, according to the data returned from the query and the value of `qrm`.\r\n     *\r\n     * Direct use of this method is not suitable for chaining queries, for performance reasons. It should be done\r\n     * through either task or transaction context, see $[Chaining Queries].\r\n     *\r\n     * When receiving a multi-query result, only the last result is processed, ignoring the rest.\r\n     *\r\n     * @param {string|function|object} query\r\n     * Query to be executed, which can be any of the following types:\r\n     * - A non-empty query string\r\n     * - A function that returns a query string or another function, i.e. recursive resolution\r\n     *   is supported, passing in `values` as `this`, and as the first parameter.\r\n     * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n     * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n     * - {@link QueryFile} object\r\n     *\r\n     * @param {array|value|function} [values]\r\n     * Query formatting parameter(s), or a function that returns it.\r\n     *\r\n     * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n     * - a single value - to replace all `$1` occurrences\r\n     * - an array of values - to replace all `$1`, `$2`, ... variables\r\n     * - an object - to apply $[Named Parameters] formatting\r\n     *\r\n     * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n     * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n     * as an override for its internal `values`.\r\n     *\r\n     * @param {queryResult} [qrm=queryResult.any]\r\n     * {@link queryResult Query Result Mask}\r\n     *\r\n     * @returns {external:Promise}\r\n     * A promise object that represents the query result according to `qrm`.\r\n     */ this.query = function(query, values, qrm) {\n        const self = this, ctx = createContext();\n        return config.$npm.connect.pool(ctx, dbThis).then((db)=>{\n            ctx.connect(db);\n            return config.$npm.query.call(self, ctx, query, values, qrm);\n        }).then((data)=>{\n            ctx.disconnect();\n            return data;\n        }).catch((error)=>{\n            ctx.disconnect();\n            return $p.reject(error);\n        });\n    };\n    /**\r\n     * @member {object} Database#$config\r\n     * @readonly\r\n     * @description\r\n     * This is a hidden property, to help integrating type {@link Database} directly with third-party libraries.\r\n     *\r\n     * Properties available in the object:\r\n     * - `pgp` - instance of the entire library after initialization\r\n     * - `options` - the library's {@link module:pg-promise Initialization Options} object\r\n     * - `promiseLib` - instance of the promise library that's used\r\n     * - `promise` - generic promise interface that uses `promiseLib` via 4 basic methods:\r\n     *   - `promise((resolve, reject) => {})` - to create a new promise\r\n     *   - `promise.resolve(value)` - to resolve with a value\r\n     *   - `promise.reject(reason)` - to reject with a reason\r\n     *   - `promise.all(iterable)` - to resolve an iterable list of promises\r\n     * - `version` - this library's version\r\n     * - `$npm` _(hidden property)_ - internal module cache\r\n     *\r\n     * @example\r\n     *\r\n     * // Using the promise protocol as configured by pg-promise:\r\n     *\r\n     * const $p = db.$config.promise;\r\n     *\r\n     * const resolvedPromise = $p.resolve('some data');\r\n     * const rejectedPromise = $p.reject('some reason');\r\n     *\r\n     * const newPromise = $p((resolve, reject) => {\r\n     *     // call either resolve(data) or reject(reason) here\r\n     * });\r\n     */ npm.utils.addReadProp(this, \"$config\", config, true);\n    /**\r\n     * @member {string|object} Database#$cn\r\n     * @readonly\r\n     * @description\r\n     * Database connection, as was passed in during the object's construction.\r\n     *\r\n     * This is a hidden property, to help integrating type {@link Database} directly with third-party libraries.\r\n     *\r\n     * @see Database\r\n     */ npm.utils.addReadProp(this, \"$cn\", cn, true);\n    /**\r\n     * @member {*} Database#$dc\r\n     * @readonly\r\n     * @description\r\n     * Database Context, as was passed in during the object's construction.\r\n     *\r\n     * This is a hidden property, to help integrating type {@link Database} directly with third-party libraries.\r\n     *\r\n     * @see Database\r\n     */ npm.utils.addReadProp(this, \"$dc\", dc, true);\n    /**\r\n     * @member {external:pg-pool} Database#$pool\r\n     * @readonly\r\n     * @description\r\n     * A $[pg-pool] object associated with the database object, as each {@link Database} creates its own $[pg-pool] instance.\r\n     *\r\n     * This is a hidden property, primarily for integrating type {@link Database} with third-party libraries that support\r\n     * $[pg-pool] directly. Note however, that if you pass the pool object into a library that calls `pool.end()`, you will no longer be able\r\n     * to use this {@link Database} object, and each query method will be rejecting with {@link external:Error Error} =\r\n     * `Connection pool of the database object has been destroyed.`\r\n     *\r\n     * You can also use this object to shut down the pool, by calling `$pool.end()`.\r\n     *\r\n     * For more details see $[Library de-initialization].\r\n     *\r\n     * @see\r\n     * {@link Database}\r\n     * {@link module:pg-promise~end pgp.end}\r\n     *\r\n     * @example\r\n     *\r\n     * // Shutting down the connection pool of this database object,\r\n     * // after all queries have finished in a run-though process:\r\n     *\r\n     * .then(() => {}) // processing the data\r\n     * .catch() => {}) // handling the error\r\n     * .finally(db.$pool.end); // shutting down the pool\r\n     *\r\n     */ npm.utils.addReadProp(this, \"$pool\", pool, true);\n    /**\r\n     * @member {function} Database.$destroy\r\n     * @readonly\r\n     * @private\r\n     * @description\r\n     * Permanently shuts down the database object.\r\n     */ npm.utils.addReadProp(this, \"$destroy\", ()=>{\n        if (!destroyed) {\n            if (!pool.ending) {\n                endMethod.call(pool);\n            }\n            DatabasePool.unregister(dbThis);\n            pool.removeListener(\"error\", onError);\n            destroyed = true;\n        }\n    }, true);\n    DatabasePool.register(this);\n    extend(createContext(), this); // extending root protocol;\n    function createContext() {\n        return new ConnectionContext({\n            cn,\n            dc,\n            options: config.options\n        });\n    }\n    // Optional value-transformation helper:\n    function transform(value, cb, thisArg) {\n        return typeof cb === \"function\" ? value.then((data)=>cb.call(thisArg, data)) : value;\n    }\n    ////////////////////////////////////////////////////\n    // Injects additional methods into an access object,\n    // extending the protocol's base method 'query'.\n    function extend(ctx, obj) {\n        /**\r\n         * @method Database#none\r\n         * @description\r\n         * Executes a query that expects no data to be returned. If the query returns any data,\r\n         * the method rejects.\r\n         *\r\n         * When receiving a multi-query result, only the last result is processed, ignoring the rest.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Query to be executed, which can be any of the following types:\r\n         * - A non-empty query string\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @returns {external:Promise<null>}\r\n         * A promise object that represents the query result:\r\n         * - When no records are returned, it resolves with `null`.\r\n         * - When any data is returned, it rejects with {@link errors.QueryResultError QueryResultError}:\r\n         *   - `.message` = `No return data was expected.`\r\n         *   - `.code` = {@link errors.queryResultErrorCode.notEmpty queryResultErrorCode.notEmpty}\r\n         */ obj.none = function(query, values) {\n            return obj.query.call(this, query, values, queryResult.none);\n        };\n        /**\r\n         * @method Database#one\r\n         * @description\r\n         * Executes a query that expects exactly 1 row to be returned. When 0 or more than 1 rows are returned,\r\n         * the method rejects.\r\n         *\r\n         * When receiving a multi-query result, only the last result is processed, ignoring the rest.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Query to be executed, which can be any of the following types:\r\n         * - A non-empty query string\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @param {function} [cb]\r\n         * Value-transformation callback, to allow in-line value change.\r\n         * When specified, the returned value replaces the original one.\r\n         *\r\n         * The function takes only one parameter - value resolved from the query.\r\n         *\r\n         * @param {*} [thisArg]\r\n         * Value to use as `this` when executing the transformation callback.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object that represents the query result:\r\n         * - When 1 row is returned, it resolves with that row as a single object.\r\n         * - When no rows are returned, it rejects with {@link errors.QueryResultError QueryResultError}:\r\n         *   - `.message` = `No data returned from the query.`\r\n         *   - `.code` = {@link errors.queryResultErrorCode.noData queryResultErrorCode.noData}\r\n         * - When multiple rows are returned, it rejects with {@link errors.QueryResultError QueryResultError}:\r\n         *   - `.message` = `Multiple rows were not expected.`\r\n         *   - `.code` = {@link errors.queryResultErrorCode.multiple queryResultErrorCode.multiple}\r\n         * - Resolves with the new value, if transformation callback `cb` was specified.\r\n         *\r\n         * @see\r\n         * {@link Database#oneOrNone oneOrNone}\r\n         *\r\n         * @example\r\n         *\r\n         * // a query with in-line value transformation:\r\n         * db.one('INSERT INTO Events VALUES($1) RETURNING id', [123], event => event.id)\r\n         *     .then(data => {\r\n         *         // data = a new event id, rather than an object with it\r\n         *     });\r\n         *\r\n         * @example\r\n         *\r\n         * // a query with in-line value transformation + conversion:\r\n         * db.one('SELECT count(*) FROM Users', [], c => +c.count)\r\n         *     .then(count => {\r\n         *         // count = a proper integer value, rather than an object with a string\r\n         *     });\r\n         *\r\n         */ obj.one = function(query, values, cb, thisArg) {\n            const v = obj.query.call(this, query, values, queryResult.one);\n            return transform(v, cb, thisArg);\n        };\n        /**\r\n         * @method Database#many\r\n         * @description\r\n         * Executes a query that expects one or more rows to be returned. When the query returns no rows, the method rejects.\r\n         *\r\n         * When receiving a multi-query result, only the last result is processed, ignoring the rest.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Query to be executed, which can be any of the following types:\r\n         * - A non-empty query string\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object that represents the query result:\r\n         * - When 1 or more rows are returned, it resolves with the array of rows.\r\n         * - When no rows are returned, it rejects with {@link errors.QueryResultError QueryResultError}:\r\n         *   - `.message` = `No data returned from the query.`\r\n         *   - `.code` = {@link errors.queryResultErrorCode.noData queryResultErrorCode.noData}\r\n         */ obj.many = function(query, values) {\n            return obj.query.call(this, query, values, queryResult.many);\n        };\n        /**\r\n         * @method Database#oneOrNone\r\n         * @description\r\n         * Executes a query that expects 0 or 1 rows to be returned. It resolves with the row-object when 1 row is returned,\r\n         * or with `null` when nothing is returned. When the query returns more than 1 row, the method rejects.\r\n         *\r\n         * When receiving a multi-query result, only the last result is processed, ignoring the rest.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Query to be executed, which can be any of the following types:\r\n         * - A non-empty query string\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @param {function} [cb]\r\n         * Value-transformation callback, to allow in-line value change.\r\n         * When specified, the returned value replaces the original one.\r\n         *\r\n         * The function takes only one parameter - value resolved from the query.\r\n         *\r\n         * @param {*} [thisArg]\r\n         * Value to use as `this` when executing the transformation callback.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object that represents the query result:\r\n         * - When no rows are returned, it resolves with `null`.\r\n         * - When 1 row is returned, it resolves with that row as a single object.\r\n         * - When multiple rows are returned, it rejects with {@link errors.QueryResultError QueryResultError}:\r\n         *   - `.message` = `Multiple rows were not expected.`\r\n         *   - `.code` = {@link errors.queryResultErrorCode.multiple queryResultErrorCode.multiple}\r\n         * - Resolves with the new value, if transformation callback `cb` was specified.\r\n         *\r\n         * @see\r\n         * {@link Database#one one},\r\n         * {@link Database#none none},\r\n         * {@link Database#manyOrNone manyOrNone}\r\n         *\r\n         * @example\r\n         *\r\n         * // a query with in-line value transformation:\r\n         * db.oneOrNone('SELECT id FROM Events WHERE type = $1', ['entry'], e => e && e.id)\r\n         *     .then(data => {\r\n         *         // data = the event id or null (rather than object or null)\r\n         *     });\r\n         *\r\n         */ obj.oneOrNone = function(query, values, cb, thisArg) {\n            const v = obj.query.call(this, query, values, queryResult.one | queryResult.none);\n            return transform(v, cb, thisArg);\n        };\n        /**\r\n         * @method Database#manyOrNone\r\n         * @description\r\n         * Executes a query that can return any number of rows.\r\n         *\r\n         * When receiving a multi-query result, only the last result is processed, ignoring the rest.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Query to be executed, which can be any of the following types:\r\n         * - A non-empty query string\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @returns {external:Promise<Array>}\r\n         * A promise object that represents the query result:\r\n         * - When no rows are returned, it resolves with an empty array.\r\n         * - When 1 or more rows are returned, it resolves with the array of rows.\r\n         *\r\n         * @see\r\n         * {@link Database#any any},\r\n         * {@link Database#many many},\r\n         * {@link Database#none none}\r\n         *\r\n         */ obj.manyOrNone = function(query, values) {\n            return obj.query.call(this, query, values, queryResult.many | queryResult.none);\n        };\n        /**\r\n         * @method Database#any\r\n         * @description\r\n         * Executes a query that can return any number of rows.\r\n         * This is simply a shorter alias for method {@link Database#manyOrNone manyOrNone}.\r\n         *\r\n         * When receiving a multi-query result, only the last result is processed, ignoring the rest.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Query to be executed, which can be any of the following types:\r\n         * - A non-empty query string\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @returns {external:Promise<Array>}\r\n         * A promise object that represents the query result:\r\n         * - When no rows are returned, it resolves with an empty array.\r\n         * - When 1 or more rows are returned, it resolves with the array of rows.\r\n         *\r\n         * @see\r\n         * {@link Database#manyOrNone manyOrNone},\r\n         * {@link Database#map map},\r\n         * {@link Database#each each}\r\n         *\r\n         */ obj.any = function(query, values) {\n            return obj.query.call(this, query, values, queryResult.any);\n        };\n        /**\r\n         * @method Database#result\r\n         * @description\r\n         * Executes a query without any expectation for the return data, and resolves with the\r\n         * original $[Result] object when successful.\r\n         *\r\n         * When receiving a multi-query result, only the last result is processed, ignoring the rest.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Query to be executed, which can be any of the following types:\r\n         * - A non-empty query string\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @param {function} [cb]\r\n         * Value-transformation callback, to allow in-line value change.\r\n         * When specified, the returned value replaces the original one.\r\n         *\r\n         * The function takes only one parameter - value resolved from the query.\r\n         *\r\n         * @param {*} [thisArg]\r\n         * Value to use as `this` when executing the transformation callback.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object that represents the query result:\r\n         * - resolves with the original $[Result] object (by default);\r\n         * - resolves with the new value, if transformation callback `cb` was specified.\r\n         *\r\n         * @example\r\n         *\r\n         * // use of value transformation:\r\n         * // deleting rows and returning the number of rows deleted\r\n         * db.result('DELETE FROM Events WHERE id = $1', [123], r => r.rowCount)\r\n         *     .then(data => {\r\n         *         // data = number of rows that were deleted\r\n         *     });\r\n         *\r\n         * @example\r\n         *\r\n         * // use of value transformation:\r\n         * // getting only column details from a table\r\n         * db.result('SELECT * FROM Users LIMIT 0', null, r => r.fields)\r\n         *     .then(data => {\r\n         *         // data = array of column descriptors\r\n         *     });\r\n         *\r\n         */ obj.result = function(query, values, cb, thisArg) {\n            const v = obj.query.call(this, query, values, resultQuery);\n            return transform(v, cb, thisArg);\n        };\n        /**\r\n         * @method Database#multiResult\r\n         * @description\r\n         * Executes a multi-query string, without any expectation for the return data, and resolves with an array\r\n         * of the original $[Result] objects when successful.\r\n         *\r\n         * The operation is atomic, i.e. all queries are executed in a single transaction, unless there are explicit\r\n         * `BEGIN/COMMIT` commands included in the query string to divide it into multiple transactions.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Multi-query string to be executed, which can be any of the following types:\r\n         * - A non-empty string that can contain any number of queries\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @returns {external:Promise<external:Result[]>}\r\n         *\r\n         * @see {@link Database#multi multi}\r\n         *\r\n         */ obj.multiResult = function(query, values) {\n            return obj.query.call(this, query, values, multiResultQuery);\n        };\n        /**\r\n         * @method Database#multi\r\n         * @description\r\n         * Executes a multi-query string, without any expectation for the return data, and resolves with an array\r\n         * of arrays of rows when successful.\r\n         *\r\n         * The operation is atomic, i.e. all queries are executed in a single transaction, unless there are explicit\r\n         * `BEGIN/COMMIT` commands included in the query string to divide it into multiple transactions.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Multi-query string to be executed, which can be any of the following types:\r\n         * - A non-empty string that can contain any number of queries\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @returns {external:Promise<Array<Array>>}\r\n         *\r\n         * @see {@link Database#multiResult multiResult}\r\n         *\r\n         * @example\r\n         *\r\n         * // Get data from 2 tables in a single request:\r\n         * const [users, products] = await db.multi('SELECT * FROM users;SELECT * FROM products');\r\n         *\r\n         */ obj.multi = function(query, values) {\n            return obj.query.call(this, query, values, multiResultQuery).then((data)=>data.map((a)=>a.rows));\n        };\n        /**\r\n         * @method Database#stream\r\n         * @description\r\n         * Custom data streaming, with the help of $[pg-query-stream].\r\n         *\r\n         * This method doesn't work with the $[Native Bindings], and if option `pgNative`\r\n         * is set, it will reject with `Streaming doesn't work with Native Bindings.`\r\n         *\r\n         * @param {QueryStream} qs\r\n         * Stream object of type $[QueryStream].\r\n         *\r\n         * @param {Database.streamInitCB} initCB\r\n         * Stream initialization callback.\r\n         *\r\n         * It is invoked with the same `this` context as the calling method.\r\n         *\r\n         * @returns {external:Promise}\r\n         * Result of the streaming operation.\r\n         *\r\n         * Once the streaming has finished successfully, the method resolves with\r\n         * `{processed, duration}`:\r\n         * - `processed` - total number of rows processed;\r\n         * - `duration` - streaming duration, in milliseconds.\r\n         *\r\n         * Possible rejections messages:\r\n         * - `Invalid or missing stream object.`\r\n         * - `Invalid stream state.`\r\n         * - `Invalid or missing stream initialization callback.`\r\n         */ obj.stream = function(qs, init) {\n            return obj.query.call(this, qs, init, streamQuery);\n        };\n        /**\r\n         * @method Database#func\r\n         * @description\r\n         * Executes a database function that returns a table, abbreviating the full syntax\r\n         * of `query('SELECT * FROM $1:alias($2:csv)', [funcName, values], qrm)`.\r\n         *\r\n         * @param {string} funcName\r\n         * Name of the function to be executed.\r\n         * When it is not same-case, or contains extended symbols, it is double-quoted, as per the `:alias` filter,\r\n         * which also supports `.`, to auto-split into a composite name.\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Parameters for the function - one value | array of values | function returning value(s).\r\n         *\r\n         * @param {queryResult} [qrm=queryResult.any] - {@link queryResult Query Result Mask}.\r\n         *\r\n         * @returns {external:Promise}\r\n         *\r\n         * A promise object as returned from method {@link Database#query query}, according to parameter `qrm`.\r\n         *\r\n         * @see\r\n         * {@link Database#query query},\r\n         * {@link Database#proc proc}\r\n         */ obj.func = function(funcName, values, qrm) {\n            return obj.query.call(this, {\n                entity: funcName,\n                type: \"func\"\n            }, values, qrm);\n        };\n        /**\r\n         * @method Database#proc\r\n         * @description\r\n         * Executes a stored procedure by name, abbreviating the full syntax of\r\n         * `oneOrNone('CALL $1:alias($2:csv)', [procName, values], cb, thisArg)`.\r\n         *\r\n         * **NOTE:** This method uses the new `CALL` syntax that requires PostgreSQL v11 or later.\r\n         *\r\n         * @param {string} procName\r\n         * Name of the stored procedure to be executed.\r\n         * When it is not same-case, or contains extended symbols, it is double-quoted, as per the `:alias` filter,\r\n         * which also supports `.`, to auto-split into a composite SQL name.\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Parameters for the procedure - one value | array of values | function returning value(s).\r\n         *\r\n         * @param {function} [cb]\r\n         * Value-transformation callback, to allow in-line value change.\r\n         * When specified, the returned value replaces the original one.\r\n         *\r\n         * The function takes only one parameter - value resolved from the query.\r\n         *\r\n         * @param {*} [thisArg]\r\n         * Value to use as `this` when executing the transformation callback.\r\n         *\r\n         * @returns {external:Promise}\r\n         * When the procedure takes output parameters, a single object is returned, with\r\n         * properties for the output values. Otherwise, the method resolves with `null`.\r\n         * And if the value-transformation callback is provided, it overrides the result.\r\n         *\r\n         * @see\r\n         * {@link Database#func func}\r\n         */ obj.proc = function(procName, values, cb, thisArg) {\n            const v = obj.query.call(this, {\n                entity: procName,\n                type: \"proc\"\n            }, values, queryResult.one | queryResult.none);\n            return transform(v, cb, thisArg);\n        };\n        /**\r\n         * @method Database#map\r\n         * @description\r\n         * Creates a new array with the results of calling a provided function on every element in the array of rows\r\n         * resolved by method {@link Database#any any}.\r\n         *\r\n         * It is a convenience method, to reduce the following code:\r\n         *\r\n         * ```js\r\n         * db.any(query, values)\r\n         *     .then(data => {\r\n         *         return data.map((row, index, data) => {\r\n         *              // return a new element\r\n         *         });\r\n         *     });\r\n         * ```\r\n         *\r\n         * When receiving a multi-query result, only the last result is processed, ignoring the rest.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Query to be executed, which can be any of the following types:\r\n         * - A non-empty query string\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} values\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @param {function} cb\r\n         * Function that produces an element of the new array, taking three arguments:\r\n         * - `row` - the current row object being processed in the array\r\n         * - `index` - the index of the current row being processed in the array\r\n         * - `data` - the original array of rows resolved by method {@link Database#any any}\r\n         *\r\n         * @param {*} [thisArg]\r\n         * Value to use as `this` when executing the callback.\r\n         *\r\n         * @returns {external:Promise<Array>}\r\n         * Resolves with the new array of values returned from the callback.\r\n         *\r\n         * @see\r\n         * {@link Database#any any},\r\n         * {@link Database#each each},\r\n         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map Array.map}\r\n         *\r\n         * @example\r\n         *\r\n         * db.map('SELECT id FROM Users WHERE status = $1', ['active'], row => row.id)\r\n         *     .then(data => {\r\n         *         // data = array of active user id-s\r\n         *     })\r\n         *     .catch(error => {\r\n         *        // error\r\n         *     });\r\n         *\r\n         * @example\r\n         *\r\n         * db.tx(t => {\r\n         *     return t.map('SELECT id FROM Users WHERE status = $1', ['active'], row => {\r\n         *        return t.none('UPDATE Events SET checked = $1 WHERE userId = $2', [true, row.id]);\r\n         *     }).then(t.batch);\r\n         * })\r\n         *     .then(data => {\r\n         *         // success\r\n         *     })\r\n         *     .catch(error => {\r\n         *         // error\r\n         *     });\r\n         *\r\n         * @example\r\n         *\r\n         * // Build a list of active users, each with the list of user events:\r\n         * db.task(t => {\r\n         *     return t.map('SELECT id FROM Users WHERE status = $1', ['active'], user => {\r\n         *         return t.any('SELECT * FROM Events WHERE userId = $1', user.id)\r\n         *             .then(events=> {\r\n         *                 user.events = events;\r\n         *                 return user;\r\n         *             });\r\n         *     }).then(t.batch);\r\n         * })\r\n         *     .then(data => {\r\n         *         // success\r\n         *     })\r\n         *     .catch(error => {\r\n         *         // error\r\n         *     });\r\n         *\r\n         */ obj.map = function(query, values, cb, thisArg) {\n            return obj.any.call(this, query, values).then((data)=>data.map(cb, thisArg));\n        };\n        /**\r\n         * @method Database#each\r\n         * @description\r\n         * Executes a provided function once per array element, for an array of rows resolved by method {@link Database#any any}.\r\n         *\r\n         * It is a convenience method to reduce the following code:\r\n         *\r\n         * ```js\r\n         * db.any(query, values)\r\n         *     .then(data => {\r\n         *         data.forEach((row, index, data) => {\r\n         *              // process the row\r\n         *         });\r\n         *         return data;\r\n         *     });\r\n         * ```\r\n         *\r\n         * When receiving a multi-query result, only the last result is processed, ignoring the rest.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Query to be executed, which can be any of the following types:\r\n         * - A non-empty query string\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @param {function} cb\r\n         * Function to execute for each row, taking three arguments:\r\n         * - `row` - the current row object being processed in the array\r\n         * - `index` - the index of the current row being processed in the array\r\n         * - `data` - the array of rows resolved by method {@link Database#any any}\r\n         *\r\n         * @param {*} [thisArg]\r\n         * Value to use as `this` when executing the callback.\r\n         *\r\n         * @returns {external:Promise<Array<Object>>}\r\n         * Resolves with the original array of rows.\r\n         *\r\n         * @see\r\n         * {@link Database#any any},\r\n         * {@link Database#map map},\r\n         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach Array.forEach}\r\n         *\r\n         * @example\r\n         *\r\n         * db.each('SELECT id, code, name FROM Events', [], row => {\r\n         *     row.code = parseInt(row.code);\r\n         * })\r\n         *     .then(data => {\r\n         *         // data = array of events, with 'code' converted into integer\r\n         *     })\r\n         *     .catch(error => {\r\n         *         // error\r\n         *     });\r\n         *\r\n         */ obj.each = function(query, values, cb, thisArg) {\n            return obj.any.call(this, query, values).then((data)=>{\n                data.forEach(cb, thisArg);\n                return data;\n            });\n        };\n        /**\r\n         * @method Database#task\r\n         * @description\r\n         * Executes a callback function with automatically managed connection.\r\n         *\r\n         * When invoked on the root {@link Database} object, the method allocates the connection from the pool,\r\n         * executes the callback, and once finished - releases the connection back to the pool.\r\n         * However, when invoked inside another task or transaction, the method reuses the parent connection.\r\n         *\r\n         * This method should be used whenever executing more than one query at once, so the allocated connection\r\n         * is reused between all queries, and released only after the task has finished (see $[Chaining Queries]).\r\n         *\r\n         * The callback function is called with one parameter - database protocol (same as `this`), extended with methods\r\n         * {@link Task#batch batch}, {@link Task#page page}, {@link Task#sequence sequence}, plus property {@link Task#ctx ctx} -\r\n         * the task context object. See class {@link Task} for more details.\r\n         *\r\n         * @param {string|number|Object} [options]\r\n         * This parameter is optional, and presumed skipped when the first parameter is a function (`cb` parameter).\r\n         *\r\n         * When it is of type `string` or `number`, it is assumed to be option `tag` passed in directly. Otherwise,\r\n         * it is expected to be an object with options as listed below.\r\n         *\r\n         * @param {} [options.tag]\r\n         * Traceable context for the task (see $[tags]).\r\n         *\r\n         * @param {function} cb\r\n         * Task callback function, to return the result that will determine either success or failure for the operation.\r\n         *\r\n         * The function can be either the first of the second parameter passed into the method.\r\n         *\r\n         * It also can be an ES7 `async` function.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object with the result from the callback function.\r\n         *\r\n         * @see\r\n         * {@link Task},\r\n         * {@link Database#taskIf taskIf},\r\n         * {@link Database#tx tx},\r\n         * $[tags],\r\n         * $[Chaining Queries]\r\n         *\r\n         * @example\r\n         *\r\n         * db.task('my-task', t => {\r\n         *         // t.ctx = task context object\r\n         *\r\n         *         return t.one('SELECT id FROM Users WHERE name = $1', 'John')\r\n         *             .then(user => {\r\n         *                 return t.any('SELECT * FROM Events WHERE userId = $1', user.id);\r\n         *             });\r\n         *     })\r\n         *     .then(data => {\r\n         *         // success\r\n         *         // data = as returned from the task's callback\r\n         *     })\r\n         *     .catch(error => {\r\n         *         // error\r\n         *     });\r\n         *\r\n         * @example\r\n         *\r\n         * // using an ES7 syntax for the callback:\r\n         * db.task('my-task', async t {\r\n         *         // t.ctx = task context object\r\n         *\r\n         *         const user = await t.one('SELECT id FROM Users WHERE name = $1', 'John');\r\n         *         return t.any('SELECT * FROM Events WHERE userId = $1', user.id);\r\n         *     })\r\n         *     .then(data => {\r\n         *         // success\r\n         *         // data = as returned from the task's callback\r\n         *     })\r\n         *     .catch(error => {\r\n         *         // error\r\n         *     });\r\n         *\r\n         */ obj.task = function() {\n            const args = npm.pubUtils.taskArgs(arguments);\n            assert(args.options, [\n                \"tag\"\n            ]);\n            return taskProcessor.call(this, args, false);\n        };\n        /**\r\n         * @method Database#taskIf\r\n         * @description\r\n         * Executes a conditional task that results in an actual new {@link Database#task task}, if either condition is met or\r\n         * when it is necessary (on the top level), or else it reuses the current connection context.\r\n         *\r\n         * The default condition is `not in task or transaction`, to start a task only if currently not inside another task or transaction,\r\n         * which is the same as calling the following:\r\n         *\r\n         * ```js\r\n         * db.taskIf({cnd: t => !t.ctx}, cb => {})\r\n         * ```\r\n         *\r\n         * It can be useful, if you want to simplify/reduce the task + log events footprint, by creating new tasks only when necessary.\r\n         *\r\n         * @param {string|number|Object} [options]\r\n         * This parameter is optional, and presumed skipped when the first parameter is a function (`cb` parameter).\r\n         *\r\n         * When it is of type `string` or `number`, it is assumed to be option `tag` passed in directly. Otherwise,\r\n         * it is expected to be an object with options as listed below.\r\n         *\r\n         * @param {} [options.tag]\r\n         * Traceable context for the task/transaction (see $[tags]).\r\n         *\r\n         * @param {boolean|function} [options.cnd]\r\n         * Condition for creating a ({@link Database#task task}), if it is met.\r\n         * It can be either a simple boolean, or a callback function that takes the task context as `this` and as the first parameter.\r\n         *\r\n         * Default condition (when it is not specified):\r\n         *\r\n         * ```js\r\n         * {cnd: t => !t.ctx}\r\n         * ```\r\n         *\r\n         * @param {function} cb\r\n         * Task callback function, to return the result that will determine either success or failure for the operation.\r\n         *\r\n         * The function can be either the first or the second parameter passed into the method.\r\n         *\r\n         * It also can be an ES7 `async` function.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object with the result from the callback function.\r\n         *\r\n         * @see\r\n         * {@link Task},\r\n         * {@link Database#task Database.task},\r\n         * {@link Database#tx Database.tx},\r\n         * {@link Database#txIf Database.txIf},\r\n         * {@link TaskContext}\r\n         *\r\n         */ obj.taskIf = function() {\n            const args = npm.pubUtils.taskArgs(arguments);\n            assert(args.options, [\n                \"tag\",\n                \"cnd\"\n            ]);\n            try {\n                let cnd = args.options.cnd;\n                if (\"cnd\" in args.options) {\n                    cnd = typeof cnd === \"function\" ? cnd.call(obj, obj) : !!cnd;\n                } else {\n                    cnd = !obj.ctx; // create task, if it is the top level\n                }\n                // reusable only if condition fails, and not top-level:\n                args.options.reusable = !cnd && !!obj.ctx;\n            } catch (e) {\n                return $p.reject(e);\n            }\n            return taskProcessor.call(this, args, false);\n        };\n        /**\r\n         * @method Database#tx\r\n         * @description\r\n         * Executes a callback function as a transaction, with automatically managed connection.\r\n         *\r\n         * When invoked on the root {@link Database} object, the method allocates the connection from the pool,\r\n         * executes the callback, and once finished - releases the connection back to the pool.\r\n         * However, when invoked inside another task or transaction, the method reuses the parent connection.\r\n         *\r\n         * A transaction wraps a regular {@link Database#task task} into additional queries:\r\n         * - it executes `BEGIN` just before invoking the callback function\r\n         * - it executes `COMMIT`, if the callback didn't throw any error or return a rejected promise\r\n         * - it executes `ROLLBACK`, if the callback did throw an error or return a rejected promise\r\n         * - it executes corresponding `SAVEPOINT` commands when the method is called recursively.\r\n         *\r\n         * The callback function is called with one parameter - database protocol (same as `this`), extended with methods\r\n         * {@link Task#batch batch}, {@link Task#page page}, {@link Task#sequence sequence}, plus property {@link Task#ctx ctx} -\r\n         * the transaction context object. See class {@link Task} for more details.\r\n         *\r\n         * Note that transactions should be chosen over tasks only where necessary, because unlike regular tasks,\r\n         * transactions are blocking operations.\r\n         *\r\n         * @param {string|number|Object} [options]\r\n         * This parameter is optional, and presumed skipped when the first parameter is a function (`cb` parameter).\r\n         *\r\n         * When it is of type `string` or `number`, it is assumed to be option `tag` passed in directly. Otherwise,\r\n         * it is expected to be an object with options as listed below.\r\n         *\r\n         * @param {} [options.tag]\r\n         * Traceable context for the transaction (see $[tags]).\r\n         *\r\n         * @param {txMode.TransactionMode} [options.mode]\r\n         * Transaction Configuration Mode - extends the transaction-opening command with additional configuration.\r\n         *\r\n         * @param {function} cb\r\n         * Transaction callback function, to return the result that will determine either success or failure for the operation.\r\n         *\r\n         * The function can be either the first of the second parameter passed into the method.\r\n         *\r\n         * It also can be an ES7 `async` function.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object with the result from the callback function.\r\n         *\r\n         * @see\r\n         * {@link Task},\r\n         * {@link Database#task Database.task},\r\n         * {@link Database#taskIf Database.taskIf},\r\n         * {@link TaskContext},\r\n         * $[tags],\r\n         * $[Chaining Queries]\r\n         *\r\n         * @example\r\n         *\r\n         * db.tx('my-transaction', t => {\r\n         *         // t.ctx = transaction context object\r\n         *\r\n         *         return t.one('INSERT INTO Users(name, age) VALUES($1, $2) RETURNING id', ['Mike', 25])\r\n         *             .then(user => {\r\n         *                 return t.batch([\r\n         *                     t.none('INSERT INTO Events(userId, name) VALUES($1, $2)', [user.id, 'created']),\r\n         *                     t.none('INSERT INTO Events(userId, name) VALUES($1, $2)', [user.id, 'login'])\r\n         *                 ]);\r\n         *             });\r\n         *     })\r\n         *     .then(data => {\r\n         *         // success\r\n         *         // data = as returned from the transaction's callback\r\n         *     })\r\n         *     .catch(error => {\r\n         *         // error\r\n         *     });\r\n         *\r\n         * @example\r\n         *\r\n         * // using an ES7 syntax for the callback:\r\n         * db.tx('my-transaction', async t {\r\n         *         // t.ctx = transaction context object\r\n         *\r\n         *         const user = await t.one('INSERT INTO Users(name, age) VALUES($1, $2) RETURNING id', ['Mike', 25]);\r\n         *         return t.none('INSERT INTO Events(userId, name) VALUES($1, $2)', [user.id, 'created']);\r\n         *     })\r\n         *     .then(data => {\r\n         *         // success\r\n         *         // data = as returned from the transaction's callback\r\n         *     })\r\n         *     .catch(error => {\r\n         *         // error\r\n         *     });\r\n         *\r\n         */ obj.tx = function() {\n            const args = npm.pubUtils.taskArgs(arguments);\n            assert(args.options, [\n                \"tag\",\n                \"mode\"\n            ]);\n            return taskProcessor.call(this, args, true);\n        };\n        /**\r\n         * @method Database#txIf\r\n         * @description\r\n         * Executes a conditional transaction that results in an actual transaction ({@link Database#tx tx}), if the condition is met,\r\n         * or else it executes a regular {@link Database#task task}.\r\n         *\r\n         * The default condition is `not in transaction`, to start a transaction only if currently not in transaction,\r\n         * or else start a task, which is the same as calling the following:\r\n         *\r\n         * ```js\r\n         * db.txIf({cnd: t => !t.ctx || !t.ctx.inTransaction}, cb => {})\r\n         * ```\r\n         *\r\n         * It is useful when you want to avoid $[Nested Transactions] - savepoints.\r\n         *\r\n         * @param {string|number|Object} [options]\r\n         * This parameter is optional, and presumed skipped when the first parameter is a function (`cb` parameter).\r\n         *\r\n         * When it is of type `string` or `number`, it is assumed to be option `tag` passed in directly. Otherwise,\r\n         * it is expected to be an object with options as listed below.\r\n         *\r\n         * @param {} [options.tag]\r\n         * Traceable context for the task/transaction (see $[tags]).\r\n         *\r\n         * @param {txMode.TransactionMode} [options.mode]\r\n         * Transaction Configuration Mode - extends the transaction-opening command with additional configuration.\r\n         *\r\n         * @param {boolean|function} [options.cnd]\r\n         * Condition for opening a transaction ({@link Database#tx tx}), if it is met, or a {@link Database#task task} when the condition is not met.\r\n         * It can be either a simple boolean, or a callback function that takes the task/tx context as `this` and as the first parameter.\r\n         *\r\n         * Default condition (when it is not specified):\r\n         *\r\n         * ```js\r\n         * {cnd: t => !t.ctx || !t.ctx.inTransaction}\r\n         * ```\r\n         *\r\n         * @param {boolean|function} [options.reusable=false]\r\n         * When `cnd` is/returns false, reuse context of the current task/transaction, if one exists.\r\n         * It can be either a simple boolean, or a callback function that takes the task/tx context as `this`\r\n         * and as the first parameter.\r\n         *\r\n         * By default, when `cnd` is/returns false, the method creates a new task. This option tells\r\n         * the method to reuse the current task/transaction context, and not create a new task.\r\n         *\r\n         * This option is ignored when executing against the top level of the protocol, because on\r\n         * that level, if no transaction is suddenly needed, a new task becomes necessary.\r\n         *\r\n         * @param {function} cb\r\n         * Transaction/task callback function, to return the result that will determine either\r\n         * success or failure for the operation.\r\n         *\r\n         * The function can be either the first or the second parameter passed into the method.\r\n         *\r\n         * It also can be an ES7 `async` function.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object with the result from the callback function.\r\n         *\r\n         * @see\r\n         * {@link Task},\r\n         * {@link Database#task Database.task},\r\n         * {@link Database#taskIf Database.taskIf},\r\n         * {@link Database#tx Database.tx},\r\n         * {@link TaskContext}\r\n         */ obj.txIf = function() {\n            const args = npm.pubUtils.taskArgs(arguments);\n            assert(args.options, [\n                \"tag\",\n                \"mode\",\n                \"cnd\",\n                \"reusable\"\n            ]);\n            try {\n                let cnd;\n                if (\"cnd\" in args.options) {\n                    cnd = args.options.cnd;\n                    cnd = typeof cnd === \"function\" ? cnd.call(obj, obj) : !!cnd;\n                } else {\n                    cnd = !obj.ctx || !obj.ctx.inTransaction;\n                }\n                args.options.cnd = cnd;\n                const reusable = args.options.reusable;\n                args.options.reusable = !cnd && obj.ctx && typeof reusable === \"function\" ? reusable.call(obj, obj) : !!reusable;\n            } catch (e) {\n                return $p.reject(e);\n            }\n            return taskProcessor.call(this, args, args.options.cnd);\n        };\n        // Task method;\n        // Resolves with result from the callback function;\n        function taskProcessor(params, isTX) {\n            if (typeof params.cb !== \"function\") {\n                return $p.reject(new TypeError(\"Callback function is required.\"));\n            }\n            if (params.options.reusable) {\n                return config.$npm.task.callback(obj.ctx, obj, params.cb, config);\n            }\n            const taskCtx = ctx.clone(); // task context object;\n            if (isTX) {\n                taskCtx.txLevel = taskCtx.txLevel >= 0 ? taskCtx.txLevel + 1 : 0;\n            }\n            taskCtx.inTransaction = taskCtx.txLevel >= 0;\n            taskCtx.level = taskCtx.level >= 0 ? taskCtx.level + 1 : 0;\n            taskCtx.cb = params.cb; // callback function;\n            taskCtx.mode = params.options.mode; // transaction mode;\n            if (this !== obj) {\n                taskCtx.context = this; // calling context object;\n            }\n            const tsk = new config.$npm.task.Task(taskCtx, params.options.tag, isTX, config);\n            taskCtx.taskCtx = tsk.ctx;\n            extend(taskCtx, tsk);\n            if (taskCtx.db) {\n                // reuse existing connection;\n                npm.utils.addReadProp(tsk.ctx, \"useCount\", taskCtx.db.useCount);\n                addServerVersion(tsk.ctx, taskCtx.db.client);\n                return config.$npm.task.execute(taskCtx, tsk, isTX, config);\n            }\n            // connection required;\n            return config.$npm.connect.pool(taskCtx, dbThis).then((db)=>{\n                taskCtx.connect(db);\n                npm.utils.addReadProp(tsk.ctx, \"useCount\", db.useCount);\n                addServerVersion(tsk.ctx, db.client);\n                return config.$npm.task.execute(taskCtx, tsk, isTX, config);\n            }).then((data)=>{\n                taskCtx.disconnect();\n                return data;\n            }).catch((error)=>{\n                taskCtx.disconnect();\n                return $p.reject(error);\n            });\n        }\n        function addServerVersion(target, client) {\n            // Exclude else-case from coverage, because it can only occur with Native Bindings.\n            // istanbul ignore else\n            if (client.serverVersion) {\n                npm.utils.addReadProp(target, \"serverVersion\", client.serverVersion);\n            }\n        }\n        // extending the protocol;\n        Events.extend(ctx.options, obj, ctx.dc);\n    }\n}\n// this event only happens when the connection is lost physically,\n// which cannot be tested automatically; removing from coverage:\n// istanbul ignore next\nfunction onError(err) {\n    // this client was never seen by pg-promise, which\n    // can happen if it failed to initialize\n    if (!err.client.$ctx) {\n        return;\n    }\n    const ctx = err.client.$ctx;\n    Events.error(ctx.options, err, {\n        cn: npm.utils.getSafeConnection(ctx.cn),\n        dc: ctx.dc\n    });\n}\nmodule.exports = (config)=>{\n    const npmLocal = config.$npm;\n    npmLocal.connect = npmLocal.connect || npm.connect(config);\n    npmLocal.query = npmLocal.query || npm.query(config);\n    npmLocal.task = npmLocal.task || npm.task(config);\n    return Database;\n}; /**\r\n * @callback Database.streamInitCB\r\n * @description\r\n * Stream initialization callback, used by {@link Database#stream Database.stream}.\r\n *\r\n * @param {external:Stream} stream\r\n * Stream object to initialize streaming.\r\n *\r\n * @example\r\n * const QueryStream = require('pg-query-stream');\r\n * const JSONStream = require('JSONStream');\r\n *\r\n * // you can also use pgp.as.format(query, values, options)\r\n * // to format queries properly, via pg-promise;\r\n * const qs = new QueryStream('SELECT * FROM users');\r\n *\r\n * db.stream(qs, stream => {\r\n *         // initiate streaming into the console:\r\n *         stream.pipe(JSONStream.stringify()).pipe(process.stdout);\r\n *     })\r\n *     .then(data => {\r\n *         console.log('Total rows processed:', data.processed,\r\n *           'Duration in milliseconds:', data.duration);\r\n *     })\r\n *     .catch(error => {\r\n *         // error;\r\n *     });\r\n */  /**\r\n * @external Stream\r\n * @see https://nodejs.org/api/stream.html\r\n */  /**\r\n * @external pg-pool\r\n * @alias pg-pool\r\n * @see https://github.com/brianc/node-pg-pool\r\n */  /**\r\n * @external Result\r\n * @see https://node-postgres.com/api/result\r\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/database.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/errors/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/pg-promise/lib/errors/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { QueryResultError, queryResultErrorCode } = __webpack_require__(/*! ./query-result-error */ \"(rsc)/./node_modules/pg-promise/lib/errors/query-result-error.js\");\nconst { PreparedStatementError } = __webpack_require__(/*! ./prepared-statement-error */ \"(rsc)/./node_modules/pg-promise/lib/errors/prepared-statement-error.js\");\nconst { ParameterizedQueryError } = __webpack_require__(/*! ./parameterized-query-error */ \"(rsc)/./node_modules/pg-promise/lib/errors/parameterized-query-error.js\");\nconst { QueryFileError } = __webpack_require__(/*! ./query-file-error */ \"(rsc)/./node_modules/pg-promise/lib/errors/query-file-error.js\");\n/**\r\n * @namespace errors\r\n * @description\r\n * Error types namespace, available as `pgp.errors`, before and after initializing the library.\r\n *\r\n * @property {function} PreparedStatementError\r\n * {@link errors.PreparedStatementError PreparedStatementError} class constructor.\r\n *\r\n * Represents all errors that can be reported by class {@link PreparedStatement}.\r\n *\r\n * @property {function} ParameterizedQueryError\r\n * {@link errors.ParameterizedQueryError ParameterizedQueryError} class constructor.\r\n *\r\n * Represents all errors that can be reported by class {@link ParameterizedQuery}.\r\n *\r\n * @property {function} QueryFileError\r\n * {@link errors.QueryFileError QueryFileError} class constructor.\r\n *\r\n * Represents all errors that can be reported by class {@link QueryFile}.\r\n *\r\n * @property {function} QueryResultError\r\n * {@link errors.QueryResultError QueryResultError} class constructor.\r\n *\r\n * Represents all result-specific errors from query methods.\r\n *\r\n * @property {errors.queryResultErrorCode} queryResultErrorCode\r\n * Error codes `enum` used by class {@link errors.QueryResultError QueryResultError}.\r\n *\r\n */ module.exports = {\n    QueryResultError,\n    queryResultErrorCode,\n    PreparedStatementError,\n    ParameterizedQueryError,\n    QueryFileError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvZXJyb3JzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0NBT0M7QUFFRCxNQUFNLEVBQUNBLGdCQUFnQixFQUFFQyxvQkFBb0IsRUFBQyxHQUFHQyxtQkFBT0EsQ0FBQztBQUN6RCxNQUFNLEVBQUNDLHNCQUFzQixFQUFDLEdBQUdELG1CQUFPQSxDQUFDO0FBQ3pDLE1BQU0sRUFBQ0UsdUJBQXVCLEVBQUMsR0FBR0YsbUJBQU9BLENBQUM7QUFDMUMsTUFBTSxFQUFDRyxjQUFjLEVBQUMsR0FBR0gsbUJBQU9BLENBQUM7QUFFakM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E0QkMsR0FFREksT0FBT0MsT0FBTyxHQUFHO0lBQ2JQO0lBQ0FDO0lBQ0FFO0lBQ0FDO0lBQ0FDO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odG1sLWNvbnZlcnRlci8uL25vZGVfbW9kdWxlcy9wZy1wcm9taXNlL2xpYi9lcnJvcnMvaW5kZXguanM/YjE0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgVml0YWx5IFRvbWlsb3ZcclxuICpcclxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHRvcC1sZXZlbCBkaXJlY3Rvcnkgb2YgdGhpcyBkaXN0cmlidXRpb25cclxuICogZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbi5cclxuICpcclxuICogUmVtb3ZhbCBvciBtb2RpZmljYXRpb24gb2YgdGhpcyBjb3B5cmlnaHQgbm90aWNlIGlzIHByb2hpYml0ZWQuXHJcbiAqL1xyXG5cclxuY29uc3Qge1F1ZXJ5UmVzdWx0RXJyb3IsIHF1ZXJ5UmVzdWx0RXJyb3JDb2RlfSA9IHJlcXVpcmUoJy4vcXVlcnktcmVzdWx0LWVycm9yJyk7XHJcbmNvbnN0IHtQcmVwYXJlZFN0YXRlbWVudEVycm9yfSA9IHJlcXVpcmUoJy4vcHJlcGFyZWQtc3RhdGVtZW50LWVycm9yJyk7XHJcbmNvbnN0IHtQYXJhbWV0ZXJpemVkUXVlcnlFcnJvcn0gPSByZXF1aXJlKCcuL3BhcmFtZXRlcml6ZWQtcXVlcnktZXJyb3InKTtcclxuY29uc3Qge1F1ZXJ5RmlsZUVycm9yfSA9IHJlcXVpcmUoJy4vcXVlcnktZmlsZS1lcnJvcicpO1xyXG5cclxuLyoqXHJcbiAqIEBuYW1lc3BhY2UgZXJyb3JzXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBFcnJvciB0eXBlcyBuYW1lc3BhY2UsIGF2YWlsYWJsZSBhcyBgcGdwLmVycm9yc2AsIGJlZm9yZSBhbmQgYWZ0ZXIgaW5pdGlhbGl6aW5nIHRoZSBsaWJyYXJ5LlxyXG4gKlxyXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBQcmVwYXJlZFN0YXRlbWVudEVycm9yXHJcbiAqIHtAbGluayBlcnJvcnMuUHJlcGFyZWRTdGF0ZW1lbnRFcnJvciBQcmVwYXJlZFN0YXRlbWVudEVycm9yfSBjbGFzcyBjb25zdHJ1Y3Rvci5cclxuICpcclxuICogUmVwcmVzZW50cyBhbGwgZXJyb3JzIHRoYXQgY2FuIGJlIHJlcG9ydGVkIGJ5IGNsYXNzIHtAbGluayBQcmVwYXJlZFN0YXRlbWVudH0uXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFBhcmFtZXRlcml6ZWRRdWVyeUVycm9yXHJcbiAqIHtAbGluayBlcnJvcnMuUGFyYW1ldGVyaXplZFF1ZXJ5RXJyb3IgUGFyYW1ldGVyaXplZFF1ZXJ5RXJyb3J9IGNsYXNzIGNvbnN0cnVjdG9yLlxyXG4gKlxyXG4gKiBSZXByZXNlbnRzIGFsbCBlcnJvcnMgdGhhdCBjYW4gYmUgcmVwb3J0ZWQgYnkgY2xhc3Mge0BsaW5rIFBhcmFtZXRlcml6ZWRRdWVyeX0uXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFF1ZXJ5RmlsZUVycm9yXHJcbiAqIHtAbGluayBlcnJvcnMuUXVlcnlGaWxlRXJyb3IgUXVlcnlGaWxlRXJyb3J9IGNsYXNzIGNvbnN0cnVjdG9yLlxyXG4gKlxyXG4gKiBSZXByZXNlbnRzIGFsbCBlcnJvcnMgdGhhdCBjYW4gYmUgcmVwb3J0ZWQgYnkgY2xhc3Mge0BsaW5rIFF1ZXJ5RmlsZX0uXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFF1ZXJ5UmVzdWx0RXJyb3JcclxuICoge0BsaW5rIGVycm9ycy5RdWVyeVJlc3VsdEVycm9yIFF1ZXJ5UmVzdWx0RXJyb3J9IGNsYXNzIGNvbnN0cnVjdG9yLlxyXG4gKlxyXG4gKiBSZXByZXNlbnRzIGFsbCByZXN1bHQtc3BlY2lmaWMgZXJyb3JzIGZyb20gcXVlcnkgbWV0aG9kcy5cclxuICpcclxuICogQHByb3BlcnR5IHtlcnJvcnMucXVlcnlSZXN1bHRFcnJvckNvZGV9IHF1ZXJ5UmVzdWx0RXJyb3JDb2RlXHJcbiAqIEVycm9yIGNvZGVzIGBlbnVtYCB1c2VkIGJ5IGNsYXNzIHtAbGluayBlcnJvcnMuUXVlcnlSZXN1bHRFcnJvciBRdWVyeVJlc3VsdEVycm9yfS5cclxuICpcclxuICovXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIFF1ZXJ5UmVzdWx0RXJyb3IsXHJcbiAgICBxdWVyeVJlc3VsdEVycm9yQ29kZSxcclxuICAgIFByZXBhcmVkU3RhdGVtZW50RXJyb3IsXHJcbiAgICBQYXJhbWV0ZXJpemVkUXVlcnlFcnJvcixcclxuICAgIFF1ZXJ5RmlsZUVycm9yXHJcbn07XHJcbiJdLCJuYW1lcyI6WyJRdWVyeVJlc3VsdEVycm9yIiwicXVlcnlSZXN1bHRFcnJvckNvZGUiLCJyZXF1aXJlIiwiUHJlcGFyZWRTdGF0ZW1lbnRFcnJvciIsIlBhcmFtZXRlcml6ZWRRdWVyeUVycm9yIiwiUXVlcnlGaWxlRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/errors/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/errors/parameterized-query-error.js":
/*!*************************************************************************!*\
  !*** ./node_modules/pg-promise/lib/errors/parameterized-query-error.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { QueryFileError } = __webpack_require__(/*! ./query-file-error */ \"(rsc)/./node_modules/pg-promise/lib/errors/query-file-error.js\");\nconst npm = {\n    os: __webpack_require__(/*! os */ \"os\"),\n    utils: __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\")\n};\n/**\r\n * @class errors.ParameterizedQueryError\r\n * @augments external:Error\r\n * @description\r\n * {@link errors.ParameterizedQueryError ParameterizedQueryError} class, available from the {@link errors} namespace.\r\n *\r\n * This type represents all errors that can be reported by class {@link ParameterizedQuery}, whether it is used\r\n * explicitly or implicitly (via a simple `{text, values}` object).\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `ParameterizedQueryError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {errors.QueryFileError} error\r\n * Internal {@link errors.QueryFileError} object.\r\n *\r\n * It is set only when the source {@link ParameterizedQuery} used a {@link QueryFile} which threw the error.\r\n *\r\n * @property {object} result\r\n * Resulting Parameterized Query object.\r\n *\r\n * @see ParameterizedQuery\r\n */ class ParameterizedQueryError extends Error {\n    constructor(error, pq){\n        const isQueryFileError = error instanceof QueryFileError;\n        const message = isQueryFileError ? \"Failed to initialize 'text' from a QueryFile.\" : error;\n        super(message);\n        this.name = this.constructor.name;\n        if (isQueryFileError) {\n            this.error = error;\n        }\n        this.result = pq;\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\n/**\r\n * @method errors.ParameterizedQueryError#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */ ParameterizedQueryError.prototype.toString = function(level) {\n    level = level > 0 ? parseInt(level) : 0;\n    const gap0 = npm.utils.messageGap(level), gap1 = npm.utils.messageGap(level + 1), gap2 = npm.utils.messageGap(level + 2), lines = [\n        \"ParameterizedQueryError {\",\n        gap1 + 'message: \"' + this.message + '\"',\n        gap1 + \"result: {\",\n        gap2 + \"text: \" + npm.utils.toJson(this.result.text),\n        gap2 + \"values: \" + npm.utils.toJson(this.result.values),\n        gap1 + \"}\"\n    ];\n    if (this.error) {\n        lines.push(gap1 + \"error: \" + this.error.toString(level + 1));\n    }\n    lines.push(gap0 + \"}\");\n    return lines.join(npm.os.EOL);\n};\nnpm.utils.addInspection(ParameterizedQueryError, function() {\n    return this.toString();\n});\nmodule.exports = {\n    ParameterizedQueryError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvZXJyb3JzL3BhcmFtZXRlcml6ZWQtcXVlcnktZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Q0FPQztBQUVELE1BQU0sRUFBQ0EsY0FBYyxFQUFDLEdBQUdDLG1CQUFPQSxDQUFDO0FBRWpDLE1BQU1DLE1BQU07SUFDUkMsSUFBSUYsbUJBQU9BLENBQUM7SUFDWkcsT0FBT0gsbUJBQU9BLENBQUM7QUFDbkI7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBMkJDLEdBQ0QsTUFBTUksZ0NBQWdDQztJQUNsQ0MsWUFBWUMsS0FBSyxFQUFFQyxFQUFFLENBQUU7UUFDbkIsTUFBTUMsbUJBQW1CRixpQkFBaUJSO1FBQzFDLE1BQU1XLFVBQVVELG1CQUFtQixrREFBb0RGO1FBQ3ZGLEtBQUssQ0FBQ0c7UUFDTixJQUFJLENBQUNDLElBQUksR0FBRyxJQUFJLENBQUNMLFdBQVcsQ0FBQ0ssSUFBSTtRQUNqQyxJQUFJRixrQkFBa0I7WUFDbEIsSUFBSSxDQUFDRixLQUFLLEdBQUdBO1FBQ2pCO1FBQ0EsSUFBSSxDQUFDSyxNQUFNLEdBQUdKO1FBQ2RILE1BQU1RLGlCQUFpQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUNQLFdBQVc7SUFDbEQ7QUFDSjtBQUVBOzs7Ozs7Ozs7OztDQVdDLEdBQ0RGLHdCQUF3QlUsU0FBUyxDQUFDQyxRQUFRLEdBQUcsU0FBVUMsS0FBSztJQUN4REEsUUFBUUEsUUFBUSxJQUFJQyxTQUFTRCxTQUFTO0lBQ3RDLE1BQU1FLE9BQU9qQixJQUFJRSxLQUFLLENBQUNnQixVQUFVLENBQUNILFFBQzlCSSxPQUFPbkIsSUFBSUUsS0FBSyxDQUFDZ0IsVUFBVSxDQUFDSCxRQUFRLElBQ3BDSyxPQUFPcEIsSUFBSUUsS0FBSyxDQUFDZ0IsVUFBVSxDQUFDSCxRQUFRLElBQ3BDTSxRQUFRO1FBQ0o7UUFDQUYsT0FBTyxlQUFlLElBQUksQ0FBQ1YsT0FBTyxHQUFHO1FBQ3JDVSxPQUFPO1FBQ1BDLE9BQU8sV0FBV3BCLElBQUlFLEtBQUssQ0FBQ29CLE1BQU0sQ0FBQyxJQUFJLENBQUNYLE1BQU0sQ0FBQ1ksSUFBSTtRQUNuREgsT0FBTyxhQUFhcEIsSUFBSUUsS0FBSyxDQUFDb0IsTUFBTSxDQUFDLElBQUksQ0FBQ1gsTUFBTSxDQUFDYSxNQUFNO1FBQ3ZETCxPQUFPO0tBQ1Y7SUFDTCxJQUFJLElBQUksQ0FBQ2IsS0FBSyxFQUFFO1FBQ1plLE1BQU1JLElBQUksQ0FBQ04sT0FBTyxZQUFZLElBQUksQ0FBQ2IsS0FBSyxDQUFDUSxRQUFRLENBQUNDLFFBQVE7SUFDOUQ7SUFDQU0sTUFBTUksSUFBSSxDQUFDUixPQUFPO0lBQ2xCLE9BQU9JLE1BQU1LLElBQUksQ0FBQzFCLElBQUlDLEVBQUUsQ0FBQzBCLEdBQUc7QUFDaEM7QUFFQTNCLElBQUlFLEtBQUssQ0FBQzBCLGFBQWEsQ0FBQ3pCLHlCQUF5QjtJQUM3QyxPQUFPLElBQUksQ0FBQ1csUUFBUTtBQUN4QjtBQUVBZSxPQUFPQyxPQUFPLEdBQUc7SUFBQzNCO0FBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHRtbC1jb252ZXJ0ZXIvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvZXJyb3JzL3BhcmFtZXRlcml6ZWQtcXVlcnktZXJyb3IuanM/Yzk2NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgVml0YWx5IFRvbWlsb3ZcclxuICpcclxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHRvcC1sZXZlbCBkaXJlY3Rvcnkgb2YgdGhpcyBkaXN0cmlidXRpb25cclxuICogZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbi5cclxuICpcclxuICogUmVtb3ZhbCBvciBtb2RpZmljYXRpb24gb2YgdGhpcyBjb3B5cmlnaHQgbm90aWNlIGlzIHByb2hpYml0ZWQuXHJcbiAqL1xyXG5cclxuY29uc3Qge1F1ZXJ5RmlsZUVycm9yfSA9IHJlcXVpcmUoJy4vcXVlcnktZmlsZS1lcnJvcicpO1xyXG5cclxuY29uc3QgbnBtID0ge1xyXG4gICAgb3M6IHJlcXVpcmUoJ29zJyksXHJcbiAgICB1dGlsczogcmVxdWlyZSgnLi4vdXRpbHMnKVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBjbGFzcyBlcnJvcnMuUGFyYW1ldGVyaXplZFF1ZXJ5RXJyb3JcclxuICogQGF1Z21lbnRzIGV4dGVybmFsOkVycm9yXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiB7QGxpbmsgZXJyb3JzLlBhcmFtZXRlcml6ZWRRdWVyeUVycm9yIFBhcmFtZXRlcml6ZWRRdWVyeUVycm9yfSBjbGFzcywgYXZhaWxhYmxlIGZyb20gdGhlIHtAbGluayBlcnJvcnN9IG5hbWVzcGFjZS5cclxuICpcclxuICogVGhpcyB0eXBlIHJlcHJlc2VudHMgYWxsIGVycm9ycyB0aGF0IGNhbiBiZSByZXBvcnRlZCBieSBjbGFzcyB7QGxpbmsgUGFyYW1ldGVyaXplZFF1ZXJ5fSwgd2hldGhlciBpdCBpcyB1c2VkXHJcbiAqIGV4cGxpY2l0bHkgb3IgaW1wbGljaXRseSAodmlhIGEgc2ltcGxlIGB7dGV4dCwgdmFsdWVzfWAgb2JqZWN0KS5cclxuICpcclxuICogQHByb3BlcnR5IHtzdHJpbmd9IG5hbWVcclxuICogU3RhbmRhcmQge0BsaW5rIGV4dGVybmFsOkVycm9yIEVycm9yfSBwcm9wZXJ0eSAtIGVycm9yIHR5cGUgbmFtZSA9IGBQYXJhbWV0ZXJpemVkUXVlcnlFcnJvcmAuXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBtZXNzYWdlXHJcbiAqIFN0YW5kYXJkIHtAbGluayBleHRlcm5hbDpFcnJvciBFcnJvcn0gcHJvcGVydHkgLSB0aGUgZXJyb3IgbWVzc2FnZS5cclxuICpcclxuICogQHByb3BlcnR5IHtzdHJpbmd9IHN0YWNrXHJcbiAqIFN0YW5kYXJkIHtAbGluayBleHRlcm5hbDpFcnJvciBFcnJvcn0gcHJvcGVydHkgLSB0aGUgc3RhY2sgdHJhY2UuXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7ZXJyb3JzLlF1ZXJ5RmlsZUVycm9yfSBlcnJvclxyXG4gKiBJbnRlcm5hbCB7QGxpbmsgZXJyb3JzLlF1ZXJ5RmlsZUVycm9yfSBvYmplY3QuXHJcbiAqXHJcbiAqIEl0IGlzIHNldCBvbmx5IHdoZW4gdGhlIHNvdXJjZSB7QGxpbmsgUGFyYW1ldGVyaXplZFF1ZXJ5fSB1c2VkIGEge0BsaW5rIFF1ZXJ5RmlsZX0gd2hpY2ggdGhyZXcgdGhlIGVycm9yLlxyXG4gKlxyXG4gKiBAcHJvcGVydHkge29iamVjdH0gcmVzdWx0XHJcbiAqIFJlc3VsdGluZyBQYXJhbWV0ZXJpemVkIFF1ZXJ5IG9iamVjdC5cclxuICpcclxuICogQHNlZSBQYXJhbWV0ZXJpemVkUXVlcnlcclxuICovXHJcbmNsYXNzIFBhcmFtZXRlcml6ZWRRdWVyeUVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoZXJyb3IsIHBxKSB7XHJcbiAgICAgICAgY29uc3QgaXNRdWVyeUZpbGVFcnJvciA9IGVycm9yIGluc3RhbmNlb2YgUXVlcnlGaWxlRXJyb3I7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGlzUXVlcnlGaWxlRXJyb3IgPyAnRmFpbGVkIHRvIGluaXRpYWxpemUgXFwndGV4dFxcJyBmcm9tIGEgUXVlcnlGaWxlLicgOiBlcnJvcjtcclxuICAgICAgICBzdXBlcihtZXNzYWdlKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XHJcbiAgICAgICAgaWYgKGlzUXVlcnlGaWxlRXJyb3IpIHtcclxuICAgICAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlc3VsdCA9IHBxO1xyXG4gICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQG1ldGhvZCBlcnJvcnMuUGFyYW1ldGVyaXplZFF1ZXJ5RXJyb3IjdG9TdHJpbmdcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIENyZWF0ZXMgYSB3ZWxsLWZvcm1hdHRlZCBtdWx0aS1saW5lIHN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGVycm9yLlxyXG4gKlxyXG4gKiBJdCBpcyBjYWxsZWQgYXV0b21hdGljYWxseSB3aGVuIHdyaXRpbmcgdGhlIG9iamVjdCBpbnRvIHRoZSBjb25zb2xlLlxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gW2xldmVsPTBdXHJcbiAqIE5lc3RlZCBvdXRwdXQgbGV2ZWwsIHRvIHByb3ZpZGUgdmlzdWFsIG9mZnNldC5cclxuICpcclxuICogQHJldHVybnMge3N0cmluZ31cclxuICovXHJcblBhcmFtZXRlcml6ZWRRdWVyeUVycm9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIChsZXZlbCkge1xyXG4gICAgbGV2ZWwgPSBsZXZlbCA+IDAgPyBwYXJzZUludChsZXZlbCkgOiAwO1xyXG4gICAgY29uc3QgZ2FwMCA9IG5wbS51dGlscy5tZXNzYWdlR2FwKGxldmVsKSxcclxuICAgICAgICBnYXAxID0gbnBtLnV0aWxzLm1lc3NhZ2VHYXAobGV2ZWwgKyAxKSxcclxuICAgICAgICBnYXAyID0gbnBtLnV0aWxzLm1lc3NhZ2VHYXAobGV2ZWwgKyAyKSxcclxuICAgICAgICBsaW5lcyA9IFtcclxuICAgICAgICAgICAgJ1BhcmFtZXRlcml6ZWRRdWVyeUVycm9yIHsnLFxyXG4gICAgICAgICAgICBnYXAxICsgJ21lc3NhZ2U6IFwiJyArIHRoaXMubWVzc2FnZSArICdcIicsXHJcbiAgICAgICAgICAgIGdhcDEgKyAncmVzdWx0OiB7JyxcclxuICAgICAgICAgICAgZ2FwMiArICd0ZXh0OiAnICsgbnBtLnV0aWxzLnRvSnNvbih0aGlzLnJlc3VsdC50ZXh0KSxcclxuICAgICAgICAgICAgZ2FwMiArICd2YWx1ZXM6ICcgKyBucG0udXRpbHMudG9Kc29uKHRoaXMucmVzdWx0LnZhbHVlcyksXHJcbiAgICAgICAgICAgIGdhcDEgKyAnfSdcclxuICAgICAgICBdO1xyXG4gICAgaWYgKHRoaXMuZXJyb3IpIHtcclxuICAgICAgICBsaW5lcy5wdXNoKGdhcDEgKyAnZXJyb3I6ICcgKyB0aGlzLmVycm9yLnRvU3RyaW5nKGxldmVsICsgMSkpO1xyXG4gICAgfVxyXG4gICAgbGluZXMucHVzaChnYXAwICsgJ30nKTtcclxuICAgIHJldHVybiBsaW5lcy5qb2luKG5wbS5vcy5FT0wpO1xyXG59O1xyXG5cclxubnBtLnV0aWxzLmFkZEluc3BlY3Rpb24oUGFyYW1ldGVyaXplZFF1ZXJ5RXJyb3IsIGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7UGFyYW1ldGVyaXplZFF1ZXJ5RXJyb3J9O1xyXG4iXSwibmFtZXMiOlsiUXVlcnlGaWxlRXJyb3IiLCJyZXF1aXJlIiwibnBtIiwib3MiLCJ1dGlscyIsIlBhcmFtZXRlcml6ZWRRdWVyeUVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsImVycm9yIiwicHEiLCJpc1F1ZXJ5RmlsZUVycm9yIiwibWVzc2FnZSIsIm5hbWUiLCJyZXN1bHQiLCJjYXB0dXJlU3RhY2tUcmFjZSIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwibGV2ZWwiLCJwYXJzZUludCIsImdhcDAiLCJtZXNzYWdlR2FwIiwiZ2FwMSIsImdhcDIiLCJsaW5lcyIsInRvSnNvbiIsInRleHQiLCJ2YWx1ZXMiLCJwdXNoIiwiam9pbiIsIkVPTCIsImFkZEluc3BlY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/errors/parameterized-query-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/errors/prepared-statement-error.js":
/*!************************************************************************!*\
  !*** ./node_modules/pg-promise/lib/errors/prepared-statement-error.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { QueryFileError } = __webpack_require__(/*! ./query-file-error */ \"(rsc)/./node_modules/pg-promise/lib/errors/query-file-error.js\");\nconst npm = {\n    os: __webpack_require__(/*! os */ \"os\"),\n    utils: __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\")\n};\n/**\r\n * @class errors.PreparedStatementError\r\n * @augments external:Error\r\n * @description\r\n * {@link errors.PreparedStatementError PreparedStatementError} class, available from the {@link errors} namespace.\r\n *\r\n * This type represents all errors that can be reported by class {@link PreparedStatement}, whether it is used\r\n * explicitly or implicitly (via a simple `{name, text, values}` object).\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `PreparedStatementError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {errors.QueryFileError} error\r\n * Internal {@link errors.QueryFileError} object.\r\n *\r\n * It is set only when the source {@link PreparedStatement} used a {@link QueryFile} which threw the error.\r\n *\r\n * @property {object} result\r\n * Resulting Prepared Statement object.\r\n *\r\n * @see PreparedStatement\r\n */ class PreparedStatementError extends Error {\n    constructor(error, ps){\n        const isQueryFileError = error instanceof QueryFileError;\n        const message = isQueryFileError ? \"Failed to initialize 'text' from a QueryFile.\" : error;\n        super(message);\n        this.name = this.constructor.name;\n        if (isQueryFileError) {\n            this.error = error;\n        }\n        this.result = ps;\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\n/**\r\n * @method errors.PreparedStatementError#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */ PreparedStatementError.prototype.toString = function(level) {\n    level = level > 0 ? parseInt(level) : 0;\n    const gap0 = npm.utils.messageGap(level), gap1 = npm.utils.messageGap(level + 1), gap2 = npm.utils.messageGap(level + 2), lines = [\n        \"PreparedStatementError {\",\n        gap1 + 'message: \"' + this.message + '\"',\n        gap1 + \"result: {\",\n        gap2 + \"name: \" + npm.utils.toJson(this.result.name),\n        gap2 + \"text: \" + npm.utils.toJson(this.result.text),\n        gap2 + \"values: \" + npm.utils.toJson(this.result.values),\n        gap1 + \"}\"\n    ];\n    if (this.error) {\n        lines.push(gap1 + \"error: \" + this.error.toString(level + 1));\n    }\n    lines.push(gap0 + \"}\");\n    return lines.join(npm.os.EOL);\n};\nnpm.utils.addInspection(PreparedStatementError, function() {\n    return this.toString();\n});\nmodule.exports = {\n    PreparedStatementError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvZXJyb3JzL3ByZXBhcmVkLXN0YXRlbWVudC1lcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztDQU9DO0FBRUQsTUFBTSxFQUFDQSxjQUFjLEVBQUMsR0FBR0MsbUJBQU9BLENBQUM7QUFFakMsTUFBTUMsTUFBTTtJQUNSQyxJQUFJRixtQkFBT0EsQ0FBQztJQUNaRyxPQUFPSCxtQkFBT0EsQ0FBQztBQUNuQjtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0EyQkMsR0FDRCxNQUFNSSwrQkFBK0JDO0lBQ2pDQyxZQUFZQyxLQUFLLEVBQUVDLEVBQUUsQ0FBRTtRQUNuQixNQUFNQyxtQkFBbUJGLGlCQUFpQlI7UUFDMUMsTUFBTVcsVUFBVUQsbUJBQW1CLGtEQUFvREY7UUFDdkYsS0FBSyxDQUFDRztRQUNOLElBQUksQ0FBQ0MsSUFBSSxHQUFHLElBQUksQ0FBQ0wsV0FBVyxDQUFDSyxJQUFJO1FBQ2pDLElBQUlGLGtCQUFrQjtZQUNsQixJQUFJLENBQUNGLEtBQUssR0FBR0E7UUFDakI7UUFDQSxJQUFJLENBQUNLLE1BQU0sR0FBR0o7UUFDZEgsTUFBTVEsaUJBQWlCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQ1AsV0FBVztJQUNsRDtBQUNKO0FBRUE7Ozs7Ozs7Ozs7O0NBV0MsR0FDREYsdUJBQXVCVSxTQUFTLENBQUNDLFFBQVEsR0FBRyxTQUFVQyxLQUFLO0lBQ3ZEQSxRQUFRQSxRQUFRLElBQUlDLFNBQVNELFNBQVM7SUFDdEMsTUFBTUUsT0FBT2pCLElBQUlFLEtBQUssQ0FBQ2dCLFVBQVUsQ0FBQ0gsUUFDOUJJLE9BQU9uQixJQUFJRSxLQUFLLENBQUNnQixVQUFVLENBQUNILFFBQVEsSUFDcENLLE9BQU9wQixJQUFJRSxLQUFLLENBQUNnQixVQUFVLENBQUNILFFBQVEsSUFDcENNLFFBQVE7UUFDSjtRQUNBRixPQUFPLGVBQWUsSUFBSSxDQUFDVixPQUFPLEdBQUc7UUFDckNVLE9BQU87UUFDUEMsT0FBTyxXQUFXcEIsSUFBSUUsS0FBSyxDQUFDb0IsTUFBTSxDQUFDLElBQUksQ0FBQ1gsTUFBTSxDQUFDRCxJQUFJO1FBQ25EVSxPQUFPLFdBQVdwQixJQUFJRSxLQUFLLENBQUNvQixNQUFNLENBQUMsSUFBSSxDQUFDWCxNQUFNLENBQUNZLElBQUk7UUFDbkRILE9BQU8sYUFBYXBCLElBQUlFLEtBQUssQ0FBQ29CLE1BQU0sQ0FBQyxJQUFJLENBQUNYLE1BQU0sQ0FBQ2EsTUFBTTtRQUN2REwsT0FBTztLQUNWO0lBQ0wsSUFBSSxJQUFJLENBQUNiLEtBQUssRUFBRTtRQUNaZSxNQUFNSSxJQUFJLENBQUNOLE9BQU8sWUFBWSxJQUFJLENBQUNiLEtBQUssQ0FBQ1EsUUFBUSxDQUFDQyxRQUFRO0lBQzlEO0lBQ0FNLE1BQU1JLElBQUksQ0FBQ1IsT0FBTztJQUNsQixPQUFPSSxNQUFNSyxJQUFJLENBQUMxQixJQUFJQyxFQUFFLENBQUMwQixHQUFHO0FBQ2hDO0FBRUEzQixJQUFJRSxLQUFLLENBQUMwQixhQUFhLENBQUN6Qix3QkFBd0I7SUFDNUMsT0FBTyxJQUFJLENBQUNXLFFBQVE7QUFDeEI7QUFFQWUsT0FBT0MsT0FBTyxHQUFHO0lBQUMzQjtBQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2h0bWwtY29udmVydGVyLy4vbm9kZV9tb2R1bGVzL3BnLXByb21pc2UvbGliL2Vycm9ycy9wcmVwYXJlZC1zdGF0ZW1lbnQtZXJyb3IuanM/YmNlNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgVml0YWx5IFRvbWlsb3ZcclxuICpcclxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHRvcC1sZXZlbCBkaXJlY3Rvcnkgb2YgdGhpcyBkaXN0cmlidXRpb25cclxuICogZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbi5cclxuICpcclxuICogUmVtb3ZhbCBvciBtb2RpZmljYXRpb24gb2YgdGhpcyBjb3B5cmlnaHQgbm90aWNlIGlzIHByb2hpYml0ZWQuXHJcbiAqL1xyXG5cclxuY29uc3Qge1F1ZXJ5RmlsZUVycm9yfSA9IHJlcXVpcmUoJy4vcXVlcnktZmlsZS1lcnJvcicpO1xyXG5cclxuY29uc3QgbnBtID0ge1xyXG4gICAgb3M6IHJlcXVpcmUoJ29zJyksXHJcbiAgICB1dGlsczogcmVxdWlyZSgnLi4vdXRpbHMnKVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBjbGFzcyBlcnJvcnMuUHJlcGFyZWRTdGF0ZW1lbnRFcnJvclxyXG4gKiBAYXVnbWVudHMgZXh0ZXJuYWw6RXJyb3JcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIHtAbGluayBlcnJvcnMuUHJlcGFyZWRTdGF0ZW1lbnRFcnJvciBQcmVwYXJlZFN0YXRlbWVudEVycm9yfSBjbGFzcywgYXZhaWxhYmxlIGZyb20gdGhlIHtAbGluayBlcnJvcnN9IG5hbWVzcGFjZS5cclxuICpcclxuICogVGhpcyB0eXBlIHJlcHJlc2VudHMgYWxsIGVycm9ycyB0aGF0IGNhbiBiZSByZXBvcnRlZCBieSBjbGFzcyB7QGxpbmsgUHJlcGFyZWRTdGF0ZW1lbnR9LCB3aGV0aGVyIGl0IGlzIHVzZWRcclxuICogZXhwbGljaXRseSBvciBpbXBsaWNpdGx5ICh2aWEgYSBzaW1wbGUgYHtuYW1lLCB0ZXh0LCB2YWx1ZXN9YCBvYmplY3QpLlxyXG4gKlxyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbmFtZVxyXG4gKiBTdGFuZGFyZCB7QGxpbmsgZXh0ZXJuYWw6RXJyb3IgRXJyb3J9IHByb3BlcnR5IC0gZXJyb3IgdHlwZSBuYW1lID0gYFByZXBhcmVkU3RhdGVtZW50RXJyb3JgLlxyXG4gKlxyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbWVzc2FnZVxyXG4gKiBTdGFuZGFyZCB7QGxpbmsgZXh0ZXJuYWw6RXJyb3IgRXJyb3J9IHByb3BlcnR5IC0gdGhlIGVycm9yIG1lc3NhZ2UuXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzdGFja1xyXG4gKiBTdGFuZGFyZCB7QGxpbmsgZXh0ZXJuYWw6RXJyb3IgRXJyb3J9IHByb3BlcnR5IC0gdGhlIHN0YWNrIHRyYWNlLlxyXG4gKlxyXG4gKiBAcHJvcGVydHkge2Vycm9ycy5RdWVyeUZpbGVFcnJvcn0gZXJyb3JcclxuICogSW50ZXJuYWwge0BsaW5rIGVycm9ycy5RdWVyeUZpbGVFcnJvcn0gb2JqZWN0LlxyXG4gKlxyXG4gKiBJdCBpcyBzZXQgb25seSB3aGVuIHRoZSBzb3VyY2Uge0BsaW5rIFByZXBhcmVkU3RhdGVtZW50fSB1c2VkIGEge0BsaW5rIFF1ZXJ5RmlsZX0gd2hpY2ggdGhyZXcgdGhlIGVycm9yLlxyXG4gKlxyXG4gKiBAcHJvcGVydHkge29iamVjdH0gcmVzdWx0XHJcbiAqIFJlc3VsdGluZyBQcmVwYXJlZCBTdGF0ZW1lbnQgb2JqZWN0LlxyXG4gKlxyXG4gKiBAc2VlIFByZXBhcmVkU3RhdGVtZW50XHJcbiAqL1xyXG5jbGFzcyBQcmVwYXJlZFN0YXRlbWVudEVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoZXJyb3IsIHBzKSB7XHJcbiAgICAgICAgY29uc3QgaXNRdWVyeUZpbGVFcnJvciA9IGVycm9yIGluc3RhbmNlb2YgUXVlcnlGaWxlRXJyb3I7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGlzUXVlcnlGaWxlRXJyb3IgPyAnRmFpbGVkIHRvIGluaXRpYWxpemUgXFwndGV4dFxcJyBmcm9tIGEgUXVlcnlGaWxlLicgOiBlcnJvcjtcclxuICAgICAgICBzdXBlcihtZXNzYWdlKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XHJcbiAgICAgICAgaWYgKGlzUXVlcnlGaWxlRXJyb3IpIHtcclxuICAgICAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlc3VsdCA9IHBzO1xyXG4gICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQG1ldGhvZCBlcnJvcnMuUHJlcGFyZWRTdGF0ZW1lbnRFcnJvciN0b1N0cmluZ1xyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQ3JlYXRlcyBhIHdlbGwtZm9ybWF0dGVkIG11bHRpLWxpbmUgc3RyaW5nIHRoYXQgcmVwcmVzZW50cyB0aGUgZXJyb3IuXHJcbiAqXHJcbiAqIEl0IGlzIGNhbGxlZCBhdXRvbWF0aWNhbGx5IHdoZW4gd3JpdGluZyB0aGUgb2JqZWN0IGludG8gdGhlIGNvbnNvbGUuXHJcbiAqXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGV2ZWw9MF1cclxuICogTmVzdGVkIG91dHB1dCBsZXZlbCwgdG8gcHJvdmlkZSB2aXN1YWwgb2Zmc2V0LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gKi9cclxuUHJlcGFyZWRTdGF0ZW1lbnRFcnJvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAobGV2ZWwpIHtcclxuICAgIGxldmVsID0gbGV2ZWwgPiAwID8gcGFyc2VJbnQobGV2ZWwpIDogMDtcclxuICAgIGNvbnN0IGdhcDAgPSBucG0udXRpbHMubWVzc2FnZUdhcChsZXZlbCksXHJcbiAgICAgICAgZ2FwMSA9IG5wbS51dGlscy5tZXNzYWdlR2FwKGxldmVsICsgMSksXHJcbiAgICAgICAgZ2FwMiA9IG5wbS51dGlscy5tZXNzYWdlR2FwKGxldmVsICsgMiksXHJcbiAgICAgICAgbGluZXMgPSBbXHJcbiAgICAgICAgICAgICdQcmVwYXJlZFN0YXRlbWVudEVycm9yIHsnLFxyXG4gICAgICAgICAgICBnYXAxICsgJ21lc3NhZ2U6IFwiJyArIHRoaXMubWVzc2FnZSArICdcIicsXHJcbiAgICAgICAgICAgIGdhcDEgKyAncmVzdWx0OiB7JyxcclxuICAgICAgICAgICAgZ2FwMiArICduYW1lOiAnICsgbnBtLnV0aWxzLnRvSnNvbih0aGlzLnJlc3VsdC5uYW1lKSxcclxuICAgICAgICAgICAgZ2FwMiArICd0ZXh0OiAnICsgbnBtLnV0aWxzLnRvSnNvbih0aGlzLnJlc3VsdC50ZXh0KSxcclxuICAgICAgICAgICAgZ2FwMiArICd2YWx1ZXM6ICcgKyBucG0udXRpbHMudG9Kc29uKHRoaXMucmVzdWx0LnZhbHVlcyksXHJcbiAgICAgICAgICAgIGdhcDEgKyAnfSdcclxuICAgICAgICBdO1xyXG4gICAgaWYgKHRoaXMuZXJyb3IpIHtcclxuICAgICAgICBsaW5lcy5wdXNoKGdhcDEgKyAnZXJyb3I6ICcgKyB0aGlzLmVycm9yLnRvU3RyaW5nKGxldmVsICsgMSkpO1xyXG4gICAgfVxyXG4gICAgbGluZXMucHVzaChnYXAwICsgJ30nKTtcclxuICAgIHJldHVybiBsaW5lcy5qb2luKG5wbS5vcy5FT0wpO1xyXG59O1xyXG5cclxubnBtLnV0aWxzLmFkZEluc3BlY3Rpb24oUHJlcGFyZWRTdGF0ZW1lbnRFcnJvciwgZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtQcmVwYXJlZFN0YXRlbWVudEVycm9yfTtcclxuIl0sIm5hbWVzIjpbIlF1ZXJ5RmlsZUVycm9yIiwicmVxdWlyZSIsIm5wbSIsIm9zIiwidXRpbHMiLCJQcmVwYXJlZFN0YXRlbWVudEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsImVycm9yIiwicHMiLCJpc1F1ZXJ5RmlsZUVycm9yIiwibWVzc2FnZSIsIm5hbWUiLCJyZXN1bHQiLCJjYXB0dXJlU3RhY2tUcmFjZSIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwibGV2ZWwiLCJwYXJzZUludCIsImdhcDAiLCJtZXNzYWdlR2FwIiwiZ2FwMSIsImdhcDIiLCJsaW5lcyIsInRvSnNvbiIsInRleHQiLCJ2YWx1ZXMiLCJwdXNoIiwiam9pbiIsIkVPTCIsImFkZEluc3BlY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/errors/prepared-statement-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/errors/query-file-error.js":
/*!****************************************************************!*\
  !*** ./node_modules/pg-promise/lib/errors/query-file-error.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst npm = {\n    os: __webpack_require__(/*! os */ \"os\"),\n    utils: __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\"),\n    minify: __webpack_require__(/*! pg-minify */ \"(rsc)/./node_modules/pg-minify/lib/index.js\")\n};\n/**\r\n * @class errors.QueryFileError\r\n * @augments external:Error\r\n * @description\r\n * {@link errors.QueryFileError QueryFileError} class, available from the {@link errors} namespace.\r\n *\r\n * This type represents all errors related to {@link QueryFile}.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `QueryFileError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {string} file\r\n * File path/name that was passed into the {@link QueryFile} constructor.\r\n *\r\n * @property {object} options\r\n * Set of options that was used by the {@link QueryFile} object.\r\n *\r\n * @property {SQLParsingError} error\r\n * Internal $[SQLParsingError] object.\r\n *\r\n * It is set only when the error was thrown by $[pg-minify] while parsing the SQL file.\r\n *\r\n * @see QueryFile\r\n *\r\n */ class QueryFileError extends Error {\n    constructor(error, qf){\n        const isSqlError = error instanceof npm.minify.SQLParsingError;\n        const message = isSqlError ? \"Failed to parse the SQL.\" : error.message;\n        super(message);\n        this.name = this.constructor.name;\n        if (isSqlError) {\n            this.error = error;\n        }\n        this.file = qf.file;\n        this.options = qf.options;\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\n/**\r\n * @method errors.QueryFileError#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */ QueryFileError.prototype.toString = function(level) {\n    level = level > 0 ? parseInt(level) : 0;\n    const gap0 = npm.utils.messageGap(level), gap1 = npm.utils.messageGap(level + 1), lines = [\n        \"QueryFileError {\",\n        gap1 + 'message: \"' + this.message + '\"',\n        gap1 + \"options: \" + npm.utils.toJson(this.options),\n        gap1 + 'file: \"' + this.file + '\"'\n    ];\n    if (this.error) {\n        lines.push(gap1 + \"error: \" + this.error.toString(level + 1));\n    }\n    lines.push(gap0 + \"}\");\n    return lines.join(npm.os.EOL);\n};\nnpm.utils.addInspection(QueryFileError, function() {\n    return this.toString();\n});\nmodule.exports = {\n    QueryFileError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvZXJyb3JzL3F1ZXJ5LWZpbGUtZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Q0FPQztBQUVELE1BQU1BLE1BQU07SUFDUkMsSUFBSUMsbUJBQU9BLENBQUM7SUFDWkMsT0FBT0QsbUJBQU9BLENBQUM7SUFDZkUsUUFBUUYsbUJBQU9BLENBQUM7QUFDcEI7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBOEJDLEdBQ0QsTUFBTUcsdUJBQXVCQztJQUN6QkMsWUFBWUMsS0FBSyxFQUFFQyxFQUFFLENBQUU7UUFDbkIsTUFBTUMsYUFBYUYsaUJBQWlCUixJQUFJSSxNQUFNLENBQUNPLGVBQWU7UUFDOUQsTUFBTUMsVUFBVUYsYUFBYSw2QkFBNkJGLE1BQU1JLE9BQU87UUFDdkUsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0MsSUFBSSxHQUFHLElBQUksQ0FBQ04sV0FBVyxDQUFDTSxJQUFJO1FBQ2pDLElBQUlILFlBQVk7WUFDWixJQUFJLENBQUNGLEtBQUssR0FBR0E7UUFDakI7UUFDQSxJQUFJLENBQUNNLElBQUksR0FBR0wsR0FBR0ssSUFBSTtRQUNuQixJQUFJLENBQUNDLE9BQU8sR0FBR04sR0FBR00sT0FBTztRQUN6QlQsTUFBTVUsaUJBQWlCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQ1QsV0FBVztJQUNsRDtBQUNKO0FBRUE7Ozs7Ozs7Ozs7O0NBV0MsR0FDREYsZUFBZVksU0FBUyxDQUFDQyxRQUFRLEdBQUcsU0FBVUMsS0FBSztJQUMvQ0EsUUFBUUEsUUFBUSxJQUFJQyxTQUFTRCxTQUFTO0lBQ3RDLE1BQU1FLE9BQU9yQixJQUFJRyxLQUFLLENBQUNtQixVQUFVLENBQUNILFFBQzlCSSxPQUFPdkIsSUFBSUcsS0FBSyxDQUFDbUIsVUFBVSxDQUFDSCxRQUFRLElBQ3BDSyxRQUFRO1FBQ0o7UUFDQUQsT0FBTyxlQUFlLElBQUksQ0FBQ1gsT0FBTyxHQUFHO1FBQ3JDVyxPQUFPLGNBQWN2QixJQUFJRyxLQUFLLENBQUNzQixNQUFNLENBQUMsSUFBSSxDQUFDVixPQUFPO1FBQ2xEUSxPQUFPLFlBQVksSUFBSSxDQUFDVCxJQUFJLEdBQUc7S0FDbEM7SUFDTCxJQUFJLElBQUksQ0FBQ04sS0FBSyxFQUFFO1FBQ1pnQixNQUFNRSxJQUFJLENBQUNILE9BQU8sWUFBWSxJQUFJLENBQUNmLEtBQUssQ0FBQ1UsUUFBUSxDQUFDQyxRQUFRO0lBQzlEO0lBQ0FLLE1BQU1FLElBQUksQ0FBQ0wsT0FBTztJQUNsQixPQUFPRyxNQUFNRyxJQUFJLENBQUMzQixJQUFJQyxFQUFFLENBQUMyQixHQUFHO0FBQ2hDO0FBRUE1QixJQUFJRyxLQUFLLENBQUMwQixhQUFhLENBQUN4QixnQkFBZ0I7SUFDcEMsT0FBTyxJQUFJLENBQUNhLFFBQVE7QUFDeEI7QUFFQVksT0FBT0MsT0FBTyxHQUFHO0lBQUMxQjtBQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHRtbC1jb252ZXJ0ZXIvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvZXJyb3JzL3F1ZXJ5LWZpbGUtZXJyb3IuanM/MjRmNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgVml0YWx5IFRvbWlsb3ZcclxuICpcclxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHRvcC1sZXZlbCBkaXJlY3Rvcnkgb2YgdGhpcyBkaXN0cmlidXRpb25cclxuICogZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbi5cclxuICpcclxuICogUmVtb3ZhbCBvciBtb2RpZmljYXRpb24gb2YgdGhpcyBjb3B5cmlnaHQgbm90aWNlIGlzIHByb2hpYml0ZWQuXHJcbiAqL1xyXG5cclxuY29uc3QgbnBtID0ge1xyXG4gICAgb3M6IHJlcXVpcmUoJ29zJyksXHJcbiAgICB1dGlsczogcmVxdWlyZSgnLi4vdXRpbHMnKSxcclxuICAgIG1pbmlmeTogcmVxdWlyZSgncGctbWluaWZ5JylcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAY2xhc3MgZXJyb3JzLlF1ZXJ5RmlsZUVycm9yXHJcbiAqIEBhdWdtZW50cyBleHRlcm5hbDpFcnJvclxyXG4gKiBAZGVzY3JpcHRpb25cclxuICoge0BsaW5rIGVycm9ycy5RdWVyeUZpbGVFcnJvciBRdWVyeUZpbGVFcnJvcn0gY2xhc3MsIGF2YWlsYWJsZSBmcm9tIHRoZSB7QGxpbmsgZXJyb3JzfSBuYW1lc3BhY2UuXHJcbiAqXHJcbiAqIFRoaXMgdHlwZSByZXByZXNlbnRzIGFsbCBlcnJvcnMgcmVsYXRlZCB0byB7QGxpbmsgUXVlcnlGaWxlfS5cclxuICpcclxuICogQHByb3BlcnR5IHtzdHJpbmd9IG5hbWVcclxuICogU3RhbmRhcmQge0BsaW5rIGV4dGVybmFsOkVycm9yIEVycm9yfSBwcm9wZXJ0eSAtIGVycm9yIHR5cGUgbmFtZSA9IGBRdWVyeUZpbGVFcnJvcmAuXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBtZXNzYWdlXHJcbiAqIFN0YW5kYXJkIHtAbGluayBleHRlcm5hbDpFcnJvciBFcnJvcn0gcHJvcGVydHkgLSB0aGUgZXJyb3IgbWVzc2FnZS5cclxuICpcclxuICogQHByb3BlcnR5IHtzdHJpbmd9IHN0YWNrXHJcbiAqIFN0YW5kYXJkIHtAbGluayBleHRlcm5hbDpFcnJvciBFcnJvcn0gcHJvcGVydHkgLSB0aGUgc3RhY2sgdHJhY2UuXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBmaWxlXHJcbiAqIEZpbGUgcGF0aC9uYW1lIHRoYXQgd2FzIHBhc3NlZCBpbnRvIHRoZSB7QGxpbmsgUXVlcnlGaWxlfSBjb25zdHJ1Y3Rvci5cclxuICpcclxuICogQHByb3BlcnR5IHtvYmplY3R9IG9wdGlvbnNcclxuICogU2V0IG9mIG9wdGlvbnMgdGhhdCB3YXMgdXNlZCBieSB0aGUge0BsaW5rIFF1ZXJ5RmlsZX0gb2JqZWN0LlxyXG4gKlxyXG4gKiBAcHJvcGVydHkge1NRTFBhcnNpbmdFcnJvcn0gZXJyb3JcclxuICogSW50ZXJuYWwgJFtTUUxQYXJzaW5nRXJyb3JdIG9iamVjdC5cclxuICpcclxuICogSXQgaXMgc2V0IG9ubHkgd2hlbiB0aGUgZXJyb3Igd2FzIHRocm93biBieSAkW3BnLW1pbmlmeV0gd2hpbGUgcGFyc2luZyB0aGUgU1FMIGZpbGUuXHJcbiAqXHJcbiAqIEBzZWUgUXVlcnlGaWxlXHJcbiAqXHJcbiAqL1xyXG5jbGFzcyBRdWVyeUZpbGVFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGVycm9yLCBxZikge1xyXG4gICAgICAgIGNvbnN0IGlzU3FsRXJyb3IgPSBlcnJvciBpbnN0YW5jZW9mIG5wbS5taW5pZnkuU1FMUGFyc2luZ0Vycm9yO1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBpc1NxbEVycm9yID8gJ0ZhaWxlZCB0byBwYXJzZSB0aGUgU1FMLicgOiBlcnJvci5tZXNzYWdlO1xyXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcclxuICAgICAgICBpZiAoaXNTcWxFcnJvcikge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZmlsZSA9IHFmLmZpbGU7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gcWYub3B0aW9ucztcclxuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEBtZXRob2QgZXJyb3JzLlF1ZXJ5RmlsZUVycm9yI3RvU3RyaW5nXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBDcmVhdGVzIGEgd2VsbC1mb3JtYXR0ZWQgbXVsdGktbGluZSBzdHJpbmcgdGhhdCByZXByZXNlbnRzIHRoZSBlcnJvci5cclxuICpcclxuICogSXQgaXMgY2FsbGVkIGF1dG9tYXRpY2FsbHkgd2hlbiB3cml0aW5nIHRoZSBvYmplY3QgaW50byB0aGUgY29uc29sZS5cclxuICpcclxuICogQHBhcmFtIHtudW1iZXJ9IFtsZXZlbD0wXVxyXG4gKiBOZXN0ZWQgb3V0cHV0IGxldmVsLCB0byBwcm92aWRlIHZpc3VhbCBvZmZzZXQuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAqL1xyXG5RdWVyeUZpbGVFcnJvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAobGV2ZWwpIHtcclxuICAgIGxldmVsID0gbGV2ZWwgPiAwID8gcGFyc2VJbnQobGV2ZWwpIDogMDtcclxuICAgIGNvbnN0IGdhcDAgPSBucG0udXRpbHMubWVzc2FnZUdhcChsZXZlbCksXHJcbiAgICAgICAgZ2FwMSA9IG5wbS51dGlscy5tZXNzYWdlR2FwKGxldmVsICsgMSksXHJcbiAgICAgICAgbGluZXMgPSBbXHJcbiAgICAgICAgICAgICdRdWVyeUZpbGVFcnJvciB7JyxcclxuICAgICAgICAgICAgZ2FwMSArICdtZXNzYWdlOiBcIicgKyB0aGlzLm1lc3NhZ2UgKyAnXCInLFxyXG4gICAgICAgICAgICBnYXAxICsgJ29wdGlvbnM6ICcgKyBucG0udXRpbHMudG9Kc29uKHRoaXMub3B0aW9ucyksXHJcbiAgICAgICAgICAgIGdhcDEgKyAnZmlsZTogXCInICsgdGhpcy5maWxlICsgJ1wiJ1xyXG4gICAgICAgIF07XHJcbiAgICBpZiAodGhpcy5lcnJvcikge1xyXG4gICAgICAgIGxpbmVzLnB1c2goZ2FwMSArICdlcnJvcjogJyArIHRoaXMuZXJyb3IudG9TdHJpbmcobGV2ZWwgKyAxKSk7XHJcbiAgICB9XHJcbiAgICBsaW5lcy5wdXNoKGdhcDAgKyAnfScpO1xyXG4gICAgcmV0dXJuIGxpbmVzLmpvaW4obnBtLm9zLkVPTCk7XHJcbn07XHJcblxyXG5ucG0udXRpbHMuYWRkSW5zcGVjdGlvbihRdWVyeUZpbGVFcnJvciwgZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtRdWVyeUZpbGVFcnJvcn07XHJcbiJdLCJuYW1lcyI6WyJucG0iLCJvcyIsInJlcXVpcmUiLCJ1dGlscyIsIm1pbmlmeSIsIlF1ZXJ5RmlsZUVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsImVycm9yIiwicWYiLCJpc1NxbEVycm9yIiwiU1FMUGFyc2luZ0Vycm9yIiwibWVzc2FnZSIsIm5hbWUiLCJmaWxlIiwib3B0aW9ucyIsImNhcHR1cmVTdGFja1RyYWNlIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJsZXZlbCIsInBhcnNlSW50IiwiZ2FwMCIsIm1lc3NhZ2VHYXAiLCJnYXAxIiwibGluZXMiLCJ0b0pzb24iLCJwdXNoIiwiam9pbiIsIkVPTCIsImFkZEluc3BlY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/errors/query-file-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/errors/query-result-error.js":
/*!******************************************************************!*\
  !*** ./node_modules/pg-promise/lib/errors/query-result-error.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst npm = {\n    os: __webpack_require__(/*! os */ \"os\"),\n    utils: __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\"),\n    text: __webpack_require__(/*! ../text */ \"(rsc)/./node_modules/pg-promise/lib/text.js\")\n};\n/**\r\n * @enum {number}\r\n * @alias errors.queryResultErrorCode\r\n * @readonly\r\n * @description\r\n * `queryResultErrorCode` enumerator, available from the {@link errors} namespace.\r\n *\r\n * Represents an integer code for each type of error supported by type {@link errors.QueryResultError}.\r\n *\r\n * @see {@link errors.QueryResultError}\r\n */ const queryResultErrorCode = {\n    /** No data returned from the query. */ noData: 0,\n    /** No return data was expected. */ notEmpty: 1,\n    /** Multiple rows were not expected. */ multiple: 2\n};\nconst errorMessages = [\n    {\n        name: \"noData\",\n        message: npm.text.noData\n    },\n    {\n        name: \"notEmpty\",\n        message: npm.text.notEmpty\n    },\n    {\n        name: \"multiple\",\n        message: npm.text.multiple\n    }\n];\n/**\r\n * @class errors.QueryResultError\r\n * @augments external:Error\r\n * @description\r\n *\r\n * This error is specified as the rejection reason for all result-specific methods when the result doesn't match\r\n * the expectation, i.e. when a query result doesn't match its Query Result Mask - the value of {@link queryResult}.\r\n *\r\n * The error applies to the result from the following methods: {@link Database#none none},\r\n * {@link Database#one one}, {@link Database#oneOrNone oneOrNone} and {@link Database#many many}.\r\n *\r\n * Supported errors:\r\n *\r\n * - `No return data was expected.`, method {@link Database#none none}\r\n * - `No data returned from the query.`, methods {@link Database#one one} and {@link Database#many many}\r\n * - `Multiple rows were not expected.`, methods {@link Database#one one} and {@link Database#oneOrNone oneOrNone}\r\n *\r\n * Like any other error, this one is notified with through the global event {@link event:error error}.\r\n *\r\n * The type is available from the {@link errors} namespace.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `QueryResultError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {object} result\r\n * The original $[Result] object that was received.\r\n *\r\n * @property {number} received\r\n * Total number of rows received. It is simply the value of `result.rows.length`.\r\n *\r\n * @property {number} code\r\n * Error code - {@link errors.queryResultErrorCode queryResultErrorCode} value.\r\n *\r\n * @property {string} query\r\n * Query that was executed.\r\n *\r\n * Normally, it is the query already formatted with values, if there were any.\r\n * But if you are using initialization option `pgFormatting`, then the query string is before formatting.\r\n *\r\n * @property {*} values\r\n * Values passed in as query parameters. Available only when initialization option `pgFormatting` is used.\r\n * Otherwise, the values are within the pre-formatted `query` string.\r\n *\r\n * @example\r\n *\r\n * const QueryResultError = pgp.errors.QueryResultError;\r\n * const qrec = pgp.errors.queryResultErrorCode;\r\n *\r\n * const initOptions = {\r\n *\r\n *   // pg-promise initialization options...\r\n *\r\n *   error(err, e) {\r\n *       if (err instanceof QueryResultError) {\r\n *           // A query returned unexpected number of records, and thus rejected;\r\n *           \r\n *           // we can check the error code, if we want specifics:\r\n *           if(err.code === qrec.noData) {\r\n *               // expected some data, but received none;\r\n *           }\r\n *\r\n *           // If you write QueryResultError into the console,\r\n *           // you will get a nicely formatted output.\r\n *\r\n *           console.log(err);\r\n *           \r\n *           // See also: err, e.query, e.params, etc.\r\n *       }\r\n *   }\r\n * };\r\n *\r\n * @see\r\n * {@link queryResult}, {@link Database#none none}, {@link Database#one one},\r\n * {@link Database#oneOrNone oneOrNone}, {@link Database#many many}\r\n *\r\n */ class QueryResultError extends Error {\n    constructor(code, result, query, values){\n        const message = errorMessages[code].message;\n        super(message);\n        this.name = this.constructor.name;\n        this.code = code;\n        this.result = result;\n        this.query = query;\n        this.values = values;\n        this.received = result.rows.length;\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\n/**\r\n * @method errors.QueryResultError#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */ QueryResultError.prototype.toString = function(level) {\n    level = level > 0 ? parseInt(level) : 0;\n    const gap0 = npm.utils.messageGap(level), gap1 = npm.utils.messageGap(level + 1), lines = [\n        \"QueryResultError {\",\n        gap1 + \"code: queryResultErrorCode.\" + errorMessages[this.code].name,\n        gap1 + 'message: \"' + this.message + '\"',\n        gap1 + \"received: \" + this.received,\n        gap1 + \"query: \" + (typeof this.query === \"string\" ? '\"' + this.query + '\"' : npm.utils.toJson(this.query))\n    ];\n    if (this.values !== undefined) {\n        lines.push(gap1 + \"values: \" + npm.utils.toJson(this.values));\n    }\n    lines.push(gap0 + \"}\");\n    return lines.join(npm.os.EOL);\n};\nnpm.utils.addInspection(QueryResultError, function() {\n    return this.toString();\n});\nmodule.exports = {\n    QueryResultError,\n    queryResultErrorCode\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/errors/query-result-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/events.js":
/*!***********************************************!*\
  !*** ./node_modules/pg-promise/lib/events.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { ColorConsole } = __webpack_require__(/*! ./utils/color */ \"(rsc)/./node_modules/pg-promise/lib/utils/color.js\");\nconst npm = {\n    main: __webpack_require__(/*! ./ */ \"(rsc)/./node_modules/pg-promise/lib/index.js\"),\n    utils: __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\")\n};\n/////////////////////////////////\n// Client notification helpers;\nclass Events {\n    /**\r\n     * @event connect\r\n     * @description\r\n     * Global notification of acquiring a new database connection from the connection pool, i.e. a virtual connection.\r\n     *\r\n     * However, for direct calls to method {@link Database#connect Database.connect} with parameter `{direct: true}`,\r\n     * this event represents a physical connection.\r\n     *\r\n     * The library will suppress any error thrown by the handler and write it into the console.\r\n     *\r\n     * @param {{}} e Event Properties\r\n     *\r\n     * @param {external:Client} e.client\r\n     * $[pg.Client] object that represents the connection.\r\n     *\r\n     * @param {*} e.dc\r\n     * Database Context that was used when creating the database object (see {@link Database}).\r\n     *\r\n     * @param {number} e.useCount\r\n     * Number of times the connection has been previously used, starting with 0, for a freshly\r\n     * allocated physical connection.\r\n     *\r\n     * This parameter is always 0 for direct connections (created by calling {@link Database#connect Database.connect}\r\n     * with parameter `{direct: true}`).\r\n     *\r\n     * @example\r\n     *\r\n     * const initOptions = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     connect(e) {\r\n     *         const cp = e.client.connectionParameters;\r\n     *         console.log('Connected to database:', cp.database);\r\n     *     }\r\n     *\r\n     * };\r\n     */ static connect(ctx, client, useCount) {\n        if (typeof ctx.options.connect === \"function\") {\n            try {\n                ctx.options.connect({\n                    client,\n                    dc: ctx.dc,\n                    useCount\n                });\n            } catch (e) {\n                // have to silence errors here;\n                // cannot allow unhandled errors while connecting to the database,\n                // as it will break the connection logic;\n                Events.unexpected(\"connect\", e);\n            }\n        }\n    }\n    /**\r\n     * @event disconnect\r\n     * @description\r\n     * Global notification of releasing a database connection back to the connection pool, i.e. releasing the virtual connection.\r\n     *\r\n     * However, when releasing a direct connection (created by calling {@link Database#connect Database.connect} with parameter\r\n     * `{direct: true}`), this event represents a physical disconnection.\r\n     *\r\n     * The library will suppress any error thrown by the handler and write it into the console.\r\n     *\r\n     * @param {{}} e Event Properties\r\n     *\r\n     * @param {external:Client} e.client - $[pg.Client] object that represents connection with the database.\r\n     *\r\n     * @param {*} e.dc - Database Context that was used when creating the database object (see {@link Database}).\r\n     *\r\n     * @example\r\n     *\r\n     * const initOptions = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     disconnect(e) {\r\n     *        const cp = e.client.connectionParameters;\r\n     *        console.log('Disconnecting from database:', cp.database);\r\n     *     }\r\n     *\r\n     * };\r\n     */ static disconnect(ctx, client) {\n        if (typeof ctx.options.disconnect === \"function\") {\n            try {\n                ctx.options.disconnect({\n                    client,\n                    dc: ctx.dc\n                });\n            } catch (e) {\n                // have to silence errors here;\n                // cannot allow unhandled errors while disconnecting from the database,\n                // as it will break the disconnection logic;\n                Events.unexpected(\"disconnect\", e);\n            }\n        }\n    }\n    /**\r\n     * @event query\r\n     * @description\r\n     *\r\n     * Global notification of a query that's about to execute.\r\n     *\r\n     * Notification happens just before the query execution. And if the handler throws an error, the query execution\r\n     * will be rejected with that error.\r\n     *\r\n     * @param {EventContext} e\r\n     * Event Context Object.\r\n     *\r\n     * @example\r\n     *\r\n     * const initOptions = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     query(e) {\r\n     *         console.log('QUERY:', e.query);\r\n     *     }\r\n     * };\r\n     */ static query(options, context) {\n        if (typeof options.query === \"function\") {\n            try {\n                options.query(context);\n            } catch (e) {\n                // throwing an error during event 'query'\n                // will result in a reject for the request.\n                return e instanceof Error ? e : new npm.utils.InternalError(e);\n            }\n        }\n    }\n    /**\r\n     * @event receive\r\n     * @description\r\n     * Global notification of any data received from the database, coming from a regular query or from a stream.\r\n     *\r\n     * The event is fired before the data reaches the client, and it serves two purposes:\r\n     *  - Providing selective data logging for debugging;\r\n     *  - Pre-processing data before it reaches the client.\r\n     *\r\n     * **NOTES:**\r\n     * - If you alter the size of `data` directly or through the `result` object, it may affect `QueryResultMask`\r\n     *   validation for regular queries, which is executed right after.\r\n     * - Any data pre-processing needs to be fast here, to avoid performance penalties.\r\n     * - If the event handler throws an error, the original request will be rejected with that error.\r\n     *\r\n     * For methods {@link Database#multi Database.multi} and {@link Database#multiResult Database.multiResult},\r\n     * this event is called for every result that's returned. And for method {@link Database#stream Database.stream},\r\n     * the event occurs for every record.\r\n     *\r\n     * @param {{}} e Event Properties\r\n     *\r\n     * @param {Array<Object>} e.data\r\n     * Array of received objects/rows.\r\n     *\r\n     * If any of those objects are modified during notification, the client will receive the modified data.\r\n     *\r\n     * @param {external:Result} e.result\r\n     * - Original $[Result] object, if the data is from a non-stream query, in which case `data = result.rows`.\r\n     *   For single-query requests, $[Result] object is extended with property `duration` - number of milliseconds\r\n     *   it took to send the query, execute it and get the result back.\r\n     * - It is `undefined` when the data comes from a stream (method {@link Database#stream Database.stream}).\r\n     *\r\n     * @param {EventContext} e.ctx\r\n     * Event Context Object.\r\n     *\r\n     * @example\r\n     *\r\n     * // Example below shows the fastest way to camelize all column names.\r\n     * // NOTE: The example does not do processing for nested JSON objects.\r\n     *\r\n     * const initOptions = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     receive(e) {\r\n     *         camelizeColumns(e.data);\r\n     *     }\r\n     * };\r\n     *\r\n     * function camelizeColumns(data) {\r\n     *     const tmp = data[0];\r\n     *     for (const prop in tmp) {\r\n     *         const camel = pgp.utils.camelize(prop);\r\n     *         if (!(camel in tmp)) {\r\n     *             for (let i = 0; i < data.length; i++) {\r\n     *                 const d = data[i];\r\n     *                 d[camel] = d[prop];\r\n     *                 delete d[prop];\r\n     *             }\r\n     *         }\r\n     *     }\r\n     * }\r\n     */ static receive(options, data, result, ctx) {\n        if (typeof options.receive === \"function\") {\n            try {\n                options.receive({\n                    data,\n                    result,\n                    ctx\n                });\n            } catch (e) {\n                // throwing an error during event 'receive'\n                // will result in a reject for the request.\n                return e instanceof Error ? e : new npm.utils.InternalError(e);\n            }\n        }\n    }\n    /**\r\n     * @event task\r\n     * @description\r\n     * Global notification of a task start / finish events, as executed via\r\n     * {@link Database#task Database.task} or {@link Database#taskIf Database.taskIf}.\r\n     *\r\n     * The library will suppress any error thrown by the handler and write it into the console.\r\n     *\r\n     * @param {EventContext} e\r\n     * Event Context Object.\r\n     *\r\n     * @example\r\n     *\r\n     * const initOptions = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     task(e) {\r\n     *         if (e.ctx.finish) {\r\n     *             // this is a task->finish event;\r\n     *             console.log('Duration:', e.ctx.duration);\r\n     *             if (e.ctx.success) {\r\n     *                 // e.ctx.result = resolved data;\r\n     *             } else {\r\n     *                 // e.ctx.result = error/rejection reason;\r\n     *             }\r\n     *         } else {\r\n     *             // this is a task->start event;\r\n     *             console.log('Start Time:', e.ctx.start);\r\n     *         }\r\n     *     }\r\n     * };\r\n     *\r\n     */ static task(options, context) {\n        if (typeof options.task === \"function\") {\n            try {\n                options.task(context);\n            } catch (e) {\n                // silencing the error, to avoid breaking the task;\n                Events.unexpected(\"task\", e);\n            }\n        }\n    }\n    /**\r\n     * @event transact\r\n     * @description\r\n     * Global notification of a transaction start / finish events, as executed via {@link Database#tx Database.tx}\r\n     * or {@link Database#txIf Database.txIf}.\r\n     *\r\n     * The library will suppress any error thrown by the handler and write it into the console.\r\n     *\r\n     * @param {EventContext} e\r\n     * Event Context Object.\r\n     *\r\n     * @example\r\n     *\r\n     * const initOptions = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     transact(e) {\r\n     *         if (e.ctx.finish) {\r\n     *             // this is a transaction->finish event;\r\n     *             console.log('Duration:', e.ctx.duration);\r\n     *             if (e.ctx.success) {\r\n     *                 // e.ctx.result = resolved data;\r\n     *             } else {\r\n     *                 // e.ctx.result = error/rejection reason;\r\n     *             }\r\n     *         } else {\r\n     *             // this is a transaction->start event;\r\n     *             console.log('Start Time:', e.ctx.start);\r\n     *         }\r\n     *     }\r\n     * };\r\n     *\r\n     */ static transact(options, context) {\n        if (typeof options.transact === \"function\") {\n            try {\n                options.transact(context);\n            } catch (e) {\n                // silencing the error, to avoid breaking the transaction;\n                Events.unexpected(\"transact\", e);\n            }\n        }\n    }\n    /**\r\n     * @event error\r\n     * @description\r\n     * Global notification of every error encountered by this library.\r\n     *\r\n     * The library will suppress any error thrown by the handler and write it into the console.\r\n     *\r\n     * @param {*} err\r\n     * The error encountered, of the same value and type as it was reported.\r\n     *\r\n     * @param {EventContext} e\r\n     * Event Context Object.\r\n     *\r\n     * @example\r\n     * const initOptions = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     error(err, e) {\r\n     *\r\n     *         if (e.cn) {\r\n     *             // this is a connection-related error\r\n     *             // cn = safe connection details passed into the library:\r\n     *             //      if password is present, it is masked by #\r\n     *         }\r\n     *\r\n     *         if (e.query) {\r\n     *             // query string is available\r\n     *             if (e.params) {\r\n     *                 // query parameters are available\r\n     *             }\r\n     *         }\r\n     *\r\n     *         if (e.ctx) {\r\n     *             // occurred inside a task or transaction\r\n     *         }\r\n     *       }\r\n     * };\r\n     *\r\n     */ static error(options, err, context) {\n        if (typeof options.error === \"function\") {\n            try {\n                options.error(err, context);\n            } catch (e) {\n                // have to silence errors here;\n                // throwing unhandled errors while handling an error\n                // notification is simply not acceptable.\n                Events.unexpected(\"error\", e);\n            }\n        }\n    }\n    /**\r\n     * @event extend\r\n     * @description\r\n     * Extends {@link Database} protocol with custom methods and properties.\r\n     *\r\n     * Override this event to extend the existing access layer with your own functions and\r\n     * properties best suited for your application.\r\n     *\r\n     * The extension thus becomes available across all access layers:\r\n     *\r\n     * - Within the root/default database protocol;\r\n     * - Inside transactions, including nested ones;\r\n     * - Inside tasks, including nested ones.\r\n     *\r\n     * All pre-defined methods and properties are read-only, so you will get an error,\r\n     * if you try overriding them.\r\n     *\r\n     * The library will suppress any error thrown by the handler and write it into the console.\r\n     *\r\n     * @param {object} obj - Protocol object to be extended.\r\n     *\r\n     * @param {*} dc - Database Context that was used when creating the {@link Database} object.\r\n     *\r\n     * @see $[pg-promise-demo]\r\n     *\r\n     * @example\r\n     *\r\n     * // In the example below we extend the protocol with function `addImage`\r\n     * // that will insert one binary image and resolve with the new record id.\r\n     *\r\n     * const initOptions = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     extend(obj, dc) {\r\n     *         // dc = database context;\r\n     *         obj.addImage = data => {\r\n     *             // adds a new image and resolves with its record id:\r\n     *             return obj.one('INSERT INTO images(data) VALUES($1) RETURNING id', data, a => a.id);\r\n     *         }\r\n     *     }\r\n     * };\r\n     *\r\n     * @example\r\n     *\r\n     * // It is best to extend the protocol by adding whole entity repositories to it as shown in the following example.\r\n     * // For a comprehensive example see https://github.com/vitaly-t/pg-promise-demo\r\n     *\r\n     * class UsersRepository {\r\n     *     constructor(rep, pgp) {\r\n     *         this.rep = rep;\r\n     *         this.pgp = pgp;\r\n     *     }\r\n     *\r\n     *     add(name) {\r\n     *         return this.rep.one('INSERT INTO users(name) VALUES($1) RETURNING id', name, a => a.id);\r\n     *     }\r\n     *\r\n     *     remove(id) {\r\n     *         return this.rep.none('DELETE FROM users WHERE id = $1', id);\r\n     *     }\r\n     * }\r\n     *\r\n     * // Overriding 'extend' event;\r\n     * const initOptions = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     extend(obj, dc) {\r\n     *         // dc = database context;\r\n     *         obj.users = new UsersRepository(obj, pgp);\r\n     *         // You can set different repositories based on `dc`\r\n     *     }\r\n     * };\r\n     *\r\n     * // Usage example:\r\n     * db.users.add('John', true)\r\n     *     .then(id => {\r\n     *         // user added successfully, id = new user's id\r\n     *     })\r\n     *     .catch(error => {\r\n     *         // failed to add the user;\r\n     *     });\r\n     *\r\n     */ static extend(options, obj, dc) {\n        if (typeof options.extend === \"function\") {\n            try {\n                options.extend.call(obj, obj, dc);\n            } catch (e) {\n                // have to silence errors here;\n                // the result of throwing unhandled errors while\n                // extending the protocol would be unpredictable.\n                Events.unexpected(\"extend\", e);\n            }\n        }\n    }\n    /**\r\n     * @event unexpected\r\n     * @param {string} event - unhandled event name.\r\n     * @param {string|Error} e - unhandled error.\r\n     * @private\r\n     */ static unexpected(event, e) {\n        // If you should ever get here, your app is definitely broken, and you need to fix\n        // your event handler to prevent unhandled errors during event notifications.\n        //\n        // Console output is suppressed when running tests, to avoid polluting test output\n        // with error messages that are intentional and of no value to the test.\n        /* istanbul ignore if */ if (!npm.main.suppressErrors) {\n            const stack = e instanceof Error ? e.stack : new Error().stack;\n            ColorConsole.error(`Unexpected error in '${event}' event handler.\\n${stack}\\n`);\n        }\n    }\n}\nmodule.exports = {\n    Events\n}; /**\r\n * @typedef EventContext\r\n * @description\r\n * This common type is used for the following events: {@link event:query query}, {@link event:receive receive},\r\n * {@link event:error error}, {@link event:task task} and {@link event:transact transact}.\r\n *\r\n * @property {string|object} cn\r\n *\r\n * Set only for event {@link event:error error}, and only when the error is connection-related.\r\n *\r\n * It is a safe copy of the connection string/object that was used when initializing `db` - the database instance.\r\n *\r\n * If the original connection contains a password, the safe copy contains it masked with symbol `#`, so the connection\r\n * can be logged safely, without exposing the password.\r\n *\r\n * @property {*} dc\r\n * Database Context that was used when creating the database object (see {@link Database}). It is set for all events.\r\n *\r\n * @property {string|object} query\r\n *\r\n * Query string/object that was passed into the query method. This property is only set during events {@link event:query query},\r\n * {@link event:receive receive} and {@link event:error error} (only when the error is query-related).\r\n *\r\n * @property {external:Client} client\r\n *\r\n * $[pg.Client] object that represents the connection. It is set for all events, except for event {@link event:error error}\r\n * when it is connection-related. Note that sometimes the value may be unset when the connection is lost.\r\n *\r\n * @property {*} params - Formatting parameters for the query.\r\n *\r\n * It is set only for events {@link event:query query}, {@link event:receive receive} and {@link event:error error}, and only\r\n * when it is needed for logging. This library takes an extra step in figuring out when formatting parameters are of any value\r\n * to the event logging:\r\n * - when an error occurs related to the query formatting, event {@link event:error error} is sent with the property set.\r\n * - when initialization parameter `pgFormat` is used, and all query formatting is done within the $[PG] library, events\r\n * {@link event:query query} and {@link event:receive receive} will have this property set also, since this library no longer\r\n * handles the query formatting.\r\n *\r\n * When this parameter is not set, it means one of the two things:\r\n * - there were no parameters passed into the query method;\r\n * - property `query` of this object already contains all the formatting values in it, so logging only the query is sufficient.\r\n *\r\n * @property {TaskContext} ctx\r\n * _Task/Transaction Context_ object.\r\n *\r\n * This property is always set for events {@link event:task task} and {@link event:transact transact}, while for events\r\n * {@link event:query query}, {@link event:receive receive} and {@link event:error error} it is only set when they occur\r\n * inside a task or transaction.\r\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/events.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/formatting.js":
/*!***************************************************!*\
  !*** ./node_modules/pg-promise/lib/formatting.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { assert } = __webpack_require__(/*! ./assert */ \"(rsc)/./node_modules/pg-promise/lib/assert.js\");\nconst npm = {\n    pgUtils: __webpack_require__(/*! pg/lib/utils */ \"pg/lib/utils\"),\n    patterns: __webpack_require__(/*! ./patterns */ \"(rsc)/./node_modules/pg-promise/lib/patterns.js\"),\n    utils: __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\")\n};\n// Format Modification Flags;\nconst fmFlags = {\n    raw: 1,\n    alias: 2,\n    name: 4,\n    json: 8,\n    csv: 16,\n    value: 32 // escaped, but without ''\n};\n// Format Modification Map;\nconst fmMap = {\n    \"^\": fmFlags.raw,\n    \":raw\": fmFlags.raw,\n    \":alias\": fmFlags.alias,\n    \"~\": fmFlags.name,\n    \":name\": fmFlags.name,\n    \":json\": fmFlags.json,\n    \":csv\": fmFlags.csv,\n    \":list\": fmFlags.csv,\n    \":value\": fmFlags.value,\n    \"#\": fmFlags.value\n};\n// Global symbols for Custom Type Formatting:\nconst ctfSymbols = {\n    toPostgres: Symbol.for(\"ctf.toPostgres\"),\n    rawType: Symbol.for(\"ctf.rawType\")\n};\nconst maxVariable = 100000; // maximum supported variable is '$100000'\n////////////////////////////////////////////////////\n// Converts a single value into its Postgres format.\nfunction formatValue({ value, fm, cc, options }) {\n    if (typeof value === \"function\") {\n        return formatValue({\n            value: resolveFunc(value, cc),\n            fm,\n            cc\n        });\n    }\n    const ctf = getCTF(value); // Custom Type Formatting\n    if (ctf) {\n        fm |= ctf.rawType ? fmFlags.raw : 0;\n        return formatValue({\n            value: resolveFunc(ctf.toPostgres, value),\n            fm,\n            cc\n        });\n    }\n    const isRaw = !!(fm & fmFlags.raw);\n    fm &= ~fmFlags.raw;\n    switch(fm){\n        case fmFlags.alias:\n            return $as.alias(value);\n        case fmFlags.name:\n            return $as.name(value);\n        case fmFlags.json:\n            return $as.json(value, isRaw);\n        case fmFlags.csv:\n            return $to.csv(value, options);\n        case fmFlags.value:\n            return $as.value(value);\n        default:\n            break;\n    }\n    if (isNull(value)) {\n        throwIfRaw(isRaw);\n        return \"null\";\n    }\n    switch(typeof value){\n        case \"string\":\n            return $to.text(value, isRaw);\n        case \"boolean\":\n            return $to.bool(value);\n        case \"number\":\n        case \"bigint\":\n            return $to.number(value);\n        case \"symbol\":\n            throw new TypeError(`Type Symbol has no meaning for PostgreSQL: ${value.toString()}`);\n        default:\n            if (value instanceof Date) {\n                return $to.date(value, isRaw);\n            }\n            if (Array.isArray(value)) {\n                return $to.array(value, options);\n            }\n            if (Buffer.isBuffer(value)) {\n                return $to.buffer(value, isRaw);\n            }\n            return $to.json(value, isRaw);\n    }\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Converts array of values into PostgreSQL Array Constructor: array[...], as per PostgreSQL documentation:\n// http://www.postgresql.org/docs/9.6/static/arrays.html\n//\n// Arrays of any depth/dimension are supported.\n//\n// Top-level empty arrays are formatted as literal '{}' to avoid the necessity of explicit type casting,\n// as the server cannot automatically infer the type of empty non-literal array.\nfunction formatArray(array, options) {\n    const loop = (a)=>\"[\" + a.map((value)=>Array.isArray(value) ? loop(value) : formatValue({\n                value,\n                options\n            })).join() + \"]\";\n    const prefix = options && options.capSQL ? \"ARRAY\" : \"array\";\n    return array.length ? prefix + loop(array) : \"'{}'\";\n}\n///////////////////////////////////////////////////////////////////\n// Formats array/object/value as a list of comma-separated values.\nfunction formatCSV(values, options) {\n    if (Array.isArray(values)) {\n        return values.map((value)=>formatValue({\n                value,\n                options\n            })).join();\n    }\n    if (typeof values === \"object\" && values !== null) {\n        return Object.keys(values).map((v)=>formatValue({\n                value: values[v],\n                options\n            })).join();\n    }\n    return values === undefined ? \"\" : formatValue({\n        value: values,\n        options\n    });\n}\n///////////////////////////////\n// Query formatting helpers;\nconst formatAs = {\n    object ({ query, obj, raw, options }) {\n        options = options && typeof options === \"object\" ? options : {};\n        return query.replace(npm.patterns.namedParameters, (name)=>{\n            const v = formatAs.stripName(name.replace(/^\\$[{(<[/]|[\\s})>\\]/]/g, \"\"), raw), c = npm.utils.getIfHas(obj, v.name);\n            if (!c.valid) {\n                throw new Error(`Invalid property name '${v.name}'.`);\n            }\n            if (c.has) {\n                return formatValue({\n                    value: c.value,\n                    fm: v.fm,\n                    cc: c.target,\n                    options\n                });\n            }\n            if (v.name === \"this\") {\n                return formatValue({\n                    value: obj,\n                    fm: v.fm,\n                    options\n                });\n            }\n            if (\"def\" in options) {\n                const d = options.def, value = typeof d === \"function\" ? d.call(obj, v.name, obj) : d;\n                return formatValue({\n                    value,\n                    fm: v.fm,\n                    cc: obj,\n                    options\n                });\n            }\n            if (options.partial) {\n                return name;\n            }\n            // property must exist as the object's own or inherited;\n            throw new Error(`Property '${v.name}' doesn't exist.`);\n        });\n    },\n    array ({ query, array, raw, options }) {\n        options = options && typeof options === \"object\" ? options : {};\n        return query.replace(npm.patterns.multipleValues, (name)=>{\n            const v = formatAs.stripName(name.substr(1), raw);\n            const idx = v.name - 1;\n            if (idx >= maxVariable) {\n                throw new RangeError(`Variable $${v.name} exceeds supported maximum of $${maxVariable}`);\n            }\n            if (idx < array.length) {\n                return formatValue({\n                    value: array[idx],\n                    fm: v.fm,\n                    options\n                });\n            }\n            if (\"def\" in options) {\n                const d = options.def, value = typeof d === \"function\" ? d.call(array, idx, array) : d;\n                return formatValue({\n                    value,\n                    fm: v.fm,\n                    options\n                });\n            }\n            if (options.partial) {\n                return name;\n            }\n            throw new RangeError(`Variable $${v.name} out of range. Parameters array length: ${array.length}`);\n        });\n    },\n    value ({ query, value, raw, options }) {\n        return query.replace(npm.patterns.singleValue, (name)=>{\n            const v = formatAs.stripName(name, raw);\n            return formatValue({\n                value,\n                fm: v.fm,\n                options\n            });\n        });\n    },\n    stripName (name, raw) {\n        const mod = name.match(npm.patterns.hasValidModifier);\n        if (mod) {\n            return {\n                name: name.substr(0, mod.index),\n                fm: fmMap[mod[0]] | (raw ? fmFlags.raw : 0)\n            };\n        }\n        return {\n            name,\n            fm: raw ? fmFlags.raw : null\n        };\n    }\n};\n////////////////////////////////////////////\n// Simpler check for null/undefined;\nfunction isNull(value) {\n    return value === undefined || value === null;\n}\n//////////////////////////////////////////////////////////////////\n// Checks if the value supports Custom Type Formatting,\n// to return {toPostgres, rawType}, if it does, or null otherwise.\nfunction getCTF(value) {\n    if (!isNull(value)) {\n        let toPostgres = value[ctfSymbols.toPostgres], rawType = !!value[ctfSymbols.rawType];\n        if (typeof toPostgres !== \"function\") {\n            toPostgres = value.toPostgres;\n            rawType = !!value.rawType;\n        }\n        if (typeof toPostgres === \"function\") {\n            if (toPostgres.constructor.name !== \"Function\") {\n                throw new Error(\"CTF does not support asynchronous toPostgres functions.\");\n            }\n            return {\n                toPostgres,\n                rawType\n            };\n        }\n    }\n    return null;\n}\n/////////////////////////////////////////\n// Wraps a text string in single quotes;\nfunction wrapText(text) {\n    return `'${text}'`;\n}\n////////////////////////////////////////////////\n// Replaces each single-quote symbol ' with two,\n// for compliance with PostgreSQL strings.\nfunction safeText(text) {\n    return text.replace(/'/g, \"''\");\n}\n/////////////////////////////////////////////\n// Throws an exception, if flag 'raw' is set.\nfunction throwIfRaw(raw) {\n    if (raw) {\n        throw new TypeError(\"Values null/undefined cannot be used as raw text.\");\n    }\n}\n/////////////////////////////////////////////////////////////////////////////\n// Recursively resolves parameter-function, with an optional Calling Context.\nfunction resolveFunc(value, cc) {\n    while(typeof value === \"function\"){\n        if (value.constructor.name !== \"Function\") {\n            // Constructor name for asynchronous functions have different names:\n            // - 'GeneratorFunction' for ES6 generators\n            // - 'AsyncFunction' for ES7 async functions\n            throw new Error(\"Cannot use asynchronous functions with query formatting.\");\n        }\n        value = value.call(cc, cc);\n    }\n    return value;\n}\n///////////////////////////////////////////////////////////////////////////////////\n// It implements two types of formatting, depending on the 'values' passed:\n//\n// 1. format '$1, $2, etc', when 'values' is of type string, boolean, number, date,\n//    function or null (or an array of the same types, plus undefined values);\n// 2. format $*propName*, when 'values' is an object (not null and not Date),\n//    and where * is any of the supported open-close pairs: {}, (), [], <>, //\n//\nfunction formatQuery(query, values, raw, options) {\n    if (typeof query !== \"string\") {\n        throw new TypeError(\"Parameter 'query' must be a text string.\");\n    }\n    const ctf = getCTF(values);\n    if (ctf) {\n        // Custom Type Formatting\n        return formatQuery(query, resolveFunc(ctf.toPostgres, values), raw || ctf.rawType, options);\n    }\n    if (typeof values === \"object\" && values !== null) {\n        if (Array.isArray(values)) {\n            // $1, $2,... formatting to be applied;\n            return formatAs.array({\n                query,\n                array: values,\n                raw,\n                options\n            });\n        }\n        if (!(values instanceof Date || values instanceof Buffer)) {\n            // $*propName* formatting to be applied;\n            return formatAs.object({\n                query,\n                obj: values,\n                raw,\n                options\n            });\n        }\n    }\n    // $1 formatting to be applied, if values != undefined;\n    return values === undefined ? query : formatAs.value({\n        query,\n        value: values,\n        raw,\n        options\n    });\n}\n//////////////////////////////////////////////////////\n// Formats a function or stored procedure call query;\nfunction formatEntity(entity, values, { capSQL, type }) {\n    let prefix = type === \"func\" ? \"select * from\" : \"call\";\n    if (capSQL) {\n        prefix = prefix.toUpperCase();\n    }\n    return `${prefix} ${$as.alias(entity)}(${formatCSV(values, {\n        capSQL\n    })})`;\n}\nfunction formatSqlName(name) {\n    return `\"${name.replace(/\"/g, '\"\"')}\"`;\n}\n/**\r\n * @namespace formatting\r\n * @description\r\n * Namespace for all query-formatting functions, available from `pgp.as` before and after initializing the library.\r\n *\r\n * @property {formatting.ctf} ctf\r\n * Namespace for symbols used by $[Custom Type Formatting].\r\n *\r\n * @property {function} alias\r\n * {@link formatting.alias alias} - formats an SQL alias.\r\n *\r\n * @property {function} name\r\n * {@link formatting.name name} - formats an SQL Name/Identifier.\r\n *\r\n * @property {function} text\r\n * {@link formatting.text text} - formats a text string.\r\n *\r\n * @property {function} number\r\n * {@link formatting.number number} - formats a number.\r\n *\r\n * @property {function} buffer\r\n * {@link formatting.buffer buffer} - formats a `Buffer` object.\r\n *\r\n * @property {function} value\r\n * {@link formatting.value value} - formats text as an open value.\r\n *\r\n * @property {function} json\r\n * {@link formatting.json json} - formats any value as JSON.\r\n *\r\n * @property {function} array\r\n * {@link formatting.array array} - formats an array of any depth.\r\n *\r\n * @property {function} csv\r\n * {@link formatting.csv csv} - formats an array as a list of comma-separated values.\r\n *\r\n * @property {function} func\r\n * {@link formatting.func func} - formats the value returned from a function.\r\n *\r\n * @property {function} format\r\n * {@link formatting.format format} - formats a query, according to parameters.\r\n *\r\n */ const $as = {\n    /**\r\n     * @namespace formatting.ctf\r\n     * @description\r\n     * Namespace for ES6 symbols used by $[Custom Type Formatting], available from `pgp.as.ctf` before and after initializing the library.\r\n     *\r\n     * It was added to avoid explicit/enumerable extension of types that need to be used as formatting parameters, to keep their type signature intact.\r\n     *\r\n     * @property {external:Symbol} toPostgres\r\n     * Property name for the $[Custom Type Formatting] callback function `toPostgres`.\r\n     *\r\n     * @property {external:Symbol} rawType\r\n     * Property name for the $[Custom Type Formatting] flag `rawType`.\r\n     *\r\n     * @example\r\n     * const ctf = pgp.as.ctf; // Custom Type Formatting symbols\r\n     *\r\n     * class MyType {\r\n     *     constructor() {\r\n     *         this[ctf.rawType] = true; // set it only when toPostgres returns a pre-formatted result\r\n     *     }\r\n     *\r\n     *     [ctf.toPostgres](self) {\r\n     *         // self = this\r\n     *\r\n     *         // return the custom/actual value here\r\n     *     }\r\n     * }\r\n     *\r\n     * const a = new MyType();\r\n     *\r\n     * const s = pgp.as.format('$1', a); // will be custom-formatted\r\n     */ ctf: ctfSymbols,\n    /**\r\n     * @method formatting.text\r\n     * @description\r\n     * Converts a value into PostgreSQL text presentation, escaped as required.\r\n     *\r\n     * Escaping the result means:\r\n     *  1. Every single-quote (apostrophe) is replaced with two\r\n     *  2. The resulting text is wrapped in apostrophes\r\n     *\r\n     * @param {value|function} value\r\n     * Value to be converted, or a function that returns the value.\r\n     *\r\n     * If the `value` resolves as `null` or `undefined`, while `raw`=`true`,\r\n     * it will throw {@link external:TypeError TypeError} = `Values null/undefined cannot be used as raw text.`\r\n     *\r\n     * @param {boolean} [raw=false]\r\n     * Indicates when not to escape the resulting text.\r\n     *\r\n     * @returns {string}\r\n     *\r\n     * - `null` string, if the `value` resolves as `null` or `undefined`\r\n     * - escaped result of `value.toString()`, if the `value` isn't a string\r\n     * - escaped string version, if `value` is a string.\r\n     *\r\n     *  The result is not escaped, if `raw` was passed in as `true`.\r\n     */ text (value, raw) {\n        value = resolveFunc(value);\n        if (isNull(value)) {\n            throwIfRaw(raw);\n            return \"null\";\n        }\n        if (typeof value !== \"string\") {\n            value = value.toString();\n        }\n        return $to.text(value, raw);\n    },\n    /**\r\n     * @method formatting.name\r\n     * @description\r\n     * Properly escapes an sql name or identifier, fixing double-quote symbols and wrapping the result in double quotes.\r\n     *\r\n     * Implements a safe way to format $[SQL Names] that neutralizes SQL Injection.\r\n     *\r\n     * When formatting a query, a variable makes use of this method via modifier `:name` or `~`. See method {@link formatting.format format}.\r\n     *\r\n     * @param {string|function|array|object} name\r\n     * SQL name or identifier, or a function that returns it.\r\n     *\r\n     * The name must be at least 1 character long.\r\n     *\r\n     * If `name` doesn't resolve into a non-empty string, it throws {@link external:TypeError TypeError} = `Invalid sql name: ...`\r\n     *\r\n     * If the `name` contains only a single `*` (trailing spaces are ignored), then `name` is returned exactly as is (unescaped).\r\n     *\r\n     * - If `name` is an Array, it is formatted as a comma-separated list of $[SQL Names]\r\n     * - If `name` is a non-Array object, its keys are formatted as a comma-separated list of $[SQL Names]\r\n     *\r\n     * Passing in an empty array/object will throw {@link external:Error Error} = `Cannot retrieve sql names from an empty array/object.`\r\n     *\r\n     * @returns {string}\r\n     * The SQL Name/Identifier, properly escaped for compliance with the PostgreSQL standard for $[SQL Names] and identifiers.\r\n     *\r\n     * @see\r\n     * {@link formatting.alias alias},\r\n     * {@link formatting.format format}\r\n     *\r\n     * @example\r\n     *\r\n     * // automatically list object properties as sql names:\r\n     * format('INSERT INTO table(${this~}) VALUES(${one}, ${two})', {\r\n     *     one: 1,\r\n     *     two: 2\r\n     * });\r\n     * //=> INSERT INTO table(\"one\",\"two\") VALUES(1, 2)\r\n     *\r\n     */ name (name) {\n        name = resolveFunc(name);\n        if (name) {\n            if (typeof name === \"string\") {\n                return /^\\s*\\*(\\s*)$/.test(name) ? name : formatSqlName(name);\n            }\n            if (typeof name === \"object\") {\n                const keys = Array.isArray(name) ? name : Object.keys(name);\n                if (!keys.length) {\n                    throw new Error(\"Cannot retrieve sql names from an empty array/object.\");\n                }\n                return keys.map((value)=>{\n                    if (!value || typeof value !== \"string\") {\n                        throw new Error(`Invalid sql name: ${npm.utils.toJson(value)}`);\n                    }\n                    return formatSqlName(value);\n                }).join();\n            }\n        }\n        throw new TypeError(`Invalid sql name: ${npm.utils.toJson(name)}`);\n    },\n    /**\r\n     * @method formatting.alias\r\n     * @description\r\n     * Simpler (non-verbose) version of method {@link formatting.name name}, to handle only a regular string-identifier\r\n     * that's mostly used as an SQL alias, i.e. it doesn't support `*` or an array/object of names, which in the context of\r\n     * an SQL alias would be incorrect. However, it supports `.` as name-separator, for simpler escaping of composite names.\r\n     *\r\n     * The surrounding double quotes are not added when the alias uses a simple syntax:\r\n     *  - it is a same-case single word, without spaces\r\n     *  - it can contain underscores, and can even start with them\r\n     *  - it can contain digits and `$`, but cannot start with those\r\n     *\r\n     * The method will automatically split the string with `.`, to support composite SQL names.\r\n     *\r\n     * When formatting a query, a variable makes use of this method via modifier `:alias`. See method {@link formatting.format format}.\r\n     *\r\n     * @param {string|function} name\r\n     * SQL alias name, or a function that returns it.\r\n     *\r\n     * The name must be at least 1 character long. And it can contain `.`, to split into multiple SQL names.\r\n     *\r\n     * If `name` doesn't resolve into a non-empty string, it throws {@link external:TypeError TypeError} = `Invalid sql alias: ...`\r\n     *\r\n     * @returns {string}\r\n     * The SQL alias, properly escaped for compliance with the PostgreSQL standard for $[SQL Names] and identifiers.\r\n     *\r\n     * @see\r\n     * {@link formatting.name name},\r\n     * {@link formatting.format format}\r\n     *\r\n     */ alias (name) {\n        name = resolveFunc(name);\n        if (name && typeof name === \"string\") {\n            return name.split(\".\").filter((f)=>f).map((a)=>{\n                const m = a.match(/^([a-z_][a-z0-9_$]*|[A-Z_][A-Z0-9_$]*)$/);\n                if (m && m[0] === a) {\n                    return a;\n                }\n                return `\"${a.replace(/\"/g, '\"\"')}\"`;\n            }).join(\".\");\n        }\n        throw new TypeError(`Invalid sql alias: ${npm.utils.toJson(name)}`);\n    },\n    /**\r\n     * @method formatting.value\r\n     * @description\r\n     * Represents an open value, one to be formatted according to its type, properly escaped, but without surrounding quotes for text types.\r\n     *\r\n     * When formatting a query, a variable makes use of this method via modifier `:value` or `#`. See method {@link formatting.format format}.\r\n     *\r\n     * @param {value|function} value\r\n     * Value to be converted, or a function that returns the value.\r\n     *\r\n     * If `value` resolves as `null` or `undefined`, it will throw {@link external:TypeError TypeError} = `Open values cannot be null or undefined.`\r\n     *\r\n     * @returns {string}\r\n     * Formatted and properly escaped string, but without surrounding quotes for text types.\r\n     *\r\n     * @see {@link formatting.format format}\r\n     *\r\n     */ value (value) {\n        value = resolveFunc(value);\n        if (isNull(value)) {\n            throw new TypeError(\"Open values cannot be null or undefined.\");\n        }\n        return safeText(formatValue({\n            value,\n            fm: fmFlags.raw\n        }));\n    },\n    /**\r\n     * @method formatting.buffer\r\n     * @description\r\n     * Converts an object of type `Buffer` into a hex string compatible with PostgreSQL type `bytea`.\r\n     *\r\n     * @param {Buffer|function} obj\r\n     * Object to be converted, or a function that returns one.\r\n     *\r\n     * @param {boolean} [raw=false]\r\n     * Indicates when not to wrap the resulting string in quotes.\r\n     *\r\n     * The generated hex string doesn't need to be escaped.\r\n     *\r\n     * @returns {string}\r\n     */ buffer (obj, raw) {\n        obj = resolveFunc(obj);\n        if (isNull(obj)) {\n            throwIfRaw(raw);\n            return \"null\";\n        }\n        if (obj instanceof Buffer) {\n            return $to.buffer(obj, raw);\n        }\n        throw new TypeError(`${wrapText(obj)} is not a Buffer object.`);\n    },\n    /**\r\n     * @method formatting.bool\r\n     * @description\r\n     * Converts a truthy value into PostgreSQL boolean presentation.\r\n     *\r\n     * @param {boolean|function} value\r\n     * Value to be converted, or a function that returns the value.\r\n     *\r\n     * @returns {string}\r\n     */ bool (value) {\n        value = resolveFunc(value);\n        if (isNull(value)) {\n            return \"null\";\n        }\n        return $to.bool(value);\n    },\n    /**\r\n     * @method formatting.date\r\n     * @description\r\n     * Converts a `Date`-type value into PostgreSQL date/time presentation,\r\n     * wrapped in quotes (unless flag `raw` is set).\r\n     *\r\n     * @param {Date|function} d\r\n     * Date object to be converted, or a function that returns one.\r\n     *\r\n     * @param {boolean} [raw=false]\r\n     * Indicates when not to escape the value.\r\n     *\r\n     * @returns {string}\r\n     */ date (d, raw) {\n        d = resolveFunc(d);\n        if (isNull(d)) {\n            throwIfRaw(raw);\n            return \"null\";\n        }\n        if (d instanceof Date) {\n            return $to.date(d, raw);\n        }\n        throw new TypeError(`${wrapText(d)} is not a Date object.`);\n    },\n    /**\r\n     * @method formatting.number\r\n     * @description\r\n     * Converts a numeric value into its PostgreSQL number presentation, with support\r\n     * for special values of `NaN`, `+Infinity` and `-Infinity`.\r\n     *\r\n     * @param {number|bigint|function} num\r\n     * Number to be converted, or a function that returns one.\r\n     *\r\n     * @returns {string}\r\n     */ number (num) {\n        num = resolveFunc(num);\n        if (isNull(num)) {\n            return \"null\";\n        }\n        const t = typeof num;\n        if (t !== \"number\" && t !== \"bigint\") {\n            throw new TypeError(`${wrapText(num)} is not a number.`);\n        }\n        return $to.number(num);\n    },\n    /**\r\n     * @method formatting.array\r\n     * @description\r\n     * Converts an array of values into its PostgreSQL presentation as an Array-Type constructor string: `array[]`.\r\n     *\r\n     * Top-level empty arrays are formatted as literal `{}`, to avoid the necessity of explicit type casting,\r\n     * as the server cannot automatically infer type of empty non-literal array.\r\n     *\r\n     * @param {Array|function} arr\r\n     * Array to be converted, or a function that returns one.\r\n     *\r\n     * @param {{}} [options]\r\n     * Array-Formatting Options.\r\n     *\r\n     * @param {boolean} [options.capSQL=false]\r\n     * When `true`, outputs `ARRAY` instead of `array`.\r\n     *\r\n     * @returns {string}\r\n     */ array (arr, options) {\n        options = assert(options, [\n            \"capSQL\"\n        ]);\n        arr = resolveFunc(arr);\n        if (isNull(arr)) {\n            return \"null\";\n        }\n        if (Array.isArray(arr)) {\n            return $to.array(arr, options);\n        }\n        throw new TypeError(`${wrapText(arr)} is not an Array object.`);\n    },\n    /**\r\n     * @method formatting.csv\r\n     * @description\r\n     * Converts a single value or an array of values into a CSV (comma-separated values) string, with all values formatted\r\n     * according to their JavaScript type.\r\n     *\r\n     * When formatting a query, a variable makes use of this method via modifier `:csv` or its alias `:list`.\r\n     *\r\n     * When `values` is an object that's not `null` or `Array`, its properties are enumerated for the actual values.\r\n     *\r\n     * @param {Array|Object|value|function} values\r\n     * Value(s) to be converted, or a function that returns it.\r\n     *\r\n     * @returns {string}\r\n     *\r\n     * @see {@link formatting.format format}\r\n     */ csv (values) {\n        return $to.csv(values);\n    },\n    /**\r\n     * @method formatting.json\r\n     * @description\r\n     * Converts any value into JSON (includes `BigInt` support), and returns it as a valid string,\r\n     * with single-quote symbols fixed, unless flag `raw` is set.\r\n     *\r\n     * When formatting a query, a variable makes use of this method via modifier `:json`. See method {@link formatting.format format}.\r\n     *\r\n     * @param {*} data\r\n     * Object/value to be converted, or a function that returns it.\r\n     *\r\n     * @param {boolean} [raw=false]\r\n     * Indicates when not to escape the result.\r\n     *\r\n     * @returns {string}\r\n     *\r\n     * @see {@link formatting.format format}\r\n     */ json (data, raw) {\n        data = resolveFunc(data);\n        if (isNull(data)) {\n            throwIfRaw(raw);\n            return \"null\";\n        }\n        return $to.json(data, raw);\n    },\n    /**\r\n     * @method formatting.func\r\n     * @description\r\n     * Calls the function to get the actual value, and then formats the result according to its type + `raw` flag.\r\n     *\r\n     * @param {function} func\r\n     * Function to be called, with support for nesting.\r\n     *\r\n     * @param {boolean} [raw=false]\r\n     * Indicates when not to escape the result.\r\n     *\r\n     * @param {*} [cc]\r\n     * Calling Context: `this` + the only value to be passed into the function on all nested levels.\r\n     *\r\n     * @returns {string}\r\n     */ func (func, raw, cc) {\n        if (isNull(func)) {\n            throwIfRaw(raw);\n            return \"null\";\n        }\n        if (typeof func !== \"function\") {\n            throw new TypeError(`${wrapText(func)} is not a function.`);\n        }\n        const fm = raw ? fmFlags.raw : null;\n        return formatValue({\n            value: resolveFunc(func, cc),\n            fm,\n            cc\n        });\n    },\n    /**\r\n     * @method formatting.format\r\n     * @description\r\n     * Replaces variables in a string according to the type of `values`:\r\n     *\r\n     * - Replaces `$1` occurrences when `values` is of type `string`, `boolean`, `number`, `bigint`, `Date`, `Buffer` or when it is `null`.\r\n     *\r\n     * - Replaces variables `$1`, `$2`, ...`$100000` when `values` is an array of parameters. It throws a {@link external:RangeError RangeError}\r\n     * when the values or variables are out of range.\r\n     *\r\n     * - Replaces `$*propName*`, where `*` is any of `{}`, `()`, `[]`, `<>`, `//`, when `values` is an object that's not a\r\n     * `Date`, `Buffer`, {@link QueryFile} or `null`. Special property name `this` refers to the formatting object itself,\r\n     *   to be injected as a JSON string. When referencing a property that doesn't exist in the formatting object, it throws\r\n     *   {@link external:Error Error} = `Property 'PropName' doesn't exist`, unless option `partial` is used.\r\n     *\r\n     * - Supports $[Nested Named Parameters] of any depth.\r\n     *\r\n     * By default, each variable is automatically formatted according to its type, unless it is a special variable:\r\n     *\r\n     * - Raw-text variables end with `:raw` or symbol `^`, and prevent escaping the text. Such variables are not\r\n     *   allowed to be `null` or `undefined`, or the method will throw {@link external:TypeError TypeError} = `Values null/undefined cannot be used as raw text.`\r\n     *   - `$1:raw`, `$2:raw`,..., and `$*propName:raw*` (see `*` above)\r\n     *   - `$1^`, `$2^`,..., and `$*propName^*` (see `*` above)\r\n     *\r\n     * - Open-value variables end with `:value` or symbol `#`, to be escaped, but not wrapped in quotes. Such variables are\r\n     *   not allowed to be `null` or `undefined`, or the method will throw {@link external:TypeError TypeError} = `Open values cannot be null or undefined.`\r\n     *   - `$1:value`, `$2:value`,..., and `$*propName:value*` (see `*` above)\r\n     *   - `$1#`, `$2#`,..., and `$*propName#*` (see `*` above)\r\n     *\r\n     * - SQL name variables end with `:name` or symbol `~` (tilde), and provide proper escaping for SQL names/identifiers:\r\n     *   - `$1:name`, `$2:name`,..., and `$*propName:name*` (see `*` above)\r\n     *   - `$1~`, `$2~`,..., and `$*propName~*` (see `*` above)\r\n     *\r\n     * - Modifier `:alias` - non-verbose $[SQL Names] escaping.\r\n     *\r\n     * - JSON override ends with `:json` to format the value of any type as a JSON string\r\n     *\r\n     * - CSV override ends with `:csv` or `:list` to format an array as a properly escaped comma-separated list of values.\r\n     *\r\n     * @param {string|QueryFile|object} query\r\n     * A query string, a {@link QueryFile} or any object that implements $[Custom Type Formatting], to be formatted according to `values`.\r\n     *\r\n     * @param {array|object|value} [values]\r\n     * Formatting parameter(s) / variable value(s).\r\n     *\r\n     * @param {{}} [options]\r\n     * Formatting Options.\r\n     *\r\n     * @param {boolean} [options.capSQL=false]\r\n     * Formats reserved SQL words capitalized. Presently, this only concerns arrays, to output `ARRAY` when required.\r\n     *\r\n     * @param {boolean} [options.partial=false]\r\n     * Indicates that we intend to do only a partial replacement, i.e. throw no error when encountering a variable or\r\n     * property name that's missing within the formatting parameters.\r\n     *\r\n     * **NOTE:** This option has no meaning when option `def` is used.\r\n     *\r\n     * @param {*} [options.def]\r\n     * Sets default value for every variable that's missing, consequently preventing errors when encountering a variable\r\n     * or property name that's missing within the formatting parameters.\r\n     *\r\n     * It can also be set to a function, to be called with two parameters that depend on the type of formatting being used,\r\n     * and to return the actual default value:\r\n     *\r\n     * - For $[Named Parameters] formatting:\r\n     *   - `name` - name of the property missing in the formatting object\r\n     *   - `obj` - the formatting object, and is the same as `this` context\r\n     *\r\n     * - For $[Index Variables] formatting:\r\n     *   - `index` - element's index (starts with 1) that's outside of the input array\r\n     *   - `arr` - the formatting/input array, and is the same as `this` context\r\n     *\r\n     *   You can tell which type of call it is by checking the type of the first parameter.\r\n     *\r\n     * @returns {string}\r\n     * Formatted query string.\r\n     *\r\n     * The function will throw an error, if any occurs during formatting.\r\n     */ format (query, values, options) {\n        options = assert(options, [\n            \"capSQL\",\n            \"partial\",\n            \"def\"\n        ]);\n        const ctf = getCTF(query);\n        if (ctf) {\n            query = ctf.toPostgres.call(query, query);\n        }\n        return formatQuery(query, values, false, options);\n    }\n};\n/* Pre-parsed type formatting */ const $to = {\n    array (arr, options) {\n        return formatArray(arr, options);\n    },\n    csv (values, options) {\n        return formatCSV(resolveFunc(values), options);\n    },\n    bool (value) {\n        return value ? \"true\" : \"false\";\n    },\n    buffer (obj, raw) {\n        const s = `\\\\x${obj.toString(\"hex\")}`;\n        return raw ? s : wrapText(s);\n    },\n    date (d, raw) {\n        const s = npm.pgUtils.prepareValue(d);\n        return raw ? s : wrapText(s);\n    },\n    json (data, raw) {\n        const s = npm.utils.toJson(data);\n        return raw ? s : wrapText(safeText(s));\n    },\n    number (num) {\n        if (typeof num === \"bigint\" || Number.isFinite(num)) {\n            return num.toString();\n        }\n        // Converting NaN/+Infinity/-Infinity according to Postgres documentation:\n        // http://www.postgresql.org/docs/9.6/static/datatype-numeric.html#DATATYPE-FLOAT\n        //\n        // NOTE: strings for 'NaN'/'+Infinity'/'-Infinity' are not case-sensitive.\n        if (num === Number.POSITIVE_INFINITY) {\n            return wrapText(\"+Infinity\");\n        }\n        if (num === Number.NEGATIVE_INFINITY) {\n            return wrapText(\"-Infinity\");\n        }\n        return wrapText(\"NaN\");\n    },\n    text (value, raw) {\n        return raw ? value : wrapText(safeText(value));\n    }\n};\nmodule.exports = {\n    formatQuery,\n    formatEntity,\n    resolveFunc,\n    as: $as\n}; /**\r\n * @external Error\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\r\n */  /**\r\n * @external TypeError\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\r\n */  /**\r\n * @external RangeError\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\r\n */  /**\r\n * @external Symbol\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\r\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/formatting.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/helpers/column-set.js":
/*!***********************************************************!*\
  !*** ./node_modules/pg-promise/lib/helpers/column-set.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { InnerState } = __webpack_require__(/*! ../inner-state */ \"(rsc)/./node_modules/pg-promise/lib/inner-state.js\");\nconst { assert } = __webpack_require__(/*! ../assert */ \"(rsc)/./node_modules/pg-promise/lib/assert.js\");\nconst { TableName } = __webpack_require__(/*! ./table-name */ \"(rsc)/./node_modules/pg-promise/lib/helpers/table-name.js\");\nconst { Column } = __webpack_require__(/*! ./column */ \"(rsc)/./node_modules/pg-promise/lib/helpers/column.js\");\nconst npm = {\n    os: __webpack_require__(/*! os */ \"os\"),\n    utils: __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\"),\n    formatting: __webpack_require__(/*! ../formatting */ \"(rsc)/./node_modules/pg-promise/lib/formatting.js\")\n};\n/**\r\n * @class helpers.ColumnSet\r\n * @description\r\n * Performance-optimized, read-only structure with query-formatting columns.\r\n *\r\n * In order to avail from performance optimization provided by this class, it should be created\r\n * only once, statically, and then reused.\r\n *\r\n * @param {object|helpers.Column|array} columns\r\n * Columns information object, depending on the type:\r\n *\r\n * - When it is a simple object, its properties are enumerated to represent both column names and property names\r\n *   within the source objects. See also option `inherit` that's applicable in this case.\r\n *\r\n * - When it is a single {@link helpers.Column Column} object, property {@link helpers.ColumnSet#columns columns} is initialized with\r\n *   just a single column. It is not a unique situation when only a single column is required for an update operation.\r\n *\r\n * - When it is an array, each element is assumed to represent details for a column. If the element is already of type {@link helpers.Column Column},\r\n *   it is used directly; otherwise the element is passed into {@link helpers.Column Column} constructor for initialization.\r\n *   On any duplicate column name (case-sensitive) it will throw {@link external:Error Error} = `Duplicate column name \"name\".`\r\n *\r\n * - When it is none of the above, it will throw {@link external:TypeError TypeError} = `Invalid parameter 'columns' specified.`\r\n *\r\n * @param {object} [options]\r\n *\r\n * @param {helpers.TableName|string|{table,schema}} [options.table]\r\n * Table details.\r\n *\r\n * When it is a non-null value, and not a {@link helpers.TableName TableName} object, a new {@link helpers.TableName TableName} is constructed from the value.\r\n *\r\n * It can be used as the default for methods {@link helpers.insert insert} and {@link helpers.update update} when their parameter\r\n * `table` is omitted, and for logging purposes.\r\n *\r\n * @param {boolean} [options.inherit = false]\r\n * Use inherited properties in addition to the object's own properties.\r\n *\r\n * By default, only the object's own properties are enumerated for column names.\r\n *\r\n * @returns {helpers.ColumnSet}\r\n *\r\n * @see\r\n *\r\n * {@link helpers.ColumnSet#columns columns},\r\n * {@link helpers.ColumnSet#names names},\r\n * {@link helpers.ColumnSet#table table},\r\n * {@link helpers.ColumnSet#variables variables} |\r\n * {@link helpers.ColumnSet#assign assign},\r\n * {@link helpers.ColumnSet#assignColumns assignColumns},\r\n * {@link helpers.ColumnSet#extend extend},\r\n * {@link helpers.ColumnSet#merge merge},\r\n * {@link helpers.ColumnSet#prepare prepare}\r\n *\r\n * @example\r\n *\r\n * // A complex insert/update object scenario for table 'purchases' in schema 'fiscal'.\r\n * // For a good performance, you should declare such objects once and then reuse them.\r\n * //\r\n * // Column Requirements:\r\n * //\r\n * // 1. Property 'id' is only to be used for a WHERE condition in updates\r\n * // 2. Property 'list' needs to be formatted as a csv\r\n * // 3. Property 'code' is to be used as raw text, and to be defaulted to 0 when the\r\n * //    property is missing in the source object\r\n * // 4. Property 'log' is a JSON object with 'log-entry' for the column name\r\n * // 5. Property 'data' requires SQL type casting '::int[]'\r\n * // 6. Property 'amount' needs to be set to 100, if it is 0\r\n * // 7. Property 'total' must be skipped during updates, if 'amount' was 0, plus its\r\n * //    column name is 'total-val'\r\n *\r\n * const cs = new pgp.helpers.ColumnSet([\r\n *     '?id', // ColumnConfig equivalent: {name: 'id', cnd: true}\r\n *     'list:csv', // ColumnConfig equivalent: {name: 'list', mod: ':csv'}\r\n *     {\r\n *         name: 'code',\r\n *         mod: '^', // format as raw text\r\n *         def: 0 // default to 0 when the property doesn't exist\r\n *     },\r\n *     {\r\n *         name: 'log-entry',\r\n *         prop: 'log',\r\n *         mod: ':json' // format as JSON\r\n *     },\r\n *     {\r\n *         name: 'data',\r\n *         cast: 'int[]' // use SQL type casting '::int[]'\r\n *     },\r\n *     {\r\n *         name: 'amount',\r\n *         init(col) {\r\n *             // set to 100, if the value is 0:\r\n *             return col.value === 0 ? 100 : col.value;\r\n *         }\r\n *     },\r\n *     {\r\n *         name: 'total-val',\r\n *         prop: 'total',\r\n *         skip(col) {\r\n *             // skip from updates, if 'amount' is 0:\r\n *             return col.source.amount === 0;\r\n *         }\r\n *     }\r\n * ], {table: {table: 'purchases', schema: 'fiscal'}});\r\n *\r\n * // Alternatively, you could take the table declaration out:\r\n * // const table = new pgp.helpers.TableName('purchases', 'fiscal');\r\n *\r\n * console.log(cs); // console output for the object:\r\n * //=>\r\n * // ColumnSet {\r\n * //    table: \"fiscal\".\"purchases\"\r\n * //    columns: [\r\n * //        Column {\r\n * //            name: \"id\"\r\n * //            cnd: true\r\n * //        }\r\n * //        Column {\r\n * //            name: \"list\"\r\n * //            mod: \":csv\"\r\n * //        }\r\n * //        Column {\r\n * //            name: \"code\"\r\n * //            mod: \"^\"\r\n * //            def: 0\r\n * //        }\r\n * //        Column {\r\n * //            name: \"log-entry\"\r\n * //            prop: \"log\"\r\n * //            mod: \":json\"\r\n * //        }\r\n * //        Column {\r\n * //            name: \"data\"\r\n * //            cast: \"int[]\"\r\n * //        }\r\n * //        Column {\r\n * //            name: \"amount\"\r\n * //            init: [Function]\r\n * //        }\r\n * //        Column {\r\n * //            name: \"total-val\"\r\n * //            prop: \"total\"\r\n * //            skip: [Function]\r\n * //        }\r\n * //    ]\r\n * // }\r\n */ class ColumnSet extends InnerState {\n    constructor(columns, opt){\n        super();\n        if (!columns || typeof columns !== \"object\") {\n            throw new TypeError(\"Invalid parameter 'columns' specified.\");\n        }\n        opt = assert(opt, [\n            \"table\",\n            \"inherit\"\n        ]);\n        if (!npm.utils.isNull(opt.table)) {\n            this.table = opt.table instanceof TableName ? opt.table : new TableName(opt.table);\n        }\n        /**\r\n         * @name helpers.ColumnSet#table\r\n         * @type {helpers.TableName}\r\n         * @readonly\r\n         * @description\r\n         * Destination table. It can be specified for two purposes:\r\n         *\r\n         * - **primary:** to be used as the default table when it is omitted during a call into methods {@link helpers.insert insert} and {@link helpers.update update}\r\n         * - **secondary:** to be automatically written into the console (for logging purposes).\r\n         */ /**\r\n         * @name helpers.ColumnSet#columns\r\n         * @type helpers.Column[]\r\n         * @readonly\r\n         * @description\r\n         * Array of {@link helpers.Column Column} objects.\r\n         */ if (Array.isArray(columns)) {\n            const colNames = {};\n            this.columns = columns.map((c)=>{\n                const col = c instanceof Column ? c : new Column(c);\n                if (col.name in colNames) {\n                    throw new Error(`Duplicate column name \"${col.name}\".`);\n                }\n                colNames[col.name] = true;\n                return col;\n            });\n        } else {\n            if (columns instanceof Column) {\n                this.columns = [\n                    columns\n                ];\n            } else {\n                this.columns = [];\n                for(const name in columns){\n                    if (opt.inherit || Object.prototype.hasOwnProperty.call(columns, name)) {\n                        this.columns.push(new Column(name));\n                    }\n                }\n            }\n        }\n        Object.freeze(this.columns);\n        Object.freeze(this);\n        this.extendState({\n            names: undefined,\n            variables: undefined,\n            updates: undefined,\n            isSimple: true\n        });\n        for(let i = 0; i < this.columns.length; i++){\n            const c = this.columns[i];\n            // ColumnSet is simple when the source objects require no preparation,\n            // and should be used directly:\n            if (c.prop || c.init || \"def\" in c) {\n                this._inner.isSimple = false;\n                break;\n            }\n        }\n    }\n    /**\r\n     * @name helpers.ColumnSet#names\r\n     * @type string\r\n     * @readonly\r\n     * @description\r\n     * Returns a string - comma-separated list of all column names, properly escaped.\r\n     *\r\n     * @example\r\n     * const cs = new ColumnSet(['id^', {name: 'cells', cast: 'int[]'}, 'doc:json']);\r\n     * console.log(cs.names);\r\n     * //=> \"id\",\"cells\",\"doc\"\r\n     */ get names() {\n        const _i = this._inner;\n        if (!_i.names) {\n            _i.names = this.columns.map((c)=>c.escapedName).join();\n        }\n        return _i.names;\n    }\n    /**\r\n     * @name helpers.ColumnSet#variables\r\n     * @type string\r\n     * @readonly\r\n     * @description\r\n     * Returns a string - formatting template for all column values.\r\n     *\r\n     * @see {@link helpers.ColumnSet#assign assign}\r\n     *\r\n     * @example\r\n     * const cs = new ColumnSet(['id^', {name: 'cells', cast: 'int[]'}, 'doc:json']);\r\n     * console.log(cs.variables);\r\n     * //=> ${id^},${cells}::int[],${doc:json}\r\n     */ get variables() {\n        const _i = this._inner;\n        if (!_i.variables) {\n            _i.variables = this.columns.map((c)=>c.variable + c.castText).join();\n        }\n        return _i.variables;\n    }\n}\n/**\r\n * @method helpers.ColumnSet#assign\r\n * @description\r\n * Returns a formatting template of SET assignments, either generic or for a single object.\r\n *\r\n * The method is optimized to cache the output string when there are no columns that can be skipped dynamically.\r\n *\r\n * This method is primarily for internal use, that's why it does not validate the input.\r\n *\r\n * @param {object} [options]\r\n * Assignment/formatting options.\r\n *\r\n * @param {object} [options.source]\r\n * Source - a single object that contains values for columns.\r\n *\r\n * The object is only necessary to correctly apply the logic of skipping columns dynamically, based on the source data\r\n * and the rules defined in the {@link helpers.ColumnSet ColumnSet}. If, however, you do not care about that, then you do not need to specify any object.\r\n *\r\n * Note that even if you do not specify the object, the columns marked as conditional (`cnd: true`) will always be skipped.\r\n *\r\n * @param {string} [options.prefix]\r\n * In cases where needed, an alias prefix to be added before each column.\r\n *\r\n * @returns {string}\r\n * Comma-separated list of variable-to-column assignments.\r\n *\r\n * @see {@link helpers.ColumnSet#variables variables}\r\n *\r\n * @example\r\n *\r\n * const cs = new pgp.helpers.ColumnSet([\r\n *     '?first', // = {name: 'first', cnd: true}\r\n *     'second:json',\r\n *     {name: 'third', mod: ':raw', cast: 'text'}\r\n * ]);\r\n *\r\n * cs.assign();\r\n * //=> \"second\"=${second:json},\"third\"=${third:raw}::text\r\n *\r\n * cs.assign({prefix: 'a b c'});\r\n * //=> \"a b c\".\"second\"=${second:json},\"a b c\".\"third\"=${third:raw}::text\r\n */ ColumnSet.prototype.assign = function(options) {\n    const _i = this._inner;\n    const hasPrefix = options && options.prefix && typeof options.prefix === \"string\";\n    if (_i.updates && !hasPrefix) {\n        return _i.updates;\n    }\n    let dynamic = hasPrefix;\n    const hasSource = options && options.source && typeof options.source === \"object\";\n    let list = this.columns.filter((c)=>{\n        if (c.cnd) {\n            return false;\n        }\n        if (c.skip) {\n            dynamic = true;\n            if (hasSource) {\n                const a = colDesc(c, options.source);\n                if (c.skip.call(options.source, a)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    });\n    const prefix = hasPrefix ? npm.formatting.as.alias(options.prefix) + \".\" : \"\";\n    list = list.map((c)=>prefix + c.escapedName + \"=\" + c.variable + c.castText).join();\n    if (!dynamic) {\n        _i.updates = list;\n    }\n    return list;\n};\n/**\r\n * @method helpers.ColumnSet#assignColumns\r\n * @description\r\n * Generates assignments for all columns in the set, with support for aliases and column-skipping logic.\r\n * Aliases are set by using method {@link formatting.alias as.alias}.\r\n *\r\n * @param {{}} [options]\r\n * Optional Parameters.\r\n *\r\n * @param {string} [options.from]\r\n * Alias for the source columns.\r\n *\r\n * @param {string} [options.to]\r\n * Alias for the destination columns.\r\n *\r\n * @param {string | Array<string> | function} [options.skip]\r\n * Name(s) of the column(s) to be skipped (case-sensitive). It can be either a single string or an array of strings.\r\n *\r\n * It can also be a function - iterator, to be called for every column, passing in {@link helpers.Column Column} as\r\n * `this` context, and plus as a single parameter. The function would return a truthy value for every column that needs to be skipped.\r\n *\r\n * @returns {string}\r\n * A string of comma-separated column assignments.\r\n *\r\n * @example\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['id', 'city', 'street']);\r\n *\r\n * cs.assignColumns({from: 'EXCLUDED', skip: 'id'})\r\n * //=> \"city\"=EXCLUDED.\"city\",\"street\"=EXCLUDED.\"street\"\r\n *\r\n * @example\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['?id', 'city', 'street']);\r\n *\r\n * cs.assignColumns({from: 'source', to: 'target', skip: c => c.cnd})\r\n * //=> target.\"city\"=source.\"city\",target.\"street\"=source.\"street\"\r\n *\r\n */ ColumnSet.prototype.assignColumns = function(options) {\n    options = assert(options, [\n        \"from\",\n        \"to\",\n        \"skip\"\n    ]);\n    const skip = typeof options.skip === \"string\" && [\n        options.skip\n    ] || (Array.isArray(options.skip) || typeof options.skip === \"function\") && options.skip;\n    const from = typeof options.from === \"string\" && options.from && npm.formatting.as.alias(options.from) + \".\" || \"\";\n    const to = typeof options.to === \"string\" && options.to && npm.formatting.as.alias(options.to) + \".\" || \"\";\n    const iterator = typeof skip === \"function\" ? (c)=>!skip.call(c, c) : (c)=>skip.indexOf(c.name) === -1;\n    const cols = skip ? this.columns.filter(iterator) : this.columns;\n    return cols.map((c)=>to + c.escapedName + \"=\" + from + c.escapedName).join();\n};\n/**\r\n * @method helpers.ColumnSet#extend\r\n * @description\r\n * Creates a new {@link helpers.ColumnSet ColumnSet}, by joining the two sets of columns.\r\n *\r\n * If the two sets contain a column with the same `name` (case-sensitive), an error is thrown.\r\n *\r\n * @param {helpers.Column|helpers.ColumnSet|array} columns\r\n * Columns to be appended, of the same type as parameter `columns` during {@link helpers.ColumnSet ColumnSet} construction, except:\r\n * - it can also be of type {@link helpers.ColumnSet ColumnSet}\r\n * - it cannot be a simple object (properties enumeration is not supported here)\r\n *\r\n * @returns {helpers.ColumnSet}\r\n * New {@link helpers.ColumnSet ColumnSet} object with the extended/concatenated list of columns.\r\n *\r\n * @see\r\n * {@link helpers.Column Column},\r\n * {@link helpers.ColumnSet#merge merge}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')();\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['one', 'two'], {table: 'my-table'});\r\n * console.log(cs);\r\n * //=>\r\n * // ColumnSet {\r\n * //    table: \"my-table\"\r\n * //    columns: [\r\n * //        Column {\r\n * //            name: \"one\"\r\n * //        }\r\n * //        Column {\r\n * //            name: \"two\"\r\n * //        }\r\n * //    ]\r\n * // }\r\n * const csExtended = cs.extend(['three']);\r\n * console.log(csExtended);\r\n * //=>\r\n * // ColumnSet {\r\n * //    table: \"my-table\"\r\n * //    columns: [\r\n * //        Column {\r\n * //            name: \"one\"\r\n * //        }\r\n * //        Column {\r\n * //            name: \"two\"\r\n * //        }\r\n * //        Column {\r\n * //            name: \"three\"\r\n * //        }\r\n * //    ]\r\n * // }\r\n */ ColumnSet.prototype.extend = function(columns) {\n    let cs = columns;\n    if (!(cs instanceof ColumnSet)) {\n        cs = new ColumnSet(columns);\n    }\n    // Any duplicate column will throw Error = 'Duplicate column name \"name\".',\n    return new ColumnSet(this.columns.concat(cs.columns), {\n        table: this.table\n    });\n};\n/**\r\n * @method helpers.ColumnSet#merge\r\n * @description\r\n * Creates a new {@link helpers.ColumnSet ColumnSet}, by joining the two sets of columns.\r\n *\r\n * Items in `columns` with the same `name` (case-sensitive) override the original columns.\r\n *\r\n * @param {helpers.Column|helpers.ColumnSet|array} columns\r\n * Columns to be appended, of the same type as parameter `columns` during {@link helpers.ColumnSet ColumnSet} construction, except:\r\n * - it can also be of type {@link helpers.ColumnSet ColumnSet}\r\n * - it cannot be a simple object (properties enumeration is not supported here)\r\n *\r\n * @see\r\n * {@link helpers.Column Column},\r\n * {@link helpers.ColumnSet#extend extend}\r\n *\r\n * @returns {helpers.ColumnSet}\r\n * New {@link helpers.ColumnSet ColumnSet} object with the merged list of columns.\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')();\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['?one', 'two:json'], {table: 'my-table'});\r\n * console.log(cs);\r\n * //=>\r\n * // ColumnSet {\r\n * //    table: \"my-table\"\r\n * //    columns: [\r\n * //        Column {\r\n * //            name: \"one\"\r\n * //            cnd: true\r\n * //        }\r\n * //        Column {\r\n * //            name: \"two\"\r\n * //            mod: \":json\"\r\n * //        }\r\n * //    ]\r\n * // }\r\n * const csMerged = cs.merge(['two', 'three^']);\r\n * console.log(csMerged);\r\n * //=>\r\n * // ColumnSet {\r\n * //    table: \"my-table\"\r\n * //    columns: [\r\n * //        Column {\r\n * //            name: \"one\"\r\n * //            cnd: true\r\n * //        }\r\n * //        Column {\r\n * //            name: \"two\"\r\n * //        }\r\n * //        Column {\r\n * //            name: \"three\"\r\n * //            mod: \"^\"\r\n * //        }\r\n * //    ]\r\n * // }\r\n *\r\n */ ColumnSet.prototype.merge = function(columns) {\n    let cs = columns;\n    if (!(cs instanceof ColumnSet)) {\n        cs = new ColumnSet(columns);\n    }\n    const colNames = {}, cols = [];\n    this.columns.forEach((c, idx)=>{\n        cols.push(c);\n        colNames[c.name] = idx;\n    });\n    cs.columns.forEach((c)=>{\n        if (c.name in colNames) {\n            cols[colNames[c.name]] = c;\n        } else {\n            cols.push(c);\n        }\n    });\n    return new ColumnSet(cols, {\n        table: this.table\n    });\n};\n/**\r\n * @method helpers.ColumnSet#prepare\r\n * @description\r\n * Prepares a source object to be formatted, by cloning it and applying the rules as set by the\r\n * columns configuration.\r\n *\r\n * This method is primarily for internal use, that's why it does not validate the input parameters.\r\n *\r\n * @param {object} source\r\n * The source object to be prepared, if required.\r\n *\r\n * It must be a non-`null` object, which the method does not validate, as it is\r\n * intended primarily for internal use by the library.\r\n *\r\n * @returns {object}\r\n * When the object needs to be prepared, the method returns a clone of the source object,\r\n * with all properties and values set according to the columns configuration.\r\n *\r\n * When the object does not need to be prepared, the original object is returned.\r\n */ ColumnSet.prototype.prepare = function(source) {\n    if (this._inner.isSimple) {\n        return source; // a simple ColumnSet requires no object preparation;\n    }\n    const target = {};\n    this.columns.forEach((c)=>{\n        const a = colDesc(c, source);\n        if (c.init) {\n            target[a.name] = c.init.call(source, a);\n        } else {\n            if (a.exists || \"def\" in c) {\n                target[a.name] = a.value;\n            }\n        }\n    });\n    return target;\n};\nfunction colDesc(column, source) {\n    const a = {\n        source,\n        name: column.prop || column.name\n    };\n    a.exists = a.name in source;\n    if (a.exists) {\n        a.value = source[a.name];\n    } else {\n        a.value = \"def\" in column ? column.def : undefined;\n    }\n    return a;\n}\n/**\r\n * @method helpers.ColumnSet#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */ ColumnSet.prototype.toString = function(level) {\n    level = level > 0 ? parseInt(level) : 0;\n    const gap0 = npm.utils.messageGap(level), gap1 = npm.utils.messageGap(level + 1), lines = [\n        \"ColumnSet {\"\n    ];\n    if (this.table) {\n        lines.push(gap1 + \"table: \" + this.table);\n    }\n    if (this.columns.length) {\n        lines.push(gap1 + \"columns: [\");\n        this.columns.forEach((c)=>{\n            lines.push(c.toString(2));\n        });\n        lines.push(gap1 + \"]\");\n    } else {\n        lines.push(gap1 + \"columns: []\");\n    }\n    lines.push(gap0 + \"}\");\n    return lines.join(npm.os.EOL);\n};\nnpm.utils.addInspection(ColumnSet, function() {\n    return this.toString();\n});\nmodule.exports = {\n    ColumnSet\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/helpers/column-set.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/helpers/column.js":
/*!*******************************************************!*\
  !*** ./node_modules/pg-promise/lib/helpers/column.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { InnerState } = __webpack_require__(/*! ../inner-state */ \"(rsc)/./node_modules/pg-promise/lib/inner-state.js\");\nconst { assert } = __webpack_require__(/*! ../assert */ \"(rsc)/./node_modules/pg-promise/lib/assert.js\");\nconst npm = {\n    os: __webpack_require__(/*! os */ \"os\"),\n    utils: __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\"),\n    formatting: __webpack_require__(/*! ../formatting */ \"(rsc)/./node_modules/pg-promise/lib/formatting.js\"),\n    patterns: __webpack_require__(/*! ../patterns */ \"(rsc)/./node_modules/pg-promise/lib/patterns.js\")\n};\n/**\r\n *\r\n * @class helpers.Column\r\n * @description\r\n *\r\n * Read-only structure with details for a single column. Used primarily by {@link helpers.ColumnSet ColumnSet}.\r\n *\r\n * The class parses details into a template, to be used for query generation.\r\n *\r\n * @param {string|helpers.ColumnConfig} col\r\n * Column details, depending on the type.\r\n *\r\n * When it is a string, it is expected to contain a name for both the column and the source property, assuming that the two are the same.\r\n * The name must adhere to JavaScript syntax for variable names. The name can be appended with any format modifier as supported by\r\n * {@link formatting.format as.format} (`^`, `~`, `#`, `:csv`, `:list`, `:json`, `:alias`, `:name`, `:raw`, `:value`), which is then removed from the name and put\r\n * into property `mod`. If the name starts with `?`, it is removed, while setting flag `cnd` = `true`.\r\n *\r\n * If the string doesn't adhere to the above requirements, the method will throw {@link external:TypeError TypeError} = `Invalid column syntax`.\r\n *\r\n * When `col` is a simple {@link helpers.ColumnConfig ColumnConfig}-like object, it is used as an input configurator to set all the properties\r\n * of the class.\r\n *\r\n * @property {string} name\r\n * Destination column name + source property name (if `prop` is skipped). The name must adhere to JavaScript syntax for variables,\r\n * unless `prop` is specified, in which case `name` represents only the column name, and therefore can be any non-empty string.\r\n *\r\n * @property {string} [prop]\r\n * Source property name, if different from the column's name. It must adhere to JavaScript syntax for variables.\r\n *\r\n * It is ignored when it is the same as `name`.\r\n *\r\n * @property {string} [mod]\r\n * Formatting modifier, as supported by method {@link formatting.format as.format}: `^`, `~`, `#`, `:csv`, `:list`, `:json`, `:alias`, `:name`, `:raw`, `:value`.\r\n *\r\n * @property {string} [cast]\r\n * Server-side type casting, without `::` in front.\r\n *\r\n * @property {boolean} [cnd]\r\n * Conditional column flag.\r\n *\r\n * Used by methods {@link helpers.update update} and {@link helpers.sets sets}, ignored by methods {@link helpers.insert insert} and\r\n * {@link helpers.values values}. It indicates that the column is reserved for a `WHERE` condition, not to be set or updated.\r\n *\r\n * It can be set from a string initialization, by adding `?` in front of the name.\r\n *\r\n * @property {*} [def]\r\n * Default value for the property, to be used only when the source object doesn't have the property.\r\n * It is ignored when property `init` is set.\r\n *\r\n * @property {helpers.initCB} [init]\r\n * Override callback for the value.\r\n *\r\n * @property {helpers.skipCB} [skip]\r\n * An override for skipping columns dynamically.\r\n *\r\n * Used by methods {@link helpers.update update} (for a single object) and {@link helpers.sets sets}, ignored by methods\r\n * {@link helpers.insert insert} and {@link helpers.values values}.\r\n *\r\n * It is also ignored when conditional flag `cnd` is set.\r\n *\r\n * @returns {helpers.Column}\r\n *\r\n * @see\r\n * {@link helpers.ColumnConfig ColumnConfig},\r\n * {@link helpers.Column#castText castText},\r\n * {@link helpers.Column#escapedName escapedName},\r\n * {@link helpers.Column#variable variable}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')({\r\n *     capSQL: true // if you want all generated SQL capitalized\r\n * });\r\n *\r\n * const Column = pgp.helpers.Column;\r\n *\r\n * // creating a column from just a name:\r\n * const col1 = new Column('colName');\r\n * console.log(col1);\r\n * //=>\r\n * // Column {\r\n * //    name: \"colName\"\r\n * // }\r\n *\r\n * // creating a column from a name + modifier:\r\n * const col2 = new Column('colName:csv');\r\n * console.log(col2);\r\n * //=>\r\n * // Column {\r\n * //    name: \"colName\"\r\n * //    mod: \":csv\"\r\n * // }\r\n *\r\n * // creating a column from a configurator:\r\n * const col3 = new Column({\r\n *     name: 'colName', // required\r\n *     prop: 'propName', // optional\r\n *     mod: '^', // optional\r\n *     def: 123 // optional\r\n * });\r\n * console.log(col3);\r\n * //=>\r\n * // Column {\r\n * //    name: \"colName\"\r\n * //    prop: \"propName\"\r\n * //    mod: \"^\"\r\n * //    def: 123\r\n * // }\r\n *\r\n */ class Column extends InnerState {\n    constructor(col){\n        super();\n        if (typeof col === \"string\") {\n            const info = parseColumn(col);\n            this.name = info.name;\n            if (\"mod\" in info) {\n                this.mod = info.mod;\n            }\n            if (\"cnd\" in info) {\n                this.cnd = info.cnd;\n            }\n        } else {\n            col = assert(col, [\n                \"name\",\n                \"prop\",\n                \"mod\",\n                \"cast\",\n                \"cnd\",\n                \"def\",\n                \"init\",\n                \"skip\"\n            ]);\n            if (\"name\" in col) {\n                if (!npm.utils.isText(col.name)) {\n                    throw new TypeError(`Invalid 'name' value: ${npm.utils.toJson(col.name)}. A non-empty string was expected.`);\n                }\n                if (npm.utils.isNull(col.prop) && !isValidVariable(col.name)) {\n                    throw new TypeError(`Invalid 'name' syntax: ${npm.utils.toJson(col.name)}.`);\n                }\n                this.name = col.name; // column name + property name (if 'prop' isn't specified)\n                if (!npm.utils.isNull(col.prop)) {\n                    if (!npm.utils.isText(col.prop)) {\n                        throw new TypeError(`Invalid 'prop' value: ${npm.utils.toJson(col.prop)}. A non-empty string was expected.`);\n                    }\n                    if (!isValidVariable(col.prop)) {\n                        throw new TypeError(`Invalid 'prop' syntax: ${npm.utils.toJson(col.prop)}.`);\n                    }\n                    if (col.prop !== col.name) {\n                        // optional property name, if different from the column's name;\n                        this.prop = col.prop;\n                    }\n                }\n                if (!npm.utils.isNull(col.mod)) {\n                    if (typeof col.mod !== \"string\" || !isValidMod(col.mod)) {\n                        throw new TypeError(`Invalid 'mod' value: ${npm.utils.toJson(col.mod)}.`);\n                    }\n                    this.mod = col.mod; // optional format modifier;\n                }\n                if (!npm.utils.isNull(col.cast)) {\n                    this.cast = parseCast(col.cast); // optional SQL type casting\n                }\n                if (\"cnd\" in col) {\n                    this.cnd = !!col.cnd;\n                }\n                if (\"def\" in col) {\n                    this.def = col.def; // optional default\n                }\n                if (typeof col.init === \"function\") {\n                    this.init = col.init; // optional value override (overrides 'def' also)\n                }\n                if (typeof col.skip === \"function\") {\n                    this.skip = col.skip;\n                }\n            } else {\n                throw new TypeError(\"Invalid column details.\");\n            }\n        }\n        const variable = \"${\" + (this.prop || this.name) + (this.mod || \"\") + \"}\";\n        const castText = this.cast ? \"::\" + this.cast : \"\";\n        const escapedName = npm.formatting.as.name(this.name);\n        this.extendState({\n            variable,\n            castText,\n            escapedName\n        });\n        Object.freeze(this);\n    }\n    /**\r\n     * @name helpers.Column#variable\r\n     * @type string\r\n     * @readonly\r\n     * @description\r\n     * Full-syntax formatting variable, ready for direct use in query templates.\r\n     *\r\n     * @example\r\n     *\r\n     * const cs = new pgp.helpers.ColumnSet([\r\n     *     'id',\r\n     *     'coordinate:json',\r\n     *     {\r\n     *         name: 'places',\r\n     *         mod: ':csv',\r\n     *         cast: 'int[]'\r\n     *     }\r\n     * ]);\r\n     *\r\n     * // cs.columns[0].variable = ${id}\r\n     * // cs.columns[1].variable = ${coordinate:json}\r\n     * // cs.columns[2].variable = ${places:csv}::int[]\r\n     */ get variable() {\n        return this._inner.variable;\n    }\n    /**\r\n     * @name helpers.Column#castText\r\n     * @type string\r\n     * @readonly\r\n     * @description\r\n     * Full-syntax sql type casting, if there is any, or else an empty string.\r\n     */ get castText() {\n        return this._inner.castText;\n    }\n    /**\r\n     * @name helpers.Column#escapedName\r\n     * @type string\r\n     * @readonly\r\n     * @description\r\n     * Escaped name of the column, ready to be injected into queries directly.\r\n     *\r\n     */ get escapedName() {\n        return this._inner.escapedName;\n    }\n}\nfunction parseCast(name) {\n    if (typeof name === \"string\") {\n        const s = name.replace(/^[:\\s]*|\\s*$/g, \"\");\n        if (s) {\n            return s;\n        }\n    }\n    throw new TypeError(`Invalid 'cast' value: ${npm.utils.toJson(name)}.`);\n}\nfunction parseColumn(name) {\n    const m = name.match(npm.patterns.validColumn);\n    if (m && m[0] === name) {\n        const res = {};\n        if (name[0] === \"?\") {\n            res.cnd = true;\n            name = name.substr(1);\n        }\n        const mod = name.match(npm.patterns.hasValidModifier);\n        if (mod) {\n            res.name = name.substr(0, mod.index);\n            res.mod = mod[0];\n        } else {\n            res.name = name;\n        }\n        return res;\n    }\n    throw new TypeError(`Invalid column syntax: ${npm.utils.toJson(name)}.`);\n}\nfunction isValidMod(mod) {\n    return npm.patterns.validModifiers.indexOf(mod) !== -1;\n}\nfunction isValidVariable(name) {\n    const m = name.match(npm.patterns.validVariable);\n    return !!m && m[0] === name;\n}\n/**\r\n * @method helpers.Column#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */ Column.prototype.toString = function(level) {\n    level = level > 0 ? parseInt(level) : 0;\n    const gap0 = npm.utils.messageGap(level), gap1 = npm.utils.messageGap(level + 1), lines = [\n        gap0 + \"Column {\",\n        gap1 + \"name: \" + npm.utils.toJson(this.name)\n    ];\n    if (\"prop\" in this) {\n        lines.push(gap1 + \"prop: \" + npm.utils.toJson(this.prop));\n    }\n    if (\"mod\" in this) {\n        lines.push(gap1 + \"mod: \" + npm.utils.toJson(this.mod));\n    }\n    if (\"cast\" in this) {\n        lines.push(gap1 + \"cast: \" + npm.utils.toJson(this.cast));\n    }\n    if (\"cnd\" in this) {\n        lines.push(gap1 + \"cnd: \" + npm.utils.toJson(this.cnd));\n    }\n    if (\"def\" in this) {\n        lines.push(gap1 + \"def: \" + npm.utils.toJson(this.def));\n    }\n    if (\"init\" in this) {\n        lines.push(gap1 + \"init: [Function]\");\n    }\n    if (\"skip\" in this) {\n        lines.push(gap1 + \"skip: [Function]\");\n    }\n    lines.push(gap0 + \"}\");\n    return lines.join(npm.os.EOL);\n};\nnpm.utils.addInspection(Column, function() {\n    return this.toString();\n});\n/**\r\n * @typedef helpers.ColumnConfig\r\n * @description\r\n * A simple structure with column details, to be passed into the {@link helpers.Column Column} constructor for initialization.\r\n *\r\n * @property {string} name\r\n * Destination column name + source property name (if `prop` is skipped). The name must adhere to JavaScript syntax for variables,\r\n * unless `prop` is specified, in which case `name` represents only the column name, and therefore can be any non-empty string.\r\n *\r\n * @property {string} [prop]\r\n * Source property name, if different from the column's name. It must adhere to JavaScript syntax for variables.\r\n *\r\n * It is ignored when it is the same as `name`.\r\n *\r\n * @property {string} [mod]\r\n * Formatting modifier, as supported by method {@link formatting.format as.format}: `^`, `~`, `#`, `:csv`, `:list`, `:json`, `:alias`, `:name`, `:raw`, `:value`.\r\n *\r\n * @property {string} [cast]\r\n * Server-side type casting. Leading `::` is allowed, but not needed (automatically removed when specified).\r\n *\r\n * @property {boolean} [cnd]\r\n * Conditional column flag.\r\n *\r\n * Used by methods {@link helpers.update update} and {@link helpers.sets sets}, ignored by methods {@link helpers.insert insert} and\r\n * {@link helpers.values values}. It indicates that the column is reserved for a `WHERE` condition, not to be set or updated.\r\n *\r\n * It can be set from a string initialization, by adding `?` in front of the name.\r\n *\r\n * @property {*} [def]\r\n * Default value for the property, to be used only when the source object doesn't have the property.\r\n * It is ignored when property `init` is set.\r\n *\r\n * @property {helpers.initCB} [init]\r\n * Override callback for the value.\r\n *\r\n * @property {helpers.skipCB} [skip]\r\n * An override for skipping columns dynamically.\r\n *\r\n * Used by methods {@link helpers.update update} (for a single object) and {@link helpers.sets sets}, ignored by methods\r\n * {@link helpers.insert insert} and {@link helpers.values values}.\r\n *\r\n * It is also ignored when conditional flag `cnd` is set.\r\n *\r\n */ /**\r\n * @callback helpers.initCB\r\n * @description\r\n * A callback function type used by parameter `init` within {@link helpers.ColumnConfig ColumnConfig}.\r\n *\r\n * It works as an override for the corresponding property value in the `source` object.\r\n *\r\n * The function is called with `this` set to the `source` object.\r\n *\r\n * @param {*} col\r\n * Column-to-property descriptor.\r\n *\r\n * @param {object} col.source\r\n * The source object, equals to `this` that's passed into the function.\r\n *\r\n * @param {string} col.name\r\n * Resolved name of the property within the `source` object, i.e. the value of `name` when `prop` is not used\r\n * for the column, or the value of `prop` when it is specified.\r\n *\r\n * @param {*} col.value\r\n *\r\n * Property value, set to one of the following:\r\n *\r\n * - Value of the property within the `source` object (`value` = `source[name]`), if the property exists\r\n * - If the property doesn't exist and `def` is set in the column, then `value` is set to the value of `def`\r\n * - If the property doesn't exist and `def` is not set in the column, then `value` is set to `undefined`\r\n *\r\n * @param {boolean} col.exists\r\n * Indicates whether the property exists in the `source` object (`exists = name in source`).\r\n *\r\n * @returns {*}\r\n * The new value to be used for the corresponding column.\r\n */ /**\r\n * @callback helpers.skipCB\r\n * @description\r\n * A callback function type used by parameter `skip` within {@link helpers.ColumnConfig ColumnConfig}.\r\n *\r\n * It is to dynamically determine when the property with specified `name` in the `source` object is to be skipped.\r\n *\r\n * The function is called with `this` set to the `source` object.\r\n *\r\n * @param {*} col\r\n * Column-to-property descriptor.\r\n *\r\n * @param {object} col.source\r\n * The source object, equals to `this` that's passed into the function.\r\n *\r\n * @param {string} col.name\r\n * Resolved name of the property within the `source` object, i.e. the value of `name` when `prop` is not used\r\n * for the column, or the value of `prop` when it is specified.\r\n *\r\n * @param {*} col.value\r\n *\r\n * Property value, set to one of the following:\r\n *\r\n * - Value of the property within the `source` object (`value` = `source[name]`), if the property exists\r\n * - If the property doesn't exist and `def` is set in the column, then `value` is set to the value of `def`\r\n * - If the property doesn't exist and `def` is not set in the column, then `value` is set to `undefined`\r\n *\r\n * @param {boolean} col.exists\r\n * Indicates whether the property exists in the `source` object (`exists = name in source`).\r\n *\r\n * @returns {boolean}\r\n * A truthy value that indicates whether the column is to be skipped.\r\n *\r\n */ module.exports = {\n    Column\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvaGVscGVycy9jb2x1bW4uanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Q0FPQztBQUVELE1BQU0sRUFBQ0EsVUFBVSxFQUFDLEdBQUdDLG1CQUFPQSxDQUFDO0FBQzdCLE1BQU0sRUFBQ0MsTUFBTSxFQUFDLEdBQUdELG1CQUFPQSxDQUFDO0FBRXpCLE1BQU1FLE1BQU07SUFDUkMsSUFBSUgsbUJBQU9BLENBQUM7SUFDWkksT0FBT0osbUJBQU9BLENBQUM7SUFDZkssWUFBWUwsbUJBQU9BLENBQUM7SUFDcEJNLFVBQVVOLG1CQUFPQSxDQUFDO0FBQ3RCO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E2R0MsR0FDRCxNQUFNTyxlQUFlUjtJQUVqQlMsWUFBWUMsR0FBRyxDQUFFO1FBQ2IsS0FBSztRQUVMLElBQUksT0FBT0EsUUFBUSxVQUFVO1lBQ3pCLE1BQU1DLE9BQU9DLFlBQVlGO1lBQ3pCLElBQUksQ0FBQ0csSUFBSSxHQUFHRixLQUFLRSxJQUFJO1lBQ3JCLElBQUksU0FBU0YsTUFBTTtnQkFDZixJQUFJLENBQUNHLEdBQUcsR0FBR0gsS0FBS0csR0FBRztZQUN2QjtZQUNBLElBQUksU0FBU0gsTUFBTTtnQkFDZixJQUFJLENBQUNJLEdBQUcsR0FBR0osS0FBS0ksR0FBRztZQUN2QjtRQUNKLE9BQU87WUFDSEwsTUFBTVIsT0FBT1EsS0FBSztnQkFBQztnQkFBUTtnQkFBUTtnQkFBTztnQkFBUTtnQkFBTztnQkFBTztnQkFBUTthQUFPO1lBQy9FLElBQUksVUFBVUEsS0FBSztnQkFDZixJQUFJLENBQUNQLElBQUlFLEtBQUssQ0FBQ1csTUFBTSxDQUFDTixJQUFJRyxJQUFJLEdBQUc7b0JBQzdCLE1BQU0sSUFBSUksVUFBVSxDQUFDLHNCQUFzQixFQUFFZCxJQUFJRSxLQUFLLENBQUNhLE1BQU0sQ0FBQ1IsSUFBSUcsSUFBSSxFQUFFLGtDQUFrQyxDQUFDO2dCQUMvRztnQkFDQSxJQUFJVixJQUFJRSxLQUFLLENBQUNjLE1BQU0sQ0FBQ1QsSUFBSVUsSUFBSSxLQUFLLENBQUNDLGdCQUFnQlgsSUFBSUcsSUFBSSxHQUFHO29CQUMxRCxNQUFNLElBQUlJLFVBQVUsQ0FBQyx1QkFBdUIsRUFBRWQsSUFBSUUsS0FBSyxDQUFDYSxNQUFNLENBQUNSLElBQUlHLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBQy9FO2dCQUNBLElBQUksQ0FBQ0EsSUFBSSxHQUFHSCxJQUFJRyxJQUFJLEVBQUUsMERBQTBEO2dCQUVoRixJQUFJLENBQUNWLElBQUlFLEtBQUssQ0FBQ2MsTUFBTSxDQUFDVCxJQUFJVSxJQUFJLEdBQUc7b0JBQzdCLElBQUksQ0FBQ2pCLElBQUlFLEtBQUssQ0FBQ1csTUFBTSxDQUFDTixJQUFJVSxJQUFJLEdBQUc7d0JBQzdCLE1BQU0sSUFBSUgsVUFBVSxDQUFDLHNCQUFzQixFQUFFZCxJQUFJRSxLQUFLLENBQUNhLE1BQU0sQ0FBQ1IsSUFBSVUsSUFBSSxFQUFFLGtDQUFrQyxDQUFDO29CQUMvRztvQkFDQSxJQUFJLENBQUNDLGdCQUFnQlgsSUFBSVUsSUFBSSxHQUFHO3dCQUM1QixNQUFNLElBQUlILFVBQVUsQ0FBQyx1QkFBdUIsRUFBRWQsSUFBSUUsS0FBSyxDQUFDYSxNQUFNLENBQUNSLElBQUlVLElBQUksRUFBRSxDQUFDLENBQUM7b0JBQy9FO29CQUNBLElBQUlWLElBQUlVLElBQUksS0FBS1YsSUFBSUcsSUFBSSxFQUFFO3dCQUN2QiwrREFBK0Q7d0JBQy9ELElBQUksQ0FBQ08sSUFBSSxHQUFHVixJQUFJVSxJQUFJO29CQUN4QjtnQkFDSjtnQkFDQSxJQUFJLENBQUNqQixJQUFJRSxLQUFLLENBQUNjLE1BQU0sQ0FBQ1QsSUFBSUksR0FBRyxHQUFHO29CQUM1QixJQUFJLE9BQU9KLElBQUlJLEdBQUcsS0FBSyxZQUFZLENBQUNRLFdBQVdaLElBQUlJLEdBQUcsR0FBRzt3QkFDckQsTUFBTSxJQUFJRyxVQUFVLENBQUMscUJBQXFCLEVBQUVkLElBQUlFLEtBQUssQ0FBQ2EsTUFBTSxDQUFDUixJQUFJSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO29CQUM1RTtvQkFDQSxJQUFJLENBQUNBLEdBQUcsR0FBR0osSUFBSUksR0FBRyxFQUFFLDRCQUE0QjtnQkFDcEQ7Z0JBQ0EsSUFBSSxDQUFDWCxJQUFJRSxLQUFLLENBQUNjLE1BQU0sQ0FBQ1QsSUFBSWEsSUFBSSxHQUFHO29CQUM3QixJQUFJLENBQUNBLElBQUksR0FBR0MsVUFBVWQsSUFBSWEsSUFBSSxHQUFHLDRCQUE0QjtnQkFDakU7Z0JBQ0EsSUFBSSxTQUFTYixLQUFLO29CQUNkLElBQUksQ0FBQ0ssR0FBRyxHQUFHLENBQUMsQ0FBQ0wsSUFBSUssR0FBRztnQkFDeEI7Z0JBQ0EsSUFBSSxTQUFTTCxLQUFLO29CQUNkLElBQUksQ0FBQ2UsR0FBRyxHQUFHZixJQUFJZSxHQUFHLEVBQUUsbUJBQW1CO2dCQUMzQztnQkFDQSxJQUFJLE9BQU9mLElBQUlnQixJQUFJLEtBQUssWUFBWTtvQkFDaEMsSUFBSSxDQUFDQSxJQUFJLEdBQUdoQixJQUFJZ0IsSUFBSSxFQUFFLGlEQUFpRDtnQkFDM0U7Z0JBQ0EsSUFBSSxPQUFPaEIsSUFBSWlCLElBQUksS0FBSyxZQUFZO29CQUNoQyxJQUFJLENBQUNBLElBQUksR0FBR2pCLElBQUlpQixJQUFJO2dCQUN4QjtZQUNKLE9BQU87Z0JBQ0gsTUFBTSxJQUFJVixVQUFVO1lBQ3hCO1FBQ0o7UUFFQSxNQUFNVyxXQUFXLE9BQVEsS0FBSSxDQUFDUixJQUFJLElBQUksSUFBSSxDQUFDUCxJQUFJLElBQUssS0FBSSxDQUFDQyxHQUFHLElBQUksRUFBQyxJQUFLO1FBQ3RFLE1BQU1lLFdBQVcsSUFBSSxDQUFDTixJQUFJLEdBQUksT0FBTyxJQUFJLENBQUNBLElBQUksR0FBSTtRQUNsRCxNQUFNTyxjQUFjM0IsSUFBSUcsVUFBVSxDQUFDeUIsRUFBRSxDQUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQ0EsSUFBSTtRQUVwRCxJQUFJLENBQUNtQixXQUFXLENBQUM7WUFBQ0o7WUFBVUM7WUFBVUM7UUFBVztRQUNqREcsT0FBT0MsTUFBTSxDQUFDLElBQUk7SUFDdEI7SUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXNCQyxHQUNELElBQUlOLFdBQVc7UUFDWCxPQUFPLElBQUksQ0FBQ08sTUFBTSxDQUFDUCxRQUFRO0lBQy9CO0lBRUE7Ozs7OztLQU1DLEdBQ0QsSUFBSUMsV0FBVztRQUNYLE9BQU8sSUFBSSxDQUFDTSxNQUFNLENBQUNOLFFBQVE7SUFDL0I7SUFFQTs7Ozs7OztLQU9DLEdBQ0QsSUFBSUMsY0FBYztRQUNkLE9BQU8sSUFBSSxDQUFDSyxNQUFNLENBQUNMLFdBQVc7SUFDbEM7QUFFSjtBQUVBLFNBQVNOLFVBQVVYLElBQUk7SUFDbkIsSUFBSSxPQUFPQSxTQUFTLFVBQVU7UUFDMUIsTUFBTXVCLElBQUl2QixLQUFLd0IsT0FBTyxDQUFDLGlCQUFpQjtRQUN4QyxJQUFJRCxHQUFHO1lBQ0gsT0FBT0E7UUFDWDtJQUNKO0lBQ0EsTUFBTSxJQUFJbkIsVUFBVSxDQUFDLHNCQUFzQixFQUFFZCxJQUFJRSxLQUFLLENBQUNhLE1BQU0sQ0FBQ0wsTUFBTSxDQUFDLENBQUM7QUFDMUU7QUFFQSxTQUFTRCxZQUFZQyxJQUFJO0lBQ3JCLE1BQU15QixJQUFJekIsS0FBSzBCLEtBQUssQ0FBQ3BDLElBQUlJLFFBQVEsQ0FBQ2lDLFdBQVc7SUFDN0MsSUFBSUYsS0FBS0EsQ0FBQyxDQUFDLEVBQUUsS0FBS3pCLE1BQU07UUFDcEIsTUFBTTRCLE1BQU0sQ0FBQztRQUNiLElBQUk1QixJQUFJLENBQUMsRUFBRSxLQUFLLEtBQUs7WUFDakI0QixJQUFJMUIsR0FBRyxHQUFHO1lBQ1ZGLE9BQU9BLEtBQUs2QixNQUFNLENBQUM7UUFDdkI7UUFDQSxNQUFNNUIsTUFBTUQsS0FBSzBCLEtBQUssQ0FBQ3BDLElBQUlJLFFBQVEsQ0FBQ29DLGdCQUFnQjtRQUNwRCxJQUFJN0IsS0FBSztZQUNMMkIsSUFBSTVCLElBQUksR0FBR0EsS0FBSzZCLE1BQU0sQ0FBQyxHQUFHNUIsSUFBSThCLEtBQUs7WUFDbkNILElBQUkzQixHQUFHLEdBQUdBLEdBQUcsQ0FBQyxFQUFFO1FBQ3BCLE9BQU87WUFDSDJCLElBQUk1QixJQUFJLEdBQUdBO1FBQ2Y7UUFDQSxPQUFPNEI7SUFDWDtJQUNBLE1BQU0sSUFBSXhCLFVBQVUsQ0FBQyx1QkFBdUIsRUFBRWQsSUFBSUUsS0FBSyxDQUFDYSxNQUFNLENBQUNMLE1BQU0sQ0FBQyxDQUFDO0FBQzNFO0FBRUEsU0FBU1MsV0FBV1IsR0FBRztJQUNuQixPQUFPWCxJQUFJSSxRQUFRLENBQUNzQyxjQUFjLENBQUNDLE9BQU8sQ0FBQ2hDLFNBQVMsQ0FBQztBQUN6RDtBQUVBLFNBQVNPLGdCQUFnQlIsSUFBSTtJQUN6QixNQUFNeUIsSUFBSXpCLEtBQUswQixLQUFLLENBQUNwQyxJQUFJSSxRQUFRLENBQUN3QyxhQUFhO0lBQy9DLE9BQU8sQ0FBQyxDQUFDVCxLQUFLQSxDQUFDLENBQUMsRUFBRSxLQUFLekI7QUFDM0I7QUFFQTs7Ozs7Ozs7Ozs7Q0FXQyxHQUNETCxPQUFPd0MsU0FBUyxDQUFDQyxRQUFRLEdBQUcsU0FBVUMsS0FBSztJQUN2Q0EsUUFBUUEsUUFBUSxJQUFJQyxTQUFTRCxTQUFTO0lBQ3RDLE1BQU1FLE9BQU9qRCxJQUFJRSxLQUFLLENBQUNnRCxVQUFVLENBQUNILFFBQzlCSSxPQUFPbkQsSUFBSUUsS0FBSyxDQUFDZ0QsVUFBVSxDQUFDSCxRQUFRLElBQ3BDSyxRQUFRO1FBQ0pILE9BQU87UUFDUEUsT0FBTyxXQUFXbkQsSUFBSUUsS0FBSyxDQUFDYSxNQUFNLENBQUMsSUFBSSxDQUFDTCxJQUFJO0tBQy9DO0lBQ0wsSUFBSSxVQUFVLElBQUksRUFBRTtRQUNoQjBDLE1BQU1DLElBQUksQ0FBQ0YsT0FBTyxXQUFXbkQsSUFBSUUsS0FBSyxDQUFDYSxNQUFNLENBQUMsSUFBSSxDQUFDRSxJQUFJO0lBQzNEO0lBQ0EsSUFBSSxTQUFTLElBQUksRUFBRTtRQUNmbUMsTUFBTUMsSUFBSSxDQUFDRixPQUFPLFVBQVVuRCxJQUFJRSxLQUFLLENBQUNhLE1BQU0sQ0FBQyxJQUFJLENBQUNKLEdBQUc7SUFDekQ7SUFDQSxJQUFJLFVBQVUsSUFBSSxFQUFFO1FBQ2hCeUMsTUFBTUMsSUFBSSxDQUFDRixPQUFPLFdBQVduRCxJQUFJRSxLQUFLLENBQUNhLE1BQU0sQ0FBQyxJQUFJLENBQUNLLElBQUk7SUFDM0Q7SUFDQSxJQUFJLFNBQVMsSUFBSSxFQUFFO1FBQ2ZnQyxNQUFNQyxJQUFJLENBQUNGLE9BQU8sVUFBVW5ELElBQUlFLEtBQUssQ0FBQ2EsTUFBTSxDQUFDLElBQUksQ0FBQ0gsR0FBRztJQUN6RDtJQUNBLElBQUksU0FBUyxJQUFJLEVBQUU7UUFDZndDLE1BQU1DLElBQUksQ0FBQ0YsT0FBTyxVQUFVbkQsSUFBSUUsS0FBSyxDQUFDYSxNQUFNLENBQUMsSUFBSSxDQUFDTyxHQUFHO0lBQ3pEO0lBQ0EsSUFBSSxVQUFVLElBQUksRUFBRTtRQUNoQjhCLE1BQU1DLElBQUksQ0FBQ0YsT0FBTztJQUN0QjtJQUNBLElBQUksVUFBVSxJQUFJLEVBQUU7UUFDaEJDLE1BQU1DLElBQUksQ0FBQ0YsT0FBTztJQUN0QjtJQUNBQyxNQUFNQyxJQUFJLENBQUNKLE9BQU87SUFDbEIsT0FBT0csTUFBTUUsSUFBSSxDQUFDdEQsSUFBSUMsRUFBRSxDQUFDc0QsR0FBRztBQUNoQztBQUVBdkQsSUFBSUUsS0FBSyxDQUFDc0QsYUFBYSxDQUFDbkQsUUFBUTtJQUM1QixPQUFPLElBQUksQ0FBQ3lDLFFBQVE7QUFDeEI7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQTJDQyxHQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWdDQyxHQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FpQ0MsR0FFRFcsT0FBT0MsT0FBTyxHQUFHO0lBQUNyRDtBQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHRtbC1jb252ZXJ0ZXIvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvaGVscGVycy9jb2x1bW4uanM/MGE1MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgVml0YWx5IFRvbWlsb3ZcclxuICpcclxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHRvcC1sZXZlbCBkaXJlY3Rvcnkgb2YgdGhpcyBkaXN0cmlidXRpb25cclxuICogZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbi5cclxuICpcclxuICogUmVtb3ZhbCBvciBtb2RpZmljYXRpb24gb2YgdGhpcyBjb3B5cmlnaHQgbm90aWNlIGlzIHByb2hpYml0ZWQuXHJcbiAqL1xyXG5cclxuY29uc3Qge0lubmVyU3RhdGV9ID0gcmVxdWlyZSgnLi4vaW5uZXItc3RhdGUnKTtcclxuY29uc3Qge2Fzc2VydH0gPSByZXF1aXJlKCcuLi9hc3NlcnQnKTtcclxuXHJcbmNvbnN0IG5wbSA9IHtcclxuICAgIG9zOiByZXF1aXJlKCdvcycpLFxyXG4gICAgdXRpbHM6IHJlcXVpcmUoJy4uL3V0aWxzJyksXHJcbiAgICBmb3JtYXR0aW5nOiByZXF1aXJlKCcuLi9mb3JtYXR0aW5nJyksXHJcbiAgICBwYXR0ZXJuczogcmVxdWlyZSgnLi4vcGF0dGVybnMnKVxyXG59O1xyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEBjbGFzcyBoZWxwZXJzLkNvbHVtblxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogUmVhZC1vbmx5IHN0cnVjdHVyZSB3aXRoIGRldGFpbHMgZm9yIGEgc2luZ2xlIGNvbHVtbi4gVXNlZCBwcmltYXJpbHkgYnkge0BsaW5rIGhlbHBlcnMuQ29sdW1uU2V0IENvbHVtblNldH0uXHJcbiAqXHJcbiAqIFRoZSBjbGFzcyBwYXJzZXMgZGV0YWlscyBpbnRvIGEgdGVtcGxhdGUsIHRvIGJlIHVzZWQgZm9yIHF1ZXJ5IGdlbmVyYXRpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfGhlbHBlcnMuQ29sdW1uQ29uZmlnfSBjb2xcclxuICogQ29sdW1uIGRldGFpbHMsIGRlcGVuZGluZyBvbiB0aGUgdHlwZS5cclxuICpcclxuICogV2hlbiBpdCBpcyBhIHN0cmluZywgaXQgaXMgZXhwZWN0ZWQgdG8gY29udGFpbiBhIG5hbWUgZm9yIGJvdGggdGhlIGNvbHVtbiBhbmQgdGhlIHNvdXJjZSBwcm9wZXJ0eSwgYXNzdW1pbmcgdGhhdCB0aGUgdHdvIGFyZSB0aGUgc2FtZS5cclxuICogVGhlIG5hbWUgbXVzdCBhZGhlcmUgdG8gSmF2YVNjcmlwdCBzeW50YXggZm9yIHZhcmlhYmxlIG5hbWVzLiBUaGUgbmFtZSBjYW4gYmUgYXBwZW5kZWQgd2l0aCBhbnkgZm9ybWF0IG1vZGlmaWVyIGFzIHN1cHBvcnRlZCBieVxyXG4gKiB7QGxpbmsgZm9ybWF0dGluZy5mb3JtYXQgYXMuZm9ybWF0fSAoYF5gLCBgfmAsIGAjYCwgYDpjc3ZgLCBgOmxpc3RgLCBgOmpzb25gLCBgOmFsaWFzYCwgYDpuYW1lYCwgYDpyYXdgLCBgOnZhbHVlYCksIHdoaWNoIGlzIHRoZW4gcmVtb3ZlZCBmcm9tIHRoZSBuYW1lIGFuZCBwdXRcclxuICogaW50byBwcm9wZXJ0eSBgbW9kYC4gSWYgdGhlIG5hbWUgc3RhcnRzIHdpdGggYD9gLCBpdCBpcyByZW1vdmVkLCB3aGlsZSBzZXR0aW5nIGZsYWcgYGNuZGAgPSBgdHJ1ZWAuXHJcbiAqXHJcbiAqIElmIHRoZSBzdHJpbmcgZG9lc24ndCBhZGhlcmUgdG8gdGhlIGFib3ZlIHJlcXVpcmVtZW50cywgdGhlIG1ldGhvZCB3aWxsIHRocm93IHtAbGluayBleHRlcm5hbDpUeXBlRXJyb3IgVHlwZUVycm9yfSA9IGBJbnZhbGlkIGNvbHVtbiBzeW50YXhgLlxyXG4gKlxyXG4gKiBXaGVuIGBjb2xgIGlzIGEgc2ltcGxlIHtAbGluayBoZWxwZXJzLkNvbHVtbkNvbmZpZyBDb2x1bW5Db25maWd9LWxpa2Ugb2JqZWN0LCBpdCBpcyB1c2VkIGFzIGFuIGlucHV0IGNvbmZpZ3VyYXRvciB0byBzZXQgYWxsIHRoZSBwcm9wZXJ0aWVzXHJcbiAqIG9mIHRoZSBjbGFzcy5cclxuICpcclxuICogQHByb3BlcnR5IHtzdHJpbmd9IG5hbWVcclxuICogRGVzdGluYXRpb24gY29sdW1uIG5hbWUgKyBzb3VyY2UgcHJvcGVydHkgbmFtZSAoaWYgYHByb3BgIGlzIHNraXBwZWQpLiBUaGUgbmFtZSBtdXN0IGFkaGVyZSB0byBKYXZhU2NyaXB0IHN5bnRheCBmb3IgdmFyaWFibGVzLFxyXG4gKiB1bmxlc3MgYHByb3BgIGlzIHNwZWNpZmllZCwgaW4gd2hpY2ggY2FzZSBgbmFtZWAgcmVwcmVzZW50cyBvbmx5IHRoZSBjb2x1bW4gbmFtZSwgYW5kIHRoZXJlZm9yZSBjYW4gYmUgYW55IG5vbi1lbXB0eSBzdHJpbmcuXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcHJvcF1cclxuICogU291cmNlIHByb3BlcnR5IG5hbWUsIGlmIGRpZmZlcmVudCBmcm9tIHRoZSBjb2x1bW4ncyBuYW1lLiBJdCBtdXN0IGFkaGVyZSB0byBKYXZhU2NyaXB0IHN5bnRheCBmb3IgdmFyaWFibGVzLlxyXG4gKlxyXG4gKiBJdCBpcyBpZ25vcmVkIHdoZW4gaXQgaXMgdGhlIHNhbWUgYXMgYG5hbWVgLlxyXG4gKlxyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW21vZF1cclxuICogRm9ybWF0dGluZyBtb2RpZmllciwgYXMgc3VwcG9ydGVkIGJ5IG1ldGhvZCB7QGxpbmsgZm9ybWF0dGluZy5mb3JtYXQgYXMuZm9ybWF0fTogYF5gLCBgfmAsIGAjYCwgYDpjc3ZgLCBgOmxpc3RgLCBgOmpzb25gLCBgOmFsaWFzYCwgYDpuYW1lYCwgYDpyYXdgLCBgOnZhbHVlYC5cclxuICpcclxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtjYXN0XVxyXG4gKiBTZXJ2ZXItc2lkZSB0eXBlIGNhc3RpbmcsIHdpdGhvdXQgYDo6YCBpbiBmcm9udC5cclxuICpcclxuICogQHByb3BlcnR5IHtib29sZWFufSBbY25kXVxyXG4gKiBDb25kaXRpb25hbCBjb2x1bW4gZmxhZy5cclxuICpcclxuICogVXNlZCBieSBtZXRob2RzIHtAbGluayBoZWxwZXJzLnVwZGF0ZSB1cGRhdGV9IGFuZCB7QGxpbmsgaGVscGVycy5zZXRzIHNldHN9LCBpZ25vcmVkIGJ5IG1ldGhvZHMge0BsaW5rIGhlbHBlcnMuaW5zZXJ0IGluc2VydH0gYW5kXHJcbiAqIHtAbGluayBoZWxwZXJzLnZhbHVlcyB2YWx1ZXN9LiBJdCBpbmRpY2F0ZXMgdGhhdCB0aGUgY29sdW1uIGlzIHJlc2VydmVkIGZvciBhIGBXSEVSRWAgY29uZGl0aW9uLCBub3QgdG8gYmUgc2V0IG9yIHVwZGF0ZWQuXHJcbiAqXHJcbiAqIEl0IGNhbiBiZSBzZXQgZnJvbSBhIHN0cmluZyBpbml0aWFsaXphdGlvbiwgYnkgYWRkaW5nIGA/YCBpbiBmcm9udCBvZiB0aGUgbmFtZS5cclxuICpcclxuICogQHByb3BlcnR5IHsqfSBbZGVmXVxyXG4gKiBEZWZhdWx0IHZhbHVlIGZvciB0aGUgcHJvcGVydHksIHRvIGJlIHVzZWQgb25seSB3aGVuIHRoZSBzb3VyY2Ugb2JqZWN0IGRvZXNuJ3QgaGF2ZSB0aGUgcHJvcGVydHkuXHJcbiAqIEl0IGlzIGlnbm9yZWQgd2hlbiBwcm9wZXJ0eSBgaW5pdGAgaXMgc2V0LlxyXG4gKlxyXG4gKiBAcHJvcGVydHkge2hlbHBlcnMuaW5pdENCfSBbaW5pdF1cclxuICogT3ZlcnJpZGUgY2FsbGJhY2sgZm9yIHRoZSB2YWx1ZS5cclxuICpcclxuICogQHByb3BlcnR5IHtoZWxwZXJzLnNraXBDQn0gW3NraXBdXHJcbiAqIEFuIG92ZXJyaWRlIGZvciBza2lwcGluZyBjb2x1bW5zIGR5bmFtaWNhbGx5LlxyXG4gKlxyXG4gKiBVc2VkIGJ5IG1ldGhvZHMge0BsaW5rIGhlbHBlcnMudXBkYXRlIHVwZGF0ZX0gKGZvciBhIHNpbmdsZSBvYmplY3QpIGFuZCB7QGxpbmsgaGVscGVycy5zZXRzIHNldHN9LCBpZ25vcmVkIGJ5IG1ldGhvZHNcclxuICoge0BsaW5rIGhlbHBlcnMuaW5zZXJ0IGluc2VydH0gYW5kIHtAbGluayBoZWxwZXJzLnZhbHVlcyB2YWx1ZXN9LlxyXG4gKlxyXG4gKiBJdCBpcyBhbHNvIGlnbm9yZWQgd2hlbiBjb25kaXRpb25hbCBmbGFnIGBjbmRgIGlzIHNldC5cclxuICpcclxuICogQHJldHVybnMge2hlbHBlcnMuQ29sdW1ufVxyXG4gKlxyXG4gKiBAc2VlXHJcbiAqIHtAbGluayBoZWxwZXJzLkNvbHVtbkNvbmZpZyBDb2x1bW5Db25maWd9LFxyXG4gKiB7QGxpbmsgaGVscGVycy5Db2x1bW4jY2FzdFRleHQgY2FzdFRleHR9LFxyXG4gKiB7QGxpbmsgaGVscGVycy5Db2x1bW4jZXNjYXBlZE5hbWUgZXNjYXBlZE5hbWV9LFxyXG4gKiB7QGxpbmsgaGVscGVycy5Db2x1bW4jdmFyaWFibGUgdmFyaWFibGV9XHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGNvbnN0IHBncCA9IHJlcXVpcmUoJ3BnLXByb21pc2UnKSh7XHJcbiAqICAgICBjYXBTUUw6IHRydWUgLy8gaWYgeW91IHdhbnQgYWxsIGdlbmVyYXRlZCBTUUwgY2FwaXRhbGl6ZWRcclxuICogfSk7XHJcbiAqXHJcbiAqIGNvbnN0IENvbHVtbiA9IHBncC5oZWxwZXJzLkNvbHVtbjtcclxuICpcclxuICogLy8gY3JlYXRpbmcgYSBjb2x1bW4gZnJvbSBqdXN0IGEgbmFtZTpcclxuICogY29uc3QgY29sMSA9IG5ldyBDb2x1bW4oJ2NvbE5hbWUnKTtcclxuICogY29uc29sZS5sb2coY29sMSk7XHJcbiAqIC8vPT5cclxuICogLy8gQ29sdW1uIHtcclxuICogLy8gICAgbmFtZTogXCJjb2xOYW1lXCJcclxuICogLy8gfVxyXG4gKlxyXG4gKiAvLyBjcmVhdGluZyBhIGNvbHVtbiBmcm9tIGEgbmFtZSArIG1vZGlmaWVyOlxyXG4gKiBjb25zdCBjb2wyID0gbmV3IENvbHVtbignY29sTmFtZTpjc3YnKTtcclxuICogY29uc29sZS5sb2coY29sMik7XHJcbiAqIC8vPT5cclxuICogLy8gQ29sdW1uIHtcclxuICogLy8gICAgbmFtZTogXCJjb2xOYW1lXCJcclxuICogLy8gICAgbW9kOiBcIjpjc3ZcIlxyXG4gKiAvLyB9XHJcbiAqXHJcbiAqIC8vIGNyZWF0aW5nIGEgY29sdW1uIGZyb20gYSBjb25maWd1cmF0b3I6XHJcbiAqIGNvbnN0IGNvbDMgPSBuZXcgQ29sdW1uKHtcclxuICogICAgIG5hbWU6ICdjb2xOYW1lJywgLy8gcmVxdWlyZWRcclxuICogICAgIHByb3A6ICdwcm9wTmFtZScsIC8vIG9wdGlvbmFsXHJcbiAqICAgICBtb2Q6ICdeJywgLy8gb3B0aW9uYWxcclxuICogICAgIGRlZjogMTIzIC8vIG9wdGlvbmFsXHJcbiAqIH0pO1xyXG4gKiBjb25zb2xlLmxvZyhjb2wzKTtcclxuICogLy89PlxyXG4gKiAvLyBDb2x1bW4ge1xyXG4gKiAvLyAgICBuYW1lOiBcImNvbE5hbWVcIlxyXG4gKiAvLyAgICBwcm9wOiBcInByb3BOYW1lXCJcclxuICogLy8gICAgbW9kOiBcIl5cIlxyXG4gKiAvLyAgICBkZWY6IDEyM1xyXG4gKiAvLyB9XHJcbiAqXHJcbiAqL1xyXG5jbGFzcyBDb2x1bW4gZXh0ZW5kcyBJbm5lclN0YXRlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihjb2wpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGNvbCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgY29uc3QgaW5mbyA9IHBhcnNlQ29sdW1uKGNvbCk7XHJcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IGluZm8ubmFtZTtcclxuICAgICAgICAgICAgaWYgKCdtb2QnIGluIGluZm8pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubW9kID0gaW5mby5tb2Q7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCdjbmQnIGluIGluZm8pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY25kID0gaW5mby5jbmQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb2wgPSBhc3NlcnQoY29sLCBbJ25hbWUnLCAncHJvcCcsICdtb2QnLCAnY2FzdCcsICdjbmQnLCAnZGVmJywgJ2luaXQnLCAnc2tpcCddKTtcclxuICAgICAgICAgICAgaWYgKCduYW1lJyBpbiBjb2wpIHtcclxuICAgICAgICAgICAgICAgIGlmICghbnBtLnV0aWxzLmlzVGV4dChjb2wubmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkICduYW1lJyB2YWx1ZTogJHtucG0udXRpbHMudG9Kc29uKGNvbC5uYW1lKX0uIEEgbm9uLWVtcHR5IHN0cmluZyB3YXMgZXhwZWN0ZWQuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobnBtLnV0aWxzLmlzTnVsbChjb2wucHJvcCkgJiYgIWlzVmFsaWRWYXJpYWJsZShjb2wubmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkICduYW1lJyBzeW50YXg6ICR7bnBtLnV0aWxzLnRvSnNvbihjb2wubmFtZSl9LmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gY29sLm5hbWU7IC8vIGNvbHVtbiBuYW1lICsgcHJvcGVydHkgbmFtZSAoaWYgJ3Byb3AnIGlzbid0IHNwZWNpZmllZClcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIW5wbS51dGlscy5pc051bGwoY29sLnByb3ApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFucG0udXRpbHMuaXNUZXh0KGNvbC5wcm9wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkICdwcm9wJyB2YWx1ZTogJHtucG0udXRpbHMudG9Kc29uKGNvbC5wcm9wKX0uIEEgbm9uLWVtcHR5IHN0cmluZyB3YXMgZXhwZWN0ZWQuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZFZhcmlhYmxlKGNvbC5wcm9wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkICdwcm9wJyBzeW50YXg6ICR7bnBtLnV0aWxzLnRvSnNvbihjb2wucHJvcCl9LmApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sLnByb3AgIT09IGNvbC5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9wdGlvbmFsIHByb3BlcnR5IG5hbWUsIGlmIGRpZmZlcmVudCBmcm9tIHRoZSBjb2x1bW4ncyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3AgPSBjb2wucHJvcDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIW5wbS51dGlscy5pc051bGwoY29sLm1vZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbC5tb2QgIT09ICdzdHJpbmcnIHx8ICFpc1ZhbGlkTW9kKGNvbC5tb2QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgJ21vZCcgdmFsdWU6ICR7bnBtLnV0aWxzLnRvSnNvbihjb2wubW9kKX0uYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9kID0gY29sLm1vZDsgLy8gb3B0aW9uYWwgZm9ybWF0IG1vZGlmaWVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFucG0udXRpbHMuaXNOdWxsKGNvbC5jYXN0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FzdCA9IHBhcnNlQ2FzdChjb2wuY2FzdCk7IC8vIG9wdGlvbmFsIFNRTCB0eXBlIGNhc3RpbmdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgnY25kJyBpbiBjb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNuZCA9ICEhY29sLmNuZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgnZGVmJyBpbiBjb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZiA9IGNvbC5kZWY7IC8vIG9wdGlvbmFsIGRlZmF1bHRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29sLmluaXQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluaXQgPSBjb2wuaW5pdDsgLy8gb3B0aW9uYWwgdmFsdWUgb3ZlcnJpZGUgKG92ZXJyaWRlcyAnZGVmJyBhbHNvKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2wuc2tpcCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2tpcCA9IGNvbC5za2lwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjb2x1bW4gZGV0YWlscy4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdmFyaWFibGUgPSAnJHsnICsgKHRoaXMucHJvcCB8fCB0aGlzLm5hbWUpICsgKHRoaXMubW9kIHx8ICcnKSArICd9JztcclxuICAgICAgICBjb25zdCBjYXN0VGV4dCA9IHRoaXMuY2FzdCA/ICgnOjonICsgdGhpcy5jYXN0KSA6ICcnO1xyXG4gICAgICAgIGNvbnN0IGVzY2FwZWROYW1lID0gbnBtLmZvcm1hdHRpbmcuYXMubmFtZSh0aGlzLm5hbWUpO1xyXG5cclxuICAgICAgICB0aGlzLmV4dGVuZFN0YXRlKHt2YXJpYWJsZSwgY2FzdFRleHQsIGVzY2FwZWROYW1lfSk7XHJcbiAgICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuYW1lIGhlbHBlcnMuQ29sdW1uI3ZhcmlhYmxlXHJcbiAgICAgKiBAdHlwZSBzdHJpbmdcclxuICAgICAqIEByZWFkb25seVxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBGdWxsLXN5bnRheCBmb3JtYXR0aW5nIHZhcmlhYmxlLCByZWFkeSBmb3IgZGlyZWN0IHVzZSBpbiBxdWVyeSB0ZW1wbGF0ZXMuXHJcbiAgICAgKlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqXHJcbiAgICAgKiBjb25zdCBjcyA9IG5ldyBwZ3AuaGVscGVycy5Db2x1bW5TZXQoW1xyXG4gICAgICogICAgICdpZCcsXHJcbiAgICAgKiAgICAgJ2Nvb3JkaW5hdGU6anNvbicsXHJcbiAgICAgKiAgICAge1xyXG4gICAgICogICAgICAgICBuYW1lOiAncGxhY2VzJyxcclxuICAgICAqICAgICAgICAgbW9kOiAnOmNzdicsXHJcbiAgICAgKiAgICAgICAgIGNhc3Q6ICdpbnRbXSdcclxuICAgICAqICAgICB9XHJcbiAgICAgKiBdKTtcclxuICAgICAqXHJcbiAgICAgKiAvLyBjcy5jb2x1bW5zWzBdLnZhcmlhYmxlID0gJHtpZH1cclxuICAgICAqIC8vIGNzLmNvbHVtbnNbMV0udmFyaWFibGUgPSAke2Nvb3JkaW5hdGU6anNvbn1cclxuICAgICAqIC8vIGNzLmNvbHVtbnNbMl0udmFyaWFibGUgPSAke3BsYWNlczpjc3Z9OjppbnRbXVxyXG4gICAgICovXHJcbiAgICBnZXQgdmFyaWFibGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lubmVyLnZhcmlhYmxlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5hbWUgaGVscGVycy5Db2x1bW4jY2FzdFRleHRcclxuICAgICAqIEB0eXBlIHN0cmluZ1xyXG4gICAgICogQHJlYWRvbmx5XHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIEZ1bGwtc3ludGF4IHNxbCB0eXBlIGNhc3RpbmcsIGlmIHRoZXJlIGlzIGFueSwgb3IgZWxzZSBhbiBlbXB0eSBzdHJpbmcuXHJcbiAgICAgKi9cclxuICAgIGdldCBjYXN0VGV4dCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5uZXIuY2FzdFRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbmFtZSBoZWxwZXJzLkNvbHVtbiNlc2NhcGVkTmFtZVxyXG4gICAgICogQHR5cGUgc3RyaW5nXHJcbiAgICAgKiBAcmVhZG9ubHlcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogRXNjYXBlZCBuYW1lIG9mIHRoZSBjb2x1bW4sIHJlYWR5IHRvIGJlIGluamVjdGVkIGludG8gcXVlcmllcyBkaXJlY3RseS5cclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIGdldCBlc2NhcGVkTmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5uZXIuZXNjYXBlZE5hbWU7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZUNhc3QobmFtZSkge1xyXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIGNvbnN0IHMgPSBuYW1lLnJlcGxhY2UoL15bOlxcc10qfFxccyokL2csICcnKTtcclxuICAgICAgICBpZiAocykge1xyXG4gICAgICAgICAgICByZXR1cm4gcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkICdjYXN0JyB2YWx1ZTogJHtucG0udXRpbHMudG9Kc29uKG5hbWUpfS5gKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VDb2x1bW4obmFtZSkge1xyXG4gICAgY29uc3QgbSA9IG5hbWUubWF0Y2gobnBtLnBhdHRlcm5zLnZhbGlkQ29sdW1uKTtcclxuICAgIGlmIChtICYmIG1bMF0gPT09IG5hbWUpIHtcclxuICAgICAgICBjb25zdCByZXMgPSB7fTtcclxuICAgICAgICBpZiAobmFtZVswXSA9PT0gJz8nKSB7XHJcbiAgICAgICAgICAgIHJlcy5jbmQgPSB0cnVlO1xyXG4gICAgICAgICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG1vZCA9IG5hbWUubWF0Y2gobnBtLnBhdHRlcm5zLmhhc1ZhbGlkTW9kaWZpZXIpO1xyXG4gICAgICAgIGlmIChtb2QpIHtcclxuICAgICAgICAgICAgcmVzLm5hbWUgPSBuYW1lLnN1YnN0cigwLCBtb2QuaW5kZXgpO1xyXG4gICAgICAgICAgICByZXMubW9kID0gbW9kWzBdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgY29sdW1uIHN5bnRheDogJHtucG0udXRpbHMudG9Kc29uKG5hbWUpfS5gKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNWYWxpZE1vZChtb2QpIHtcclxuICAgIHJldHVybiBucG0ucGF0dGVybnMudmFsaWRNb2RpZmllcnMuaW5kZXhPZihtb2QpICE9PSAtMTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNWYWxpZFZhcmlhYmxlKG5hbWUpIHtcclxuICAgIGNvbnN0IG0gPSBuYW1lLm1hdGNoKG5wbS5wYXR0ZXJucy52YWxpZFZhcmlhYmxlKTtcclxuICAgIHJldHVybiAhIW0gJiYgbVswXSA9PT0gbmFtZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBtZXRob2QgaGVscGVycy5Db2x1bW4jdG9TdHJpbmdcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIENyZWF0ZXMgYSB3ZWxsLWZvcm1hdHRlZCBtdWx0aS1saW5lIHN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIG9iamVjdC5cclxuICpcclxuICogSXQgaXMgY2FsbGVkIGF1dG9tYXRpY2FsbHkgd2hlbiB3cml0aW5nIHRoZSBvYmplY3QgaW50byB0aGUgY29uc29sZS5cclxuICpcclxuICogQHBhcmFtIHtudW1iZXJ9IFtsZXZlbD0wXVxyXG4gKiBOZXN0ZWQgb3V0cHV0IGxldmVsLCB0byBwcm92aWRlIHZpc3VhbCBvZmZzZXQuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAqL1xyXG5Db2x1bW4ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKGxldmVsKSB7XHJcbiAgICBsZXZlbCA9IGxldmVsID4gMCA/IHBhcnNlSW50KGxldmVsKSA6IDA7XHJcbiAgICBjb25zdCBnYXAwID0gbnBtLnV0aWxzLm1lc3NhZ2VHYXAobGV2ZWwpLFxyXG4gICAgICAgIGdhcDEgPSBucG0udXRpbHMubWVzc2FnZUdhcChsZXZlbCArIDEpLFxyXG4gICAgICAgIGxpbmVzID0gW1xyXG4gICAgICAgICAgICBnYXAwICsgJ0NvbHVtbiB7JyxcclxuICAgICAgICAgICAgZ2FwMSArICduYW1lOiAnICsgbnBtLnV0aWxzLnRvSnNvbih0aGlzLm5hbWUpXHJcbiAgICAgICAgXTtcclxuICAgIGlmICgncHJvcCcgaW4gdGhpcykge1xyXG4gICAgICAgIGxpbmVzLnB1c2goZ2FwMSArICdwcm9wOiAnICsgbnBtLnV0aWxzLnRvSnNvbih0aGlzLnByb3ApKTtcclxuICAgIH1cclxuICAgIGlmICgnbW9kJyBpbiB0aGlzKSB7XHJcbiAgICAgICAgbGluZXMucHVzaChnYXAxICsgJ21vZDogJyArIG5wbS51dGlscy50b0pzb24odGhpcy5tb2QpKTtcclxuICAgIH1cclxuICAgIGlmICgnY2FzdCcgaW4gdGhpcykge1xyXG4gICAgICAgIGxpbmVzLnB1c2goZ2FwMSArICdjYXN0OiAnICsgbnBtLnV0aWxzLnRvSnNvbih0aGlzLmNhc3QpKTtcclxuICAgIH1cclxuICAgIGlmICgnY25kJyBpbiB0aGlzKSB7XHJcbiAgICAgICAgbGluZXMucHVzaChnYXAxICsgJ2NuZDogJyArIG5wbS51dGlscy50b0pzb24odGhpcy5jbmQpKTtcclxuICAgIH1cclxuICAgIGlmICgnZGVmJyBpbiB0aGlzKSB7XHJcbiAgICAgICAgbGluZXMucHVzaChnYXAxICsgJ2RlZjogJyArIG5wbS51dGlscy50b0pzb24odGhpcy5kZWYpKTtcclxuICAgIH1cclxuICAgIGlmICgnaW5pdCcgaW4gdGhpcykge1xyXG4gICAgICAgIGxpbmVzLnB1c2goZ2FwMSArICdpbml0OiBbRnVuY3Rpb25dJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoJ3NraXAnIGluIHRoaXMpIHtcclxuICAgICAgICBsaW5lcy5wdXNoKGdhcDEgKyAnc2tpcDogW0Z1bmN0aW9uXScpO1xyXG4gICAgfVxyXG4gICAgbGluZXMucHVzaChnYXAwICsgJ30nKTtcclxuICAgIHJldHVybiBsaW5lcy5qb2luKG5wbS5vcy5FT0wpO1xyXG59O1xyXG5cclxubnBtLnV0aWxzLmFkZEluc3BlY3Rpb24oQ29sdW1uLCBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAdHlwZWRlZiBoZWxwZXJzLkNvbHVtbkNvbmZpZ1xyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQSBzaW1wbGUgc3RydWN0dXJlIHdpdGggY29sdW1uIGRldGFpbHMsIHRvIGJlIHBhc3NlZCBpbnRvIHRoZSB7QGxpbmsgaGVscGVycy5Db2x1bW4gQ29sdW1ufSBjb25zdHJ1Y3RvciBmb3IgaW5pdGlhbGl6YXRpb24uXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW1lXHJcbiAqIERlc3RpbmF0aW9uIGNvbHVtbiBuYW1lICsgc291cmNlIHByb3BlcnR5IG5hbWUgKGlmIGBwcm9wYCBpcyBza2lwcGVkKS4gVGhlIG5hbWUgbXVzdCBhZGhlcmUgdG8gSmF2YVNjcmlwdCBzeW50YXggZm9yIHZhcmlhYmxlcyxcclxuICogdW5sZXNzIGBwcm9wYCBpcyBzcGVjaWZpZWQsIGluIHdoaWNoIGNhc2UgYG5hbWVgIHJlcHJlc2VudHMgb25seSB0aGUgY29sdW1uIG5hbWUsIGFuZCB0aGVyZWZvcmUgY2FuIGJlIGFueSBub24tZW1wdHkgc3RyaW5nLlxyXG4gKlxyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3Byb3BdXHJcbiAqIFNvdXJjZSBwcm9wZXJ0eSBuYW1lLCBpZiBkaWZmZXJlbnQgZnJvbSB0aGUgY29sdW1uJ3MgbmFtZS4gSXQgbXVzdCBhZGhlcmUgdG8gSmF2YVNjcmlwdCBzeW50YXggZm9yIHZhcmlhYmxlcy5cclxuICpcclxuICogSXQgaXMgaWdub3JlZCB3aGVuIGl0IGlzIHRoZSBzYW1lIGFzIGBuYW1lYC5cclxuICpcclxuICogQHByb3BlcnR5IHtzdHJpbmd9IFttb2RdXHJcbiAqIEZvcm1hdHRpbmcgbW9kaWZpZXIsIGFzIHN1cHBvcnRlZCBieSBtZXRob2Qge0BsaW5rIGZvcm1hdHRpbmcuZm9ybWF0IGFzLmZvcm1hdH06IGBeYCwgYH5gLCBgI2AsIGA6Y3N2YCwgYDpsaXN0YCwgYDpqc29uYCwgYDphbGlhc2AsIGA6bmFtZWAsIGA6cmF3YCwgYDp2YWx1ZWAuXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY2FzdF1cclxuICogU2VydmVyLXNpZGUgdHlwZSBjYXN0aW5nLiBMZWFkaW5nIGA6OmAgaXMgYWxsb3dlZCwgYnV0IG5vdCBuZWVkZWQgKGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCB3aGVuIHNwZWNpZmllZCkuXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2NuZF1cclxuICogQ29uZGl0aW9uYWwgY29sdW1uIGZsYWcuXHJcbiAqXHJcbiAqIFVzZWQgYnkgbWV0aG9kcyB7QGxpbmsgaGVscGVycy51cGRhdGUgdXBkYXRlfSBhbmQge0BsaW5rIGhlbHBlcnMuc2V0cyBzZXRzfSwgaWdub3JlZCBieSBtZXRob2RzIHtAbGluayBoZWxwZXJzLmluc2VydCBpbnNlcnR9IGFuZFxyXG4gKiB7QGxpbmsgaGVscGVycy52YWx1ZXMgdmFsdWVzfS4gSXQgaW5kaWNhdGVzIHRoYXQgdGhlIGNvbHVtbiBpcyByZXNlcnZlZCBmb3IgYSBgV0hFUkVgIGNvbmRpdGlvbiwgbm90IHRvIGJlIHNldCBvciB1cGRhdGVkLlxyXG4gKlxyXG4gKiBJdCBjYW4gYmUgc2V0IGZyb20gYSBzdHJpbmcgaW5pdGlhbGl6YXRpb24sIGJ5IGFkZGluZyBgP2AgaW4gZnJvbnQgb2YgdGhlIG5hbWUuXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7Kn0gW2RlZl1cclxuICogRGVmYXVsdCB2YWx1ZSBmb3IgdGhlIHByb3BlcnR5LCB0byBiZSB1c2VkIG9ubHkgd2hlbiB0aGUgc291cmNlIG9iamVjdCBkb2Vzbid0IGhhdmUgdGhlIHByb3BlcnR5LlxyXG4gKiBJdCBpcyBpZ25vcmVkIHdoZW4gcHJvcGVydHkgYGluaXRgIGlzIHNldC5cclxuICpcclxuICogQHByb3BlcnR5IHtoZWxwZXJzLmluaXRDQn0gW2luaXRdXHJcbiAqIE92ZXJyaWRlIGNhbGxiYWNrIGZvciB0aGUgdmFsdWUuXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7aGVscGVycy5za2lwQ0J9IFtza2lwXVxyXG4gKiBBbiBvdmVycmlkZSBmb3Igc2tpcHBpbmcgY29sdW1ucyBkeW5hbWljYWxseS5cclxuICpcclxuICogVXNlZCBieSBtZXRob2RzIHtAbGluayBoZWxwZXJzLnVwZGF0ZSB1cGRhdGV9IChmb3IgYSBzaW5nbGUgb2JqZWN0KSBhbmQge0BsaW5rIGhlbHBlcnMuc2V0cyBzZXRzfSwgaWdub3JlZCBieSBtZXRob2RzXHJcbiAqIHtAbGluayBoZWxwZXJzLmluc2VydCBpbnNlcnR9IGFuZCB7QGxpbmsgaGVscGVycy52YWx1ZXMgdmFsdWVzfS5cclxuICpcclxuICogSXQgaXMgYWxzbyBpZ25vcmVkIHdoZW4gY29uZGl0aW9uYWwgZmxhZyBgY25kYCBpcyBzZXQuXHJcbiAqXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBjYWxsYmFjayBoZWxwZXJzLmluaXRDQlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQSBjYWxsYmFjayBmdW5jdGlvbiB0eXBlIHVzZWQgYnkgcGFyYW1ldGVyIGBpbml0YCB3aXRoaW4ge0BsaW5rIGhlbHBlcnMuQ29sdW1uQ29uZmlnIENvbHVtbkNvbmZpZ30uXHJcbiAqXHJcbiAqIEl0IHdvcmtzIGFzIGFuIG92ZXJyaWRlIGZvciB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZSBpbiB0aGUgYHNvdXJjZWAgb2JqZWN0LlxyXG4gKlxyXG4gKiBUaGUgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggYHRoaXNgIHNldCB0byB0aGUgYHNvdXJjZWAgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IGNvbFxyXG4gKiBDb2x1bW4tdG8tcHJvcGVydHkgZGVzY3JpcHRvci5cclxuICpcclxuICogQHBhcmFtIHtvYmplY3R9IGNvbC5zb3VyY2VcclxuICogVGhlIHNvdXJjZSBvYmplY3QsIGVxdWFscyB0byBgdGhpc2AgdGhhdCdzIHBhc3NlZCBpbnRvIHRoZSBmdW5jdGlvbi5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGNvbC5uYW1lXHJcbiAqIFJlc29sdmVkIG5hbWUgb2YgdGhlIHByb3BlcnR5IHdpdGhpbiB0aGUgYHNvdXJjZWAgb2JqZWN0LCBpLmUuIHRoZSB2YWx1ZSBvZiBgbmFtZWAgd2hlbiBgcHJvcGAgaXMgbm90IHVzZWRcclxuICogZm9yIHRoZSBjb2x1bW4sIG9yIHRoZSB2YWx1ZSBvZiBgcHJvcGAgd2hlbiBpdCBpcyBzcGVjaWZpZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gY29sLnZhbHVlXHJcbiAqXHJcbiAqIFByb3BlcnR5IHZhbHVlLCBzZXQgdG8gb25lIG9mIHRoZSBmb2xsb3dpbmc6XHJcbiAqXHJcbiAqIC0gVmFsdWUgb2YgdGhlIHByb3BlcnR5IHdpdGhpbiB0aGUgYHNvdXJjZWAgb2JqZWN0IChgdmFsdWVgID0gYHNvdXJjZVtuYW1lXWApLCBpZiB0aGUgcHJvcGVydHkgZXhpc3RzXHJcbiAqIC0gSWYgdGhlIHByb3BlcnR5IGRvZXNuJ3QgZXhpc3QgYW5kIGBkZWZgIGlzIHNldCBpbiB0aGUgY29sdW1uLCB0aGVuIGB2YWx1ZWAgaXMgc2V0IHRvIHRoZSB2YWx1ZSBvZiBgZGVmYFxyXG4gKiAtIElmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0IGV4aXN0IGFuZCBgZGVmYCBpcyBub3Qgc2V0IGluIHRoZSBjb2x1bW4sIHRoZW4gYHZhbHVlYCBpcyBzZXQgdG8gYHVuZGVmaW5lZGBcclxuICpcclxuICogQHBhcmFtIHtib29sZWFufSBjb2wuZXhpc3RzXHJcbiAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBwcm9wZXJ0eSBleGlzdHMgaW4gdGhlIGBzb3VyY2VgIG9iamVjdCAoYGV4aXN0cyA9IG5hbWUgaW4gc291cmNlYCkuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHsqfVxyXG4gKiBUaGUgbmV3IHZhbHVlIHRvIGJlIHVzZWQgZm9yIHRoZSBjb3JyZXNwb25kaW5nIGNvbHVtbi5cclxuICovXHJcblxyXG4vKipcclxuICogQGNhbGxiYWNrIGhlbHBlcnMuc2tpcENCXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBBIGNhbGxiYWNrIGZ1bmN0aW9uIHR5cGUgdXNlZCBieSBwYXJhbWV0ZXIgYHNraXBgIHdpdGhpbiB7QGxpbmsgaGVscGVycy5Db2x1bW5Db25maWcgQ29sdW1uQ29uZmlnfS5cclxuICpcclxuICogSXQgaXMgdG8gZHluYW1pY2FsbHkgZGV0ZXJtaW5lIHdoZW4gdGhlIHByb3BlcnR5IHdpdGggc3BlY2lmaWVkIGBuYW1lYCBpbiB0aGUgYHNvdXJjZWAgb2JqZWN0IGlzIHRvIGJlIHNraXBwZWQuXHJcbiAqXHJcbiAqIFRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCBgdGhpc2Agc2V0IHRvIHRoZSBgc291cmNlYCBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gY29sXHJcbiAqIENvbHVtbi10by1wcm9wZXJ0eSBkZXNjcmlwdG9yLlxyXG4gKlxyXG4gKiBAcGFyYW0ge29iamVjdH0gY29sLnNvdXJjZVxyXG4gKiBUaGUgc291cmNlIG9iamVjdCwgZXF1YWxzIHRvIGB0aGlzYCB0aGF0J3MgcGFzc2VkIGludG8gdGhlIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sLm5hbWVcclxuICogUmVzb2x2ZWQgbmFtZSBvZiB0aGUgcHJvcGVydHkgd2l0aGluIHRoZSBgc291cmNlYCBvYmplY3QsIGkuZS4gdGhlIHZhbHVlIG9mIGBuYW1lYCB3aGVuIGBwcm9wYCBpcyBub3QgdXNlZFxyXG4gKiBmb3IgdGhlIGNvbHVtbiwgb3IgdGhlIHZhbHVlIG9mIGBwcm9wYCB3aGVuIGl0IGlzIHNwZWNpZmllZC5cclxuICpcclxuICogQHBhcmFtIHsqfSBjb2wudmFsdWVcclxuICpcclxuICogUHJvcGVydHkgdmFsdWUsIHNldCB0byBvbmUgb2YgdGhlIGZvbGxvd2luZzpcclxuICpcclxuICogLSBWYWx1ZSBvZiB0aGUgcHJvcGVydHkgd2l0aGluIHRoZSBgc291cmNlYCBvYmplY3QgKGB2YWx1ZWAgPSBgc291cmNlW25hbWVdYCksIGlmIHRoZSBwcm9wZXJ0eSBleGlzdHNcclxuICogLSBJZiB0aGUgcHJvcGVydHkgZG9lc24ndCBleGlzdCBhbmQgYGRlZmAgaXMgc2V0IGluIHRoZSBjb2x1bW4sIHRoZW4gYHZhbHVlYCBpcyBzZXQgdG8gdGhlIHZhbHVlIG9mIGBkZWZgXHJcbiAqIC0gSWYgdGhlIHByb3BlcnR5IGRvZXNuJ3QgZXhpc3QgYW5kIGBkZWZgIGlzIG5vdCBzZXQgaW4gdGhlIGNvbHVtbiwgdGhlbiBgdmFsdWVgIGlzIHNldCB0byBgdW5kZWZpbmVkYFxyXG4gKlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbC5leGlzdHNcclxuICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHByb3BlcnR5IGV4aXN0cyBpbiB0aGUgYHNvdXJjZWAgb2JqZWN0IChgZXhpc3RzID0gbmFtZSBpbiBzb3VyY2VgKS5cclxuICpcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqIEEgdHJ1dGh5IHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGNvbHVtbiBpcyB0byBiZSBza2lwcGVkLlxyXG4gKlxyXG4gKi9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge0NvbHVtbn07XHJcbiJdLCJuYW1lcyI6WyJJbm5lclN0YXRlIiwicmVxdWlyZSIsImFzc2VydCIsIm5wbSIsIm9zIiwidXRpbHMiLCJmb3JtYXR0aW5nIiwicGF0dGVybnMiLCJDb2x1bW4iLCJjb25zdHJ1Y3RvciIsImNvbCIsImluZm8iLCJwYXJzZUNvbHVtbiIsIm5hbWUiLCJtb2QiLCJjbmQiLCJpc1RleHQiLCJUeXBlRXJyb3IiLCJ0b0pzb24iLCJpc051bGwiLCJwcm9wIiwiaXNWYWxpZFZhcmlhYmxlIiwiaXNWYWxpZE1vZCIsImNhc3QiLCJwYXJzZUNhc3QiLCJkZWYiLCJpbml0Iiwic2tpcCIsInZhcmlhYmxlIiwiY2FzdFRleHQiLCJlc2NhcGVkTmFtZSIsImFzIiwiZXh0ZW5kU3RhdGUiLCJPYmplY3QiLCJmcmVlemUiLCJfaW5uZXIiLCJzIiwicmVwbGFjZSIsIm0iLCJtYXRjaCIsInZhbGlkQ29sdW1uIiwicmVzIiwic3Vic3RyIiwiaGFzVmFsaWRNb2RpZmllciIsImluZGV4IiwidmFsaWRNb2RpZmllcnMiLCJpbmRleE9mIiwidmFsaWRWYXJpYWJsZSIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwibGV2ZWwiLCJwYXJzZUludCIsImdhcDAiLCJtZXNzYWdlR2FwIiwiZ2FwMSIsImxpbmVzIiwicHVzaCIsImpvaW4iLCJFT0wiLCJhZGRJbnNwZWN0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/helpers/column.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/helpers/index.js":
/*!******************************************************!*\
  !*** ./node_modules/pg-promise/lib/helpers/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { Column } = __webpack_require__(/*! ./column */ \"(rsc)/./node_modules/pg-promise/lib/helpers/column.js\");\nconst { ColumnSet } = __webpack_require__(/*! ./column-set */ \"(rsc)/./node_modules/pg-promise/lib/helpers/column-set.js\");\nconst { TableName } = __webpack_require__(/*! ./table-name */ \"(rsc)/./node_modules/pg-promise/lib/helpers/table-name.js\");\nconst method = __webpack_require__(/*! ./methods */ \"(rsc)/./node_modules/pg-promise/lib/helpers/methods/index.js\");\n/**\r\n * @namespace helpers\r\n * @description\r\n * Namespace for query-formatting generators, available as {@link module:pg-promise~helpers pgp.helpers}, after initializing the library.\r\n *\r\n * It unifies the approach to generating multi-row `INSERT` / `UPDATE` queries with the single-row ones.\r\n *\r\n * See also: $[Performance Boost].\r\n *\r\n * @property {function} TableName\r\n * {@link helpers.TableName TableName} class constructor.\r\n *\r\n * @property {function} ColumnSet\r\n * {@link helpers.ColumnSet ColumnSet} class constructor.\r\n *\r\n * @property {function} Column\r\n * {@link helpers.Column Column} class constructor.\r\n *\r\n * @property {function} insert\r\n * {@link helpers.insert insert} static method.\r\n *\r\n * @property {function} update\r\n * {@link helpers.update update} static method.\r\n *\r\n * @property {function} values\r\n * {@link helpers.values values} static method.\r\n *\r\n * @property {function} sets\r\n * {@link helpers.sets sets} static method.\r\n *\r\n * @property {function} concat\r\n * {@link helpers.concat concat} static method.\r\n */ module.exports = (config)=>{\n    const capSQL = ()=>config.options && config.options.capSQL;\n    const res = {\n        insert (data, columns, table) {\n            return method.insert(data, columns, table, capSQL());\n        },\n        update (data, columns, table, options) {\n            return method.update(data, columns, table, options, capSQL());\n        },\n        concat (queries) {\n            return method.concat(queries, capSQL());\n        },\n        values (data, columns) {\n            return method.values(data, columns, capSQL());\n        },\n        sets (data, columns) {\n            return method.sets(data, columns, capSQL());\n        },\n        TableName,\n        ColumnSet,\n        Column\n    };\n    return res;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvaGVscGVycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztDQU9DO0FBRUQsTUFBTSxFQUFDQSxNQUFNLEVBQUMsR0FBR0MsbUJBQU9BLENBQUM7QUFDekIsTUFBTSxFQUFDQyxTQUFTLEVBQUMsR0FBR0QsbUJBQU9BLENBQUM7QUFDNUIsTUFBTSxFQUFDRSxTQUFTLEVBQUMsR0FBR0YsbUJBQU9BLENBQUM7QUFDNUIsTUFBTUcsU0FBU0gsbUJBQU9BLENBQUM7QUFFdkI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBZ0NDLEdBQ0RJLE9BQU9DLE9BQU8sR0FBR0MsQ0FBQUE7SUFDYixNQUFNQyxTQUFTLElBQU1ELE9BQU9FLE9BQU8sSUFBSUYsT0FBT0UsT0FBTyxDQUFDRCxNQUFNO0lBQzVELE1BQU1FLE1BQU07UUFDUkMsUUFBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLEtBQUs7WUFDdkIsT0FBT1YsT0FBT08sTUFBTSxDQUFDQyxNQUFNQyxTQUFTQyxPQUFPTjtRQUMvQztRQUNBTyxRQUFPSCxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsS0FBSyxFQUFFTCxPQUFPO1lBQ2hDLE9BQU9MLE9BQU9XLE1BQU0sQ0FBQ0gsTUFBTUMsU0FBU0MsT0FBT0wsU0FBU0Q7UUFDeEQ7UUFDQVEsUUFBT0MsT0FBTztZQUNWLE9BQU9iLE9BQU9ZLE1BQU0sQ0FBQ0MsU0FBU1Q7UUFDbEM7UUFDQVUsUUFBT04sSUFBSSxFQUFFQyxPQUFPO1lBQ2hCLE9BQU9ULE9BQU9jLE1BQU0sQ0FBQ04sTUFBTUMsU0FBU0w7UUFDeEM7UUFDQVcsTUFBS1AsSUFBSSxFQUFFQyxPQUFPO1lBQ2QsT0FBT1QsT0FBT2UsSUFBSSxDQUFDUCxNQUFNQyxTQUFTTDtRQUN0QztRQUNBTDtRQUNBRDtRQUNBRjtJQUNKO0lBQ0EsT0FBT1U7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL2h0bWwtY29udmVydGVyLy4vbm9kZV9tb2R1bGVzL3BnLXByb21pc2UvbGliL2hlbHBlcnMvaW5kZXguanM/MTg5NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgVml0YWx5IFRvbWlsb3ZcclxuICpcclxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHRvcC1sZXZlbCBkaXJlY3Rvcnkgb2YgdGhpcyBkaXN0cmlidXRpb25cclxuICogZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbi5cclxuICpcclxuICogUmVtb3ZhbCBvciBtb2RpZmljYXRpb24gb2YgdGhpcyBjb3B5cmlnaHQgbm90aWNlIGlzIHByb2hpYml0ZWQuXHJcbiAqL1xyXG5cclxuY29uc3Qge0NvbHVtbn0gPSByZXF1aXJlKCcuL2NvbHVtbicpO1xyXG5jb25zdCB7Q29sdW1uU2V0fSA9IHJlcXVpcmUoJy4vY29sdW1uLXNldCcpO1xyXG5jb25zdCB7VGFibGVOYW1lfSA9IHJlcXVpcmUoJy4vdGFibGUtbmFtZScpO1xyXG5jb25zdCBtZXRob2QgPSByZXF1aXJlKCcuL21ldGhvZHMnKTtcclxuXHJcbi8qKlxyXG4gKiBAbmFtZXNwYWNlIGhlbHBlcnNcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIE5hbWVzcGFjZSBmb3IgcXVlcnktZm9ybWF0dGluZyBnZW5lcmF0b3JzLCBhdmFpbGFibGUgYXMge0BsaW5rIG1vZHVsZTpwZy1wcm9taXNlfmhlbHBlcnMgcGdwLmhlbHBlcnN9LCBhZnRlciBpbml0aWFsaXppbmcgdGhlIGxpYnJhcnkuXHJcbiAqXHJcbiAqIEl0IHVuaWZpZXMgdGhlIGFwcHJvYWNoIHRvIGdlbmVyYXRpbmcgbXVsdGktcm93IGBJTlNFUlRgIC8gYFVQREFURWAgcXVlcmllcyB3aXRoIHRoZSBzaW5nbGUtcm93IG9uZXMuXHJcbiAqXHJcbiAqIFNlZSBhbHNvOiAkW1BlcmZvcm1hbmNlIEJvb3N0XS5cclxuICpcclxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gVGFibGVOYW1lXHJcbiAqIHtAbGluayBoZWxwZXJzLlRhYmxlTmFtZSBUYWJsZU5hbWV9IGNsYXNzIGNvbnN0cnVjdG9yLlxyXG4gKlxyXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBDb2x1bW5TZXRcclxuICoge0BsaW5rIGhlbHBlcnMuQ29sdW1uU2V0IENvbHVtblNldH0gY2xhc3MgY29uc3RydWN0b3IuXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IENvbHVtblxyXG4gKiB7QGxpbmsgaGVscGVycy5Db2x1bW4gQ29sdW1ufSBjbGFzcyBjb25zdHJ1Y3Rvci5cclxuICpcclxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gaW5zZXJ0XHJcbiAqIHtAbGluayBoZWxwZXJzLmluc2VydCBpbnNlcnR9IHN0YXRpYyBtZXRob2QuXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IHVwZGF0ZVxyXG4gKiB7QGxpbmsgaGVscGVycy51cGRhdGUgdXBkYXRlfSBzdGF0aWMgbWV0aG9kLlxyXG4gKlxyXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSB2YWx1ZXNcclxuICoge0BsaW5rIGhlbHBlcnMudmFsdWVzIHZhbHVlc30gc3RhdGljIG1ldGhvZC5cclxuICpcclxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gc2V0c1xyXG4gKiB7QGxpbmsgaGVscGVycy5zZXRzIHNldHN9IHN0YXRpYyBtZXRob2QuXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IGNvbmNhdFxyXG4gKiB7QGxpbmsgaGVscGVycy5jb25jYXQgY29uY2F0fSBzdGF0aWMgbWV0aG9kLlxyXG4gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBjb25maWcgPT4ge1xyXG4gICAgY29uc3QgY2FwU1FMID0gKCkgPT4gY29uZmlnLm9wdGlvbnMgJiYgY29uZmlnLm9wdGlvbnMuY2FwU1FMO1xyXG4gICAgY29uc3QgcmVzID0ge1xyXG4gICAgICAgIGluc2VydChkYXRhLCBjb2x1bW5zLCB0YWJsZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWV0aG9kLmluc2VydChkYXRhLCBjb2x1bW5zLCB0YWJsZSwgY2FwU1FMKCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdXBkYXRlKGRhdGEsIGNvbHVtbnMsIHRhYmxlLCBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtZXRob2QudXBkYXRlKGRhdGEsIGNvbHVtbnMsIHRhYmxlLCBvcHRpb25zLCBjYXBTUUwoKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb25jYXQocXVlcmllcykge1xyXG4gICAgICAgICAgICByZXR1cm4gbWV0aG9kLmNvbmNhdChxdWVyaWVzLCBjYXBTUUwoKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB2YWx1ZXMoZGF0YSwgY29sdW1ucykge1xyXG4gICAgICAgICAgICByZXR1cm4gbWV0aG9kLnZhbHVlcyhkYXRhLCBjb2x1bW5zLCBjYXBTUUwoKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXRzKGRhdGEsIGNvbHVtbnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1ldGhvZC5zZXRzKGRhdGEsIGNvbHVtbnMsIGNhcFNRTCgpKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIFRhYmxlTmFtZSxcclxuICAgICAgICBDb2x1bW5TZXQsXHJcbiAgICAgICAgQ29sdW1uXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHJlcztcclxufTtcclxuIl0sIm5hbWVzIjpbIkNvbHVtbiIsInJlcXVpcmUiLCJDb2x1bW5TZXQiLCJUYWJsZU5hbWUiLCJtZXRob2QiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29uZmlnIiwiY2FwU1FMIiwib3B0aW9ucyIsInJlcyIsImluc2VydCIsImRhdGEiLCJjb2x1bW5zIiwidGFibGUiLCJ1cGRhdGUiLCJjb25jYXQiLCJxdWVyaWVzIiwidmFsdWVzIiwic2V0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/helpers/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/helpers/methods/concat.js":
/*!***************************************************************!*\
  !*** ./node_modules/pg-promise/lib/helpers/methods/concat.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { QueryFile } = __webpack_require__(/*! ../../query-file */ \"(rsc)/./node_modules/pg-promise/lib/query-file.js\");\nconst npm = {\n    formatting: __webpack_require__(/*! ../../formatting */ \"(rsc)/./node_modules/pg-promise/lib/formatting.js\")\n};\n/**\r\n * @method helpers.concat\r\n * @description\r\n * Formats and concatenates multiple queries into a single query string.\r\n *\r\n * Before joining the queries, the method does the following:\r\n *  - Formats each query, if `values` are provided;\r\n *  - Removes all leading and trailing spaces, tabs and semi-colons;\r\n *  - Automatically skips all empty queries.\r\n *\r\n * @param {array<string|helpers.QueryFormat|QueryFile>} queries\r\n * Array of mixed-type elements:\r\n * - a simple query string, to be used as is\r\n * - a {@link helpers.QueryFormat QueryFormat}-like object = `{query, [values], [options]}`\r\n * - a {@link QueryFile} object\r\n *\r\n * @returns {string}\r\n * Concatenated string with all queries.\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')();\r\n *\r\n * const qf1 = new pgp.QueryFile('./query1.sql', {minify: true});\r\n * const qf2 = new pgp.QueryFile('./query2.sql', {minify: true});\r\n *\r\n * const query = pgp.helpers.concat([\r\n *     {query: 'INSERT INTO Users(name, age) VALUES($1, $2)', values: ['John', 23]}, // QueryFormat-like object\r\n *     {query: qf1, values: [1, 'Name']}, // QueryFile with formatting parameters\r\n *     'SELECT count(*) FROM Users', // a simple-string query,\r\n *     qf2 // direct QueryFile object\r\n * ]);\r\n *\r\n * // query = concatenated string with all the queries\r\n */ function concat(queries, capSQL) {\n    if (!Array.isArray(queries)) {\n        throw new TypeError(\"Parameter 'queries' must be an array.\");\n    }\n    const fmOptions = {\n        capSQL\n    };\n    const all = queries.map((q, index)=>{\n        if (typeof q === \"string\") {\n            // a simple query string without parameters:\n            return clean(q);\n        }\n        if (q && typeof q === \"object\") {\n            if (q instanceof QueryFile) {\n                // QueryFile object:\n                return clean(q[npm.formatting.as.ctf.toPostgres]());\n            }\n            if (\"query\" in q) {\n                // object {query, values, options}:\n                let opt = q.options && typeof q.options === \"object\" ? q.options : {};\n                opt = opt.capSQL === undefined ? Object.assign(opt, fmOptions) : opt;\n                return clean(npm.formatting.as.format(q.query, q.values, opt));\n            }\n        }\n        throw new Error(`Invalid query element at index ${index}.`);\n    });\n    return all.filter((q)=>q).join(\";\");\n}\nfunction clean(q) {\n    // removes from the query all leading and trailing symbols ' ', '\\t' and ';'\n    return q.replace(/^[\\s;]*|[\\s;]*$/g, \"\");\n}\nmodule.exports = {\n    concat\n}; /**\r\n * @typedef helpers.QueryFormat\r\n * @description\r\n * A simple structure of parameters to be passed into method {@link formatting.format as.format} exactly as they are,\r\n * used by {@link helpers.concat}.\r\n *\r\n * @property {string|value|object} query\r\n * A query string or a value/object that implements $[Custom Type Formatting], to be formatted according to `values`.\r\n *\r\n * @property {array|object|value} [values]\r\n * Query-formatting values.\r\n *\r\n * @property {object} [options]\r\n * Query-formatting options, as supported by method {@link formatting.format as.format}.\r\n *\r\n * @see\r\n * {@link formatting.format as.format}\r\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvaGVscGVycy9tZXRob2RzL2NvbmNhdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztDQU9DO0FBRUQsTUFBTSxFQUFDQSxTQUFTLEVBQUMsR0FBR0MsbUJBQU9BLENBQUM7QUFFNUIsTUFBTUMsTUFBTTtJQUNSQyxZQUFZRixtQkFBT0EsQ0FBQztBQUN4QjtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBa0NDLEdBQ0QsU0FBU0csT0FBT0MsT0FBTyxFQUFFQyxNQUFNO0lBQzNCLElBQUksQ0FBQ0MsTUFBTUMsT0FBTyxDQUFDSCxVQUFVO1FBQ3pCLE1BQU0sSUFBSUksVUFBVTtJQUN4QjtJQUNBLE1BQU1DLFlBQVk7UUFBQ0o7SUFBTTtJQUN6QixNQUFNSyxNQUFNTixRQUFRTyxHQUFHLENBQUMsQ0FBQ0MsR0FBR0M7UUFDeEIsSUFBSSxPQUFPRCxNQUFNLFVBQVU7WUFDdkIsNENBQTRDO1lBQzVDLE9BQU9FLE1BQU1GO1FBQ2pCO1FBQ0EsSUFBSUEsS0FBSyxPQUFPQSxNQUFNLFVBQVU7WUFDNUIsSUFBSUEsYUFBYWIsV0FBVztnQkFDeEIsb0JBQW9CO2dCQUNwQixPQUFPZSxNQUFNRixDQUFDLENBQUNYLElBQUlDLFVBQVUsQ0FBQ2EsRUFBRSxDQUFDQyxHQUFHLENBQUNDLFVBQVUsQ0FBQztZQUNwRDtZQUNBLElBQUksV0FBV0wsR0FBRztnQkFDZCxtQ0FBbUM7Z0JBQ25DLElBQUlNLE1BQU1OLEVBQUVPLE9BQU8sSUFBSSxPQUFPUCxFQUFFTyxPQUFPLEtBQUssV0FBV1AsRUFBRU8sT0FBTyxHQUFHLENBQUM7Z0JBQ3BFRCxNQUFNQSxJQUFJYixNQUFNLEtBQUtlLFlBQVlDLE9BQU9DLE1BQU0sQ0FBQ0osS0FBS1QsYUFBYVM7Z0JBQ2pFLE9BQU9KLE1BQU1iLElBQUlDLFVBQVUsQ0FBQ2EsRUFBRSxDQUFDUSxNQUFNLENBQUNYLEVBQUVZLEtBQUssRUFBRVosRUFBRWEsTUFBTSxFQUFFUDtZQUM3RDtRQUNKO1FBQ0EsTUFBTSxJQUFJUSxNQUFNLENBQUMsK0JBQStCLEVBQUViLE1BQU0sQ0FBQyxDQUFDO0lBQzlEO0lBRUEsT0FBT0gsSUFBSWlCLE1BQU0sQ0FBQ2YsQ0FBQUEsSUFBS0EsR0FBR2dCLElBQUksQ0FBQztBQUNuQztBQUVBLFNBQVNkLE1BQU1GLENBQUM7SUFDWiw0RUFBNEU7SUFDNUUsT0FBT0EsRUFBRWlCLE9BQU8sQ0FBQyxvQkFBb0I7QUFDekM7QUFFQUMsT0FBT0MsT0FBTyxHQUFHO0lBQUM1QjtBQUFNLEdBRXhCOzs7Ozs7Ozs7Ozs7Ozs7OztDQWlCQyIsInNvdXJjZXMiOlsid2VicGFjazovL2h0bWwtY29udmVydGVyLy4vbm9kZV9tb2R1bGVzL3BnLXByb21pc2UvbGliL2hlbHBlcnMvbWV0aG9kcy9jb25jYXQuanM/MjgzMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgVml0YWx5IFRvbWlsb3ZcclxuICpcclxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHRvcC1sZXZlbCBkaXJlY3Rvcnkgb2YgdGhpcyBkaXN0cmlidXRpb25cclxuICogZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbi5cclxuICpcclxuICogUmVtb3ZhbCBvciBtb2RpZmljYXRpb24gb2YgdGhpcyBjb3B5cmlnaHQgbm90aWNlIGlzIHByb2hpYml0ZWQuXHJcbiAqL1xyXG5cclxuY29uc3Qge1F1ZXJ5RmlsZX0gPSByZXF1aXJlKCcuLi8uLi9xdWVyeS1maWxlJyk7XHJcblxyXG5jb25zdCBucG0gPSB7XHJcbiAgICBmb3JtYXR0aW5nOiByZXF1aXJlKCcuLi8uLi9mb3JtYXR0aW5nJylcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAbWV0aG9kIGhlbHBlcnMuY29uY2F0XHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBGb3JtYXRzIGFuZCBjb25jYXRlbmF0ZXMgbXVsdGlwbGUgcXVlcmllcyBpbnRvIGEgc2luZ2xlIHF1ZXJ5IHN0cmluZy5cclxuICpcclxuICogQmVmb3JlIGpvaW5pbmcgdGhlIHF1ZXJpZXMsIHRoZSBtZXRob2QgZG9lcyB0aGUgZm9sbG93aW5nOlxyXG4gKiAgLSBGb3JtYXRzIGVhY2ggcXVlcnksIGlmIGB2YWx1ZXNgIGFyZSBwcm92aWRlZDtcclxuICogIC0gUmVtb3ZlcyBhbGwgbGVhZGluZyBhbmQgdHJhaWxpbmcgc3BhY2VzLCB0YWJzIGFuZCBzZW1pLWNvbG9ucztcclxuICogIC0gQXV0b21hdGljYWxseSBza2lwcyBhbGwgZW1wdHkgcXVlcmllcy5cclxuICpcclxuICogQHBhcmFtIHthcnJheTxzdHJpbmd8aGVscGVycy5RdWVyeUZvcm1hdHxRdWVyeUZpbGU+fSBxdWVyaWVzXHJcbiAqIEFycmF5IG9mIG1peGVkLXR5cGUgZWxlbWVudHM6XHJcbiAqIC0gYSBzaW1wbGUgcXVlcnkgc3RyaW5nLCB0byBiZSB1c2VkIGFzIGlzXHJcbiAqIC0gYSB7QGxpbmsgaGVscGVycy5RdWVyeUZvcm1hdCBRdWVyeUZvcm1hdH0tbGlrZSBvYmplY3QgPSBge3F1ZXJ5LCBbdmFsdWVzXSwgW29wdGlvbnNdfWBcclxuICogLSBhIHtAbGluayBRdWVyeUZpbGV9IG9iamVjdFxyXG4gKlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gKiBDb25jYXRlbmF0ZWQgc3RyaW5nIHdpdGggYWxsIHF1ZXJpZXMuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGNvbnN0IHBncCA9IHJlcXVpcmUoJ3BnLXByb21pc2UnKSgpO1xyXG4gKlxyXG4gKiBjb25zdCBxZjEgPSBuZXcgcGdwLlF1ZXJ5RmlsZSgnLi9xdWVyeTEuc3FsJywge21pbmlmeTogdHJ1ZX0pO1xyXG4gKiBjb25zdCBxZjIgPSBuZXcgcGdwLlF1ZXJ5RmlsZSgnLi9xdWVyeTIuc3FsJywge21pbmlmeTogdHJ1ZX0pO1xyXG4gKlxyXG4gKiBjb25zdCBxdWVyeSA9IHBncC5oZWxwZXJzLmNvbmNhdChbXHJcbiAqICAgICB7cXVlcnk6ICdJTlNFUlQgSU5UTyBVc2VycyhuYW1lLCBhZ2UpIFZBTFVFUygkMSwgJDIpJywgdmFsdWVzOiBbJ0pvaG4nLCAyM119LCAvLyBRdWVyeUZvcm1hdC1saWtlIG9iamVjdFxyXG4gKiAgICAge3F1ZXJ5OiBxZjEsIHZhbHVlczogWzEsICdOYW1lJ119LCAvLyBRdWVyeUZpbGUgd2l0aCBmb3JtYXR0aW5nIHBhcmFtZXRlcnNcclxuICogICAgICdTRUxFQ1QgY291bnQoKikgRlJPTSBVc2VycycsIC8vIGEgc2ltcGxlLXN0cmluZyBxdWVyeSxcclxuICogICAgIHFmMiAvLyBkaXJlY3QgUXVlcnlGaWxlIG9iamVjdFxyXG4gKiBdKTtcclxuICpcclxuICogLy8gcXVlcnkgPSBjb25jYXRlbmF0ZWQgc3RyaW5nIHdpdGggYWxsIHRoZSBxdWVyaWVzXHJcbiAqL1xyXG5mdW5jdGlvbiBjb25jYXQocXVlcmllcywgY2FwU1FMKSB7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocXVlcmllcykpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQYXJhbWV0ZXIgXFwncXVlcmllc1xcJyBtdXN0IGJlIGFuIGFycmF5LicpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZm1PcHRpb25zID0ge2NhcFNRTH07XHJcbiAgICBjb25zdCBhbGwgPSBxdWVyaWVzLm1hcCgocSwgaW5kZXgpID0+IHtcclxuICAgICAgICBpZiAodHlwZW9mIHEgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIC8vIGEgc2ltcGxlIHF1ZXJ5IHN0cmluZyB3aXRob3V0IHBhcmFtZXRlcnM6XHJcbiAgICAgICAgICAgIHJldHVybiBjbGVhbihxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHEgJiYgdHlwZW9mIHEgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGlmIChxIGluc3RhbmNlb2YgUXVlcnlGaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBRdWVyeUZpbGUgb2JqZWN0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsZWFuKHFbbnBtLmZvcm1hdHRpbmcuYXMuY3RmLnRvUG9zdGdyZXNdKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgncXVlcnknIGluIHEpIHtcclxuICAgICAgICAgICAgICAgIC8vIG9iamVjdCB7cXVlcnksIHZhbHVlcywgb3B0aW9uc306XHJcbiAgICAgICAgICAgICAgICBsZXQgb3B0ID0gcS5vcHRpb25zICYmIHR5cGVvZiBxLm9wdGlvbnMgPT09ICdvYmplY3QnID8gcS5vcHRpb25zIDoge307XHJcbiAgICAgICAgICAgICAgICBvcHQgPSBvcHQuY2FwU1FMID09PSB1bmRlZmluZWQgPyBPYmplY3QuYXNzaWduKG9wdCwgZm1PcHRpb25zKSA6IG9wdDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjbGVhbihucG0uZm9ybWF0dGluZy5hcy5mb3JtYXQocS5xdWVyeSwgcS52YWx1ZXMsIG9wdCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBxdWVyeSBlbGVtZW50IGF0IGluZGV4ICR7aW5kZXh9LmApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGFsbC5maWx0ZXIocSA9PiBxKS5qb2luKCc7Jyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsZWFuKHEpIHtcclxuICAgIC8vIHJlbW92ZXMgZnJvbSB0aGUgcXVlcnkgYWxsIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHN5bWJvbHMgJyAnLCAnXFx0JyBhbmQgJzsnXHJcbiAgICByZXR1cm4gcS5yZXBsYWNlKC9eW1xccztdKnxbXFxzO10qJC9nLCAnJyk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge2NvbmNhdH07XHJcblxyXG4vKipcclxuICogQHR5cGVkZWYgaGVscGVycy5RdWVyeUZvcm1hdFxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQSBzaW1wbGUgc3RydWN0dXJlIG9mIHBhcmFtZXRlcnMgdG8gYmUgcGFzc2VkIGludG8gbWV0aG9kIHtAbGluayBmb3JtYXR0aW5nLmZvcm1hdCBhcy5mb3JtYXR9IGV4YWN0bHkgYXMgdGhleSBhcmUsXHJcbiAqIHVzZWQgYnkge0BsaW5rIGhlbHBlcnMuY29uY2F0fS5cclxuICpcclxuICogQHByb3BlcnR5IHtzdHJpbmd8dmFsdWV8b2JqZWN0fSBxdWVyeVxyXG4gKiBBIHF1ZXJ5IHN0cmluZyBvciBhIHZhbHVlL29iamVjdCB0aGF0IGltcGxlbWVudHMgJFtDdXN0b20gVHlwZSBGb3JtYXR0aW5nXSwgdG8gYmUgZm9ybWF0dGVkIGFjY29yZGluZyB0byBgdmFsdWVzYC5cclxuICpcclxuICogQHByb3BlcnR5IHthcnJheXxvYmplY3R8dmFsdWV9IFt2YWx1ZXNdXHJcbiAqIFF1ZXJ5LWZvcm1hdHRpbmcgdmFsdWVzLlxyXG4gKlxyXG4gKiBAcHJvcGVydHkge29iamVjdH0gW29wdGlvbnNdXHJcbiAqIFF1ZXJ5LWZvcm1hdHRpbmcgb3B0aW9ucywgYXMgc3VwcG9ydGVkIGJ5IG1ldGhvZCB7QGxpbmsgZm9ybWF0dGluZy5mb3JtYXQgYXMuZm9ybWF0fS5cclxuICpcclxuICogQHNlZVxyXG4gKiB7QGxpbmsgZm9ybWF0dGluZy5mb3JtYXQgYXMuZm9ybWF0fVxyXG4gKi9cclxuIl0sIm5hbWVzIjpbIlF1ZXJ5RmlsZSIsInJlcXVpcmUiLCJucG0iLCJmb3JtYXR0aW5nIiwiY29uY2F0IiwicXVlcmllcyIsImNhcFNRTCIsIkFycmF5IiwiaXNBcnJheSIsIlR5cGVFcnJvciIsImZtT3B0aW9ucyIsImFsbCIsIm1hcCIsInEiLCJpbmRleCIsImNsZWFuIiwiYXMiLCJjdGYiLCJ0b1Bvc3RncmVzIiwib3B0Iiwib3B0aW9ucyIsInVuZGVmaW5lZCIsIk9iamVjdCIsImFzc2lnbiIsImZvcm1hdCIsInF1ZXJ5IiwidmFsdWVzIiwiRXJyb3IiLCJmaWx0ZXIiLCJqb2luIiwicmVwbGFjZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/helpers/methods/concat.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/helpers/methods/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/pg-promise/lib/helpers/methods/index.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { concat } = __webpack_require__(/*! ./concat */ \"(rsc)/./node_modules/pg-promise/lib/helpers/methods/concat.js\");\nconst { insert } = __webpack_require__(/*! ./insert */ \"(rsc)/./node_modules/pg-promise/lib/helpers/methods/insert.js\");\nconst { update } = __webpack_require__(/*! ./update */ \"(rsc)/./node_modules/pg-promise/lib/helpers/methods/update.js\");\nconst { values } = __webpack_require__(/*! ./values */ \"(rsc)/./node_modules/pg-promise/lib/helpers/methods/values.js\");\nconst { sets } = __webpack_require__(/*! ./sets */ \"(rsc)/./node_modules/pg-promise/lib/helpers/methods/sets.js\");\nmodule.exports = {\n    concat,\n    insert,\n    update,\n    values,\n    sets\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvaGVscGVycy9tZXRob2RzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLEVBQUNBLE1BQU0sRUFBQyxHQUFHQyxtQkFBT0EsQ0FBQztBQUN6QixNQUFNLEVBQUNDLE1BQU0sRUFBQyxHQUFHRCxtQkFBT0EsQ0FBQztBQUN6QixNQUFNLEVBQUNFLE1BQU0sRUFBQyxHQUFHRixtQkFBT0EsQ0FBQztBQUN6QixNQUFNLEVBQUNHLE1BQU0sRUFBQyxHQUFHSCxtQkFBT0EsQ0FBQztBQUN6QixNQUFNLEVBQUNJLElBQUksRUFBQyxHQUFHSixtQkFBT0EsQ0FBQztBQUV2QkssT0FBT0MsT0FBTyxHQUFHO0lBQ2JQO0lBQ0FFO0lBQ0FDO0lBQ0FDO0lBQ0FDO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odG1sLWNvbnZlcnRlci8uL25vZGVfbW9kdWxlcy9wZy1wcm9taXNlL2xpYi9oZWxwZXJzL21ldGhvZHMvaW5kZXguanM/YTQ3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7Y29uY2F0fSA9IHJlcXVpcmUoJy4vY29uY2F0Jyk7XHJcbmNvbnN0IHtpbnNlcnR9ID0gcmVxdWlyZSgnLi9pbnNlcnQnKTtcclxuY29uc3Qge3VwZGF0ZX0gPSByZXF1aXJlKCcuL3VwZGF0ZScpO1xyXG5jb25zdCB7dmFsdWVzfSA9IHJlcXVpcmUoJy4vdmFsdWVzJyk7XHJcbmNvbnN0IHtzZXRzfSA9IHJlcXVpcmUoJy4vc2V0cycpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBjb25jYXQsXHJcbiAgICBpbnNlcnQsXHJcbiAgICB1cGRhdGUsXHJcbiAgICB2YWx1ZXMsXHJcbiAgICBzZXRzXHJcbn07XHJcbiJdLCJuYW1lcyI6WyJjb25jYXQiLCJyZXF1aXJlIiwiaW5zZXJ0IiwidXBkYXRlIiwidmFsdWVzIiwic2V0cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/helpers/methods/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/helpers/methods/insert.js":
/*!***************************************************************!*\
  !*** ./node_modules/pg-promise/lib/helpers/methods/insert.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { TableName } = __webpack_require__(/*! ../table-name */ \"(rsc)/./node_modules/pg-promise/lib/helpers/table-name.js\");\nconst { ColumnSet } = __webpack_require__(/*! ../column-set */ \"(rsc)/./node_modules/pg-promise/lib/helpers/column-set.js\");\nconst npm = {\n    formatting: __webpack_require__(/*! ../../formatting */ \"(rsc)/./node_modules/pg-promise/lib/formatting.js\"),\n    utils: __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\")\n};\n/**\r\n * @method helpers.insert\r\n * @description\r\n * Generates an `INSERT` query for either one object or an array of objects.\r\n *\r\n * @param {object|object[]} data\r\n * An insert object with properties for insert values, or an array of such objects.\r\n *\r\n * When `data` is not a non-null object and not an array, it will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * When `data` is an empty array, it will throw {@link external:TypeError TypeError} = `Cannot generate an INSERT from an empty array.`\r\n *\r\n * When `data` is an array that contains a non-object value, the method will throw {@link external:Error Error} =\r\n * `Invalid insert object at index N.`\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Set of columns to be inserted.\r\n *\r\n * It is optional when `data` is a single object, and required when `data` is an array of objects. If not specified for an array\r\n * of objects, the method will throw {@link external:TypeError TypeError} = `Parameter 'columns' is required when inserting multiple records.`\r\n *\r\n * When `columns` is not a {@link helpers.ColumnSet ColumnSet} object, a temporary {@link helpers.ColumnSet ColumnSet}\r\n * is created - from the value of `columns` (if it was specified), or from the value of `data` (if it is not an array).\r\n *\r\n * When the final {@link helpers.ColumnSet ColumnSet} is empty (no columns in it), the method will throw\r\n * {@link external:Error Error} = `Cannot generate an INSERT without any columns.`\r\n *\r\n * @param {helpers.TableName|string|{table,schema}} [table]\r\n * Destination table.\r\n *\r\n * It is normally a required parameter. But when `columns` is passed in as a {@link helpers.ColumnSet ColumnSet} object\r\n * with `table` set in it, that will be used when this parameter isn't specified. When neither is available, the method\r\n * will throw {@link external:Error Error} = `Table name is unknown.`\r\n *\r\n * @returns {string}\r\n * An `INSERT` query string.\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet},\r\n *  {@link helpers.TableName TableName}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')({\r\n *    capSQL: true // if you want all generated SQL capitalized\r\n * });\r\n *\r\n * const dataSingle = {val: 123, msg: 'hello'};\r\n * const dataMulti = [{val: 123, msg: 'hello'}, {val: 456, msg: 'world!'}];\r\n *\r\n * // Column details can be taken from the data object:\r\n *\r\n * pgp.helpers.insert(dataSingle, null, 'my-table');\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello')\r\n *\r\n * @example\r\n *\r\n * // Column details are required for a multi-row `INSERT`:\r\n *\r\n * pgp.helpers.insert(dataMulti, ['val', 'msg'], 'my-table');\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello'),(456,'world!')\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance):\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['val', 'msg'], {table: 'my-table'});\r\n *\r\n * pgp.helpers.insert(dataMulti, cs);\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello'),(456,'world!')\r\n *\r\n */ function insert(data, columns, table, capSQL) {\n    if (!data || typeof data !== \"object\") {\n        throw new TypeError(\"Invalid parameter 'data' specified.\");\n    }\n    const isArray = Array.isArray(data);\n    if (isArray && !data.length) {\n        throw new TypeError(\"Cannot generate an INSERT from an empty array.\");\n    }\n    if (columns instanceof ColumnSet) {\n        if (npm.utils.isNull(table)) {\n            table = columns.table;\n        }\n    } else {\n        if (isArray && npm.utils.isNull(columns)) {\n            throw new TypeError(\"Parameter 'columns' is required when inserting multiple records.\");\n        }\n        columns = new ColumnSet(columns || data);\n    }\n    if (!columns.columns.length) {\n        throw new Error(\"Cannot generate an INSERT without any columns.\");\n    }\n    if (!table) {\n        throw new Error(\"Table name is unknown.\");\n    }\n    if (!(table instanceof TableName)) {\n        table = new TableName(table);\n    }\n    let query = capSQL ? sql.capCase : sql.lowCase;\n    const fmOptions = {\n        capSQL\n    };\n    const format = npm.formatting.as.format;\n    query = format(query, [\n        table.name,\n        columns.names\n    ], fmOptions);\n    if (isArray) {\n        return query + data.map((d, index)=>{\n            if (!d || typeof d !== \"object\") {\n                throw new Error(`Invalid insert object at index ${index}.`);\n            }\n            return \"(\" + format(columns.variables, columns.prepare(d), fmOptions) + \")\";\n        }).join();\n    }\n    return query + \"(\" + format(columns.variables, columns.prepare(data), fmOptions) + \")\";\n}\nconst sql = {\n    lowCase: \"insert into $1^($2^) values\",\n    capCase: \"INSERT INTO $1^($2^) VALUES\"\n};\nmodule.exports = {\n    insert\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/helpers/methods/insert.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/helpers/methods/sets.js":
/*!*************************************************************!*\
  !*** ./node_modules/pg-promise/lib/helpers/methods/sets.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { ColumnSet } = __webpack_require__(/*! ../column-set */ \"(rsc)/./node_modules/pg-promise/lib/helpers/column-set.js\");\nconst npm = {\n    format: (__webpack_require__(/*! ../../formatting */ \"(rsc)/./node_modules/pg-promise/lib/formatting.js\").as.format),\n    utils: __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\")\n};\n/**\r\n * @method helpers.sets\r\n * @description\r\n * Generates a string of comma-separated value-set statements from a single object: `col1=val1, col2=val2, ...`,\r\n * to be used as part of a query.\r\n *\r\n * Since it is to be used as part of `UPDATE` queries, {@link helpers.Column Column} properties `cnd` and `skip` apply.\r\n *\r\n * @param {object} data\r\n * A simple, non-null and non-array source object.\r\n *\r\n * If it is anything else, the method will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Columns for which to set values.\r\n *\r\n * When not specified, properties of the `data` object are used.\r\n *\r\n * When no effective columns are found, an empty string is returned.\r\n *\r\n * @returns {string}\r\n * - comma-separated value-set statements for the `data` object\r\n * - an empty string, if no effective columns found\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')();\r\n *\r\n * const data = {id: 1, val: 123, msg: 'hello'};\r\n *\r\n * // Properties can be pulled automatically from the object:\r\n *\r\n * pgp.helpers.sets(data);\r\n * //=> \"id\"=1,\"val\"=123,\"msg\"='hello'\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance);\r\n * // NOTE: Conditional columns (start with '?') are skipped:\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['?id','val', 'msg']);\r\n *\r\n * pgp.helpers.sets(data, cs);\r\n * //=> \"val\"=123,\"msg\"='hello'\r\n *\r\n */ function sets(data, columns, capSQL) {\n    if (!data || typeof data !== \"object\" || Array.isArray(data)) {\n        throw new TypeError(\"Invalid parameter 'data' specified.\");\n    }\n    if (!(columns instanceof ColumnSet)) {\n        columns = new ColumnSet(columns || data);\n    }\n    return npm.format(columns.assign({\n        source: data\n    }), columns.prepare(data), {\n        capSQL\n    });\n}\nmodule.exports = {\n    sets\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvaGVscGVycy9tZXRob2RzL3NldHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Q0FPQztBQUVELE1BQU0sRUFBQ0EsU0FBUyxFQUFDLEdBQUdDLG1CQUFPQSxDQUFDO0FBRTVCLE1BQU1DLE1BQU07SUFDUkMsUUFBUUYsNEdBQXFDO0lBQzdDSSxPQUFPSixtQkFBT0EsQ0FBQztBQUNuQjtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBaURDLEdBQ0QsU0FBU0ssS0FBS0MsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLE1BQU07SUFFL0IsSUFBSSxDQUFDRixRQUFRLE9BQU9BLFNBQVMsWUFBWUcsTUFBTUMsT0FBTyxDQUFDSixPQUFPO1FBQzFELE1BQU0sSUFBSUssVUFBVTtJQUN4QjtJQUVBLElBQUksQ0FBRUosQ0FBQUEsbUJBQW1CUixTQUFRLEdBQUk7UUFDakNRLFVBQVUsSUFBSVIsVUFBVVEsV0FBV0Q7SUFDdkM7SUFFQSxPQUFPTCxJQUFJQyxNQUFNLENBQUNLLFFBQVFLLE1BQU0sQ0FBQztRQUFDQyxRQUFRUDtJQUFJLElBQUlDLFFBQVFPLE9BQU8sQ0FBQ1IsT0FBTztRQUFDRTtJQUFNO0FBQ3BGO0FBRUFPLE9BQU9DLE9BQU8sR0FBRztJQUFDWDtBQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHRtbC1jb252ZXJ0ZXIvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvaGVscGVycy9tZXRob2RzL3NldHMuanM/MGM0YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgVml0YWx5IFRvbWlsb3ZcclxuICpcclxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHRvcC1sZXZlbCBkaXJlY3Rvcnkgb2YgdGhpcyBkaXN0cmlidXRpb25cclxuICogZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbi5cclxuICpcclxuICogUmVtb3ZhbCBvciBtb2RpZmljYXRpb24gb2YgdGhpcyBjb3B5cmlnaHQgbm90aWNlIGlzIHByb2hpYml0ZWQuXHJcbiAqL1xyXG5cclxuY29uc3Qge0NvbHVtblNldH0gPSByZXF1aXJlKCcuLi9jb2x1bW4tc2V0Jyk7XHJcblxyXG5jb25zdCBucG0gPSB7XHJcbiAgICBmb3JtYXQ6IHJlcXVpcmUoJy4uLy4uL2Zvcm1hdHRpbmcnKS5hcy5mb3JtYXQsXHJcbiAgICB1dGlsczogcmVxdWlyZSgnLi4vLi4vdXRpbHMnKVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBtZXRob2QgaGVscGVycy5zZXRzXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBHZW5lcmF0ZXMgYSBzdHJpbmcgb2YgY29tbWEtc2VwYXJhdGVkIHZhbHVlLXNldCBzdGF0ZW1lbnRzIGZyb20gYSBzaW5nbGUgb2JqZWN0OiBgY29sMT12YWwxLCBjb2wyPXZhbDIsIC4uLmAsXHJcbiAqIHRvIGJlIHVzZWQgYXMgcGFydCBvZiBhIHF1ZXJ5LlxyXG4gKlxyXG4gKiBTaW5jZSBpdCBpcyB0byBiZSB1c2VkIGFzIHBhcnQgb2YgYFVQREFURWAgcXVlcmllcywge0BsaW5rIGhlbHBlcnMuQ29sdW1uIENvbHVtbn0gcHJvcGVydGllcyBgY25kYCBhbmQgYHNraXBgIGFwcGx5LlxyXG4gKlxyXG4gKiBAcGFyYW0ge29iamVjdH0gZGF0YVxyXG4gKiBBIHNpbXBsZSwgbm9uLW51bGwgYW5kIG5vbi1hcnJheSBzb3VyY2Ugb2JqZWN0LlxyXG4gKlxyXG4gKiBJZiBpdCBpcyBhbnl0aGluZyBlbHNlLCB0aGUgbWV0aG9kIHdpbGwgdGhyb3cge0BsaW5rIGV4dGVybmFsOlR5cGVFcnJvciBUeXBlRXJyb3J9ID0gYEludmFsaWQgcGFyYW1ldGVyICdkYXRhJyBzcGVjaWZpZWQuYFxyXG4gKlxyXG4gKiBAcGFyYW0ge2FycmF5fGhlbHBlcnMuQ29sdW1ufGhlbHBlcnMuQ29sdW1uU2V0fSBbY29sdW1uc11cclxuICogQ29sdW1ucyBmb3Igd2hpY2ggdG8gc2V0IHZhbHVlcy5cclxuICpcclxuICogV2hlbiBub3Qgc3BlY2lmaWVkLCBwcm9wZXJ0aWVzIG9mIHRoZSBgZGF0YWAgb2JqZWN0IGFyZSB1c2VkLlxyXG4gKlxyXG4gKiBXaGVuIG5vIGVmZmVjdGl2ZSBjb2x1bW5zIGFyZSBmb3VuZCwgYW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gKiAtIGNvbW1hLXNlcGFyYXRlZCB2YWx1ZS1zZXQgc3RhdGVtZW50cyBmb3IgdGhlIGBkYXRhYCBvYmplY3RcclxuICogLSBhbiBlbXB0eSBzdHJpbmcsIGlmIG5vIGVmZmVjdGl2ZSBjb2x1bW5zIGZvdW5kXHJcbiAqXHJcbiAqIEBzZWVcclxuICogIHtAbGluayBoZWxwZXJzLkNvbHVtbiBDb2x1bW59LFxyXG4gKiAge0BsaW5rIGhlbHBlcnMuQ29sdW1uU2V0IENvbHVtblNldH1cclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogY29uc3QgcGdwID0gcmVxdWlyZSgncGctcHJvbWlzZScpKCk7XHJcbiAqXHJcbiAqIGNvbnN0IGRhdGEgPSB7aWQ6IDEsIHZhbDogMTIzLCBtc2c6ICdoZWxsbyd9O1xyXG4gKlxyXG4gKiAvLyBQcm9wZXJ0aWVzIGNhbiBiZSBwdWxsZWQgYXV0b21hdGljYWxseSBmcm9tIHRoZSBvYmplY3Q6XHJcbiAqXHJcbiAqIHBncC5oZWxwZXJzLnNldHMoZGF0YSk7XHJcbiAqIC8vPT4gXCJpZFwiPTEsXCJ2YWxcIj0xMjMsXCJtc2dcIj0naGVsbG8nXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIC8vIENvbHVtbiBkZXRhaWxzIGZyb20gYSByZXVzYWJsZSBDb2x1bW5TZXQgKHJlY29tbWVuZGVkIGZvciBwZXJmb3JtYW5jZSk7XHJcbiAqIC8vIE5PVEU6IENvbmRpdGlvbmFsIGNvbHVtbnMgKHN0YXJ0IHdpdGggJz8nKSBhcmUgc2tpcHBlZDpcclxuICpcclxuICogY29uc3QgY3MgPSBuZXcgcGdwLmhlbHBlcnMuQ29sdW1uU2V0KFsnP2lkJywndmFsJywgJ21zZyddKTtcclxuICpcclxuICogcGdwLmhlbHBlcnMuc2V0cyhkYXRhLCBjcyk7XHJcbiAqIC8vPT4gXCJ2YWxcIj0xMjMsXCJtc2dcIj0naGVsbG8nXHJcbiAqXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRzKGRhdGEsIGNvbHVtbnMsIGNhcFNRTCkge1xyXG5cclxuICAgIGlmICghZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShkYXRhKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgcGFyYW1ldGVyIFxcJ2RhdGFcXCcgc3BlY2lmaWVkLicpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghKGNvbHVtbnMgaW5zdGFuY2VvZiBDb2x1bW5TZXQpKSB7XHJcbiAgICAgICAgY29sdW1ucyA9IG5ldyBDb2x1bW5TZXQoY29sdW1ucyB8fCBkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbnBtLmZvcm1hdChjb2x1bW5zLmFzc2lnbih7c291cmNlOiBkYXRhfSksIGNvbHVtbnMucHJlcGFyZShkYXRhKSwge2NhcFNRTH0pO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtzZXRzfTtcclxuIl0sIm5hbWVzIjpbIkNvbHVtblNldCIsInJlcXVpcmUiLCJucG0iLCJmb3JtYXQiLCJhcyIsInV0aWxzIiwic2V0cyIsImRhdGEiLCJjb2x1bW5zIiwiY2FwU1FMIiwiQXJyYXkiLCJpc0FycmF5IiwiVHlwZUVycm9yIiwiYXNzaWduIiwic291cmNlIiwicHJlcGFyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/helpers/methods/sets.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/helpers/methods/update.js":
/*!***************************************************************!*\
  !*** ./node_modules/pg-promise/lib/helpers/methods/update.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { assert } = __webpack_require__(/*! ../../assert */ \"(rsc)/./node_modules/pg-promise/lib/assert.js\");\nconst { TableName } = __webpack_require__(/*! ../table-name */ \"(rsc)/./node_modules/pg-promise/lib/helpers/table-name.js\");\nconst { ColumnSet } = __webpack_require__(/*! ../column-set */ \"(rsc)/./node_modules/pg-promise/lib/helpers/column-set.js\");\nconst npm = {\n    formatting: __webpack_require__(/*! ../../formatting */ \"(rsc)/./node_modules/pg-promise/lib/formatting.js\"),\n    utils: __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\")\n};\n/**\r\n * @method helpers.update\r\n * @description\r\n * Generates a simplified `UPDATE` query for either one object or an array of objects.\r\n *\r\n * The resulting query needs a `WHERE` clause to be appended to it, to specify the update logic.\r\n * This is to allow for update conditions of any complexity that are easy to add.\r\n *\r\n * @param {object|object[]} data\r\n * An update object with properties for update values, or an array of such objects.\r\n *\r\n * When `data` is not a non-null object and not an array, it will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * When `data` is an empty array, it will throw {@link external:TypeError TypeError} = `Cannot generate an UPDATE from an empty array.`\r\n *\r\n * When `data` is an array that contains a non-object value, the method will throw {@link external:Error Error} =\r\n * `Invalid update object at index N.`\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Set of columns to be updated.\r\n *\r\n * It is optional when `data` is a single object, and required when `data` is an array of objects. If not specified for an array\r\n * of objects, the method will throw {@link external:TypeError TypeError} = `Parameter 'columns' is required when updating multiple records.`\r\n *\r\n * When `columns` is not a {@link helpers.ColumnSet ColumnSet} object, a temporary {@link helpers.ColumnSet ColumnSet}\r\n * is created - from the value of `columns` (if it was specified), or from the value of `data` (if it is not an array).\r\n *\r\n * When the final {@link helpers.ColumnSet ColumnSet} is empty (no columns in it), the method will throw\r\n * {@link external:Error Error} = `Cannot generate an UPDATE without any columns.`, unless option `emptyUpdate` was specified.\r\n *\r\n * @param {helpers.TableName|string|{table,schema}} [table]\r\n * Table to be updated.\r\n *\r\n * It is normally a required parameter. But when `columns` is passed in as a {@link helpers.ColumnSet ColumnSet} object\r\n * with `table` set in it, that will be used when this parameter isn't specified. When neither is available, the method\r\n * will throw {@link external:Error Error} = `Table name is unknown.`\r\n *\r\n * @param {{}} [options]\r\n * An object with formatting options for multi-row `UPDATE` queries.\r\n *\r\n * @param {string} [options.tableAlias=t]\r\n * Name of the SQL variable that represents the destination table.\r\n *\r\n * @param {string} [options.valueAlias=v]\r\n * Name of the SQL variable that represents the values.\r\n *\r\n * @param {*} [options.emptyUpdate]\r\n * This is a convenience option, to avoid throwing an error when generating a conditional update results in no columns.\r\n *\r\n * When present, regardless of the value, this option overrides the method's behavior when applying `skip` logic results in no columns,\r\n * i.e. when every column is being skipped.\r\n *\r\n * By default, in that situation the method throws {@link external:Error Error} = `Cannot generate an UPDATE without any columns.`\r\n * But when this option is present, the method will instead return whatever value the option was passed.\r\n *\r\n * @returns {*}\r\n * An `UPDATE` query string that needs a `WHERE` condition appended.\r\n *\r\n * If it results in an empty update, and option `emptyUpdate` was passed in, then the method returns the value\r\n * to which the option was set.\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet},\r\n *  {@link helpers.TableName TableName}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')({\r\n *    capSQL: true // if you want all generated SQL capitalized\r\n * });\r\n *\r\n * const dataSingle = {id: 1, val: 123, msg: 'hello'};\r\n * const dataMulti = [{id: 1, val: 123, msg: 'hello'}, {id: 2, val: 456, msg: 'world!'}];\r\n *\r\n * // Although column details can be taken from the data object, it is not\r\n * // a likely scenario for an update, unless updating the whole table:\r\n *\r\n * pgp.helpers.update(dataSingle, null, 'my-table');\r\n * //=> UPDATE \"my-table\" SET \"id\"=1,\"val\"=123,\"msg\"='hello'\r\n *\r\n * @example\r\n *\r\n * // A typical single-object update:\r\n *\r\n * // Dynamic conditions must be escaped/formatted properly:\r\n * const condition = pgp.as.format(' WHERE id = ${id}', dataSingle);\r\n *\r\n * pgp.helpers.update(dataSingle, ['val', 'msg'], 'my-table') + condition;\r\n * //=> UPDATE \"my-table\" SET \"val\"=123,\"msg\"='hello' WHERE id = 1\r\n *\r\n * @example\r\n *\r\n * // Column details are required for a multi-row `UPDATE`;\r\n * // Adding '?' in front of a column name means it is only for a WHERE condition:\r\n *\r\n * pgp.helpers.update(dataMulti, ['?id', 'val', 'msg'], 'my-table') + ' WHERE v.id = t.id';\r\n * //=> UPDATE \"my-table\" AS t SET \"val\"=v.\"val\",\"msg\"=v.\"msg\" FROM (VALUES(1,123,'hello'),(2,456,'world!'))\r\n * //   AS v(\"id\",\"val\",\"msg\") WHERE v.id = t.id\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance):\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['?id', 'val', 'msg'], {table: 'my-table'});\r\n *\r\n * pgp.helpers.update(dataMulti, cs) + ' WHERE v.id = t.id';\r\n * //=> UPDATE \"my-table\" AS t SET \"val\"=v.\"val\",\"msg\"=v.\"msg\" FROM (VALUES(1,123,'hello'),(2,456,'world!'))\r\n * //   AS v(\"id\",\"val\",\"msg\") WHERE v.id = t.id\r\n *\r\n * @example\r\n *\r\n * // Using parameter `options` to change the default alias names:\r\n *\r\n * pgp.helpers.update(dataMulti, cs, null, {tableAlias: 'X', valueAlias: 'Y'}) + ' WHERE Y.id = X.id';\r\n * //=> UPDATE \"my-table\" AS X SET \"val\"=Y.\"val\",\"msg\"=Y.\"msg\" FROM (VALUES(1,123,'hello'),(2,456,'world!'))\r\n * //   AS Y(\"id\",\"val\",\"msg\") WHERE Y.id = X.id\r\n *\r\n * @example\r\n *\r\n * // Handling an empty update\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['?id', '?name'], {table: 'tt'}); // no actual update-able columns\r\n * const result = pgp.helpers.update(dataMulti, cs, null, {emptyUpdate: 123});\r\n * if(result === 123) {\r\n *    // We know the update is empty, i.e. no columns that can be updated;\r\n *    // And it didn't throw because we specified `emptyUpdate` option.\r\n * }\r\n */ function update(data, columns, table, options, capSQL) {\n    if (!data || typeof data !== \"object\") {\n        throw new TypeError(\"Invalid parameter 'data' specified.\");\n    }\n    const isArray = Array.isArray(data);\n    if (isArray && !data.length) {\n        throw new TypeError(\"Cannot generate an UPDATE from an empty array.\");\n    }\n    if (columns instanceof ColumnSet) {\n        if (npm.utils.isNull(table)) {\n            table = columns.table;\n        }\n    } else {\n        if (isArray && npm.utils.isNull(columns)) {\n            throw new TypeError(\"Parameter 'columns' is required when updating multiple records.\");\n        }\n        columns = new ColumnSet(columns || data);\n    }\n    options = assert(options, [\n        \"tableAlias\",\n        \"valueAlias\",\n        \"emptyUpdate\"\n    ]);\n    const format = npm.formatting.as.format, useEmptyUpdate = \"emptyUpdate\" in options, fmOptions = {\n        capSQL\n    };\n    if (isArray) {\n        const tableAlias = npm.formatting.as.alias(npm.utils.isNull(options.tableAlias) ? \"t\" : options.tableAlias);\n        const valueAlias = npm.formatting.as.alias(npm.utils.isNull(options.valueAlias) ? \"v\" : options.valueAlias);\n        const q = capSQL ? sql.multi.capCase : sql.multi.lowCase;\n        const actualColumns = columns.columns.filter((c)=>!c.cnd);\n        if (checkColumns(actualColumns)) {\n            return options.emptyUpdate;\n        }\n        checkTable();\n        const targetCols = actualColumns.map((c)=>c.escapedName + \"=\" + valueAlias + \".\" + c.escapedName).join();\n        const values = data.map((d, index)=>{\n            if (!d || typeof d !== \"object\") {\n                throw new Error(`Invalid update object at index ${index}.`);\n            }\n            return \"(\" + format(columns.variables, columns.prepare(d), fmOptions) + \")\";\n        }).join();\n        return format(q, [\n            table.name,\n            tableAlias,\n            targetCols,\n            values,\n            valueAlias,\n            columns.names\n        ], fmOptions);\n    }\n    const updates = columns.assign({\n        source: data\n    });\n    if (checkColumns(updates)) {\n        return options.emptyUpdate;\n    }\n    checkTable();\n    const query = capSQL ? sql.single.capCase : sql.single.lowCase;\n    return format(query, table.name) + format(updates, columns.prepare(data), fmOptions);\n    function checkTable() {\n        if (table && !(table instanceof TableName)) {\n            table = new TableName(table);\n        }\n        if (!table) {\n            throw new Error(\"Table name is unknown.\");\n        }\n    }\n    function checkColumns(cols) {\n        if (!cols.length) {\n            if (useEmptyUpdate) {\n                return true;\n            }\n            throw new Error(\"Cannot generate an UPDATE without any columns.\");\n        }\n    }\n}\nconst sql = {\n    single: {\n        lowCase: \"update $1^ set \",\n        capCase: \"UPDATE $1^ SET \"\n    },\n    multi: {\n        lowCase: \"update $1^ as $2^ set $3^ from (values$4^) as $5^($6^)\",\n        capCase: \"UPDATE $1^ AS $2^ SET $3^ FROM (VALUES$4^) AS $5^($6^)\"\n    }\n};\nmodule.exports = {\n    update\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/helpers/methods/update.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/helpers/methods/values.js":
/*!***************************************************************!*\
  !*** ./node_modules/pg-promise/lib/helpers/methods/values.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { ColumnSet } = __webpack_require__(/*! ../column-set */ \"(rsc)/./node_modules/pg-promise/lib/helpers/column-set.js\");\nconst npm = {\n    formatting: __webpack_require__(/*! ../../formatting */ \"(rsc)/./node_modules/pg-promise/lib/formatting.js\"),\n    utils: __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\")\n};\n/**\r\n * @method helpers.values\r\n * @description\r\n * Generates a string of comma-separated value groups from either one object or an array of objects,\r\n * to be used as part of a query:\r\n *\r\n * - from a single object: `(val_1, val_2, ...)`\r\n * - from an array of objects: `(val_11, val_12, ...), (val_21, val_22, ...)`\r\n *\r\n * @param {object|object[]} data\r\n * A source object with properties as values, or an array of such objects.\r\n *\r\n * If it is anything else, the method will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * When `data` is an array that contains a non-object value, the method will throw {@link external:Error Error} =\r\n * `Invalid object at index N.`\r\n *\r\n * When `data` is an empty array, an empty string is returned.\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Columns for which to return values.\r\n *\r\n * It is optional when `data` is a single object, and required when `data` is an array of objects. If not specified for an array\r\n * of objects, the method will throw {@link external:TypeError TypeError} = `Parameter 'columns' is required when generating multi-row values.`\r\n *\r\n * When the final {@link helpers.ColumnSet ColumnSet} is empty (no columns in it), the method will throw\r\n * {@link external:Error Error} = `Cannot generate values without any columns.`\r\n *\r\n * @returns {string}\r\n * - comma-separated value groups, according to `data`\r\n * - an empty string, if `data` is an empty array\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')();\r\n *\r\n * const dataSingle = {val: 123, msg: 'hello'};\r\n * const dataMulti = [{val: 123, msg: 'hello'}, {val: 456, msg: 'world!'}];\r\n *\r\n * // Properties can be pulled automatically from a single object:\r\n *\r\n * pgp.helpers.values(dataSingle);\r\n * //=> (123,'hello')\r\n *\r\n * @example\r\n *\r\n * // Column details are required when using an array of objects:\r\n *\r\n * pgp.helpers.values(dataMulti, ['val', 'msg']);\r\n * //=> (123,'hello'),(456,'world!')\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance):\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['val', 'msg']);\r\n *\r\n * pgp.helpers.values(dataMulti, cs);\r\n * //=> (123,'hello'),(456,'world!')\r\n *\r\n */ function values(data, columns, capSQL) {\n    if (!data || typeof data !== \"object\") {\n        throw new TypeError(\"Invalid parameter 'data' specified.\");\n    }\n    const isArray = Array.isArray(data);\n    if (!(columns instanceof ColumnSet)) {\n        if (isArray && npm.utils.isNull(columns)) {\n            throw new TypeError(\"Parameter 'columns' is required when generating multi-row values.\");\n        }\n        columns = new ColumnSet(columns || data);\n    }\n    if (!columns.columns.length) {\n        throw new Error(\"Cannot generate values without any columns.\");\n    }\n    const format = npm.formatting.as.format, fmOptions = {\n        capSQL\n    };\n    if (isArray) {\n        return data.map((d, index)=>{\n            if (!d || typeof d !== \"object\") {\n                throw new Error(`Invalid object at index ${index}.`);\n            }\n            return \"(\" + format(columns.variables, columns.prepare(d), fmOptions) + \")\";\n        }).join();\n    }\n    return \"(\" + format(columns.variables, columns.prepare(data), fmOptions) + \")\";\n}\nmodule.exports = {\n    values\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvaGVscGVycy9tZXRob2RzL3ZhbHVlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztDQU9DO0FBRUQsTUFBTSxFQUFDQSxTQUFTLEVBQUMsR0FBR0MsbUJBQU9BLENBQUM7QUFFNUIsTUFBTUMsTUFBTTtJQUNSQyxZQUFZRixtQkFBT0EsQ0FBQztJQUNwQkcsT0FBT0gsbUJBQU9BLENBQUM7QUFDbkI7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWdFQyxHQUNELFNBQVNJLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFQyxNQUFNO0lBRWpDLElBQUksQ0FBQ0YsUUFBUSxPQUFPQSxTQUFTLFVBQVU7UUFDbkMsTUFBTSxJQUFJRyxVQUFVO0lBQ3hCO0lBRUEsTUFBTUMsVUFBVUMsTUFBTUQsT0FBTyxDQUFDSjtJQUU5QixJQUFJLENBQUVDLENBQUFBLG1CQUFtQlAsU0FBUSxHQUFJO1FBQ2pDLElBQUlVLFdBQVdSLElBQUlFLEtBQUssQ0FBQ1EsTUFBTSxDQUFDTCxVQUFVO1lBQ3RDLE1BQU0sSUFBSUUsVUFBVTtRQUN4QjtRQUNBRixVQUFVLElBQUlQLFVBQVVPLFdBQVdEO0lBQ3ZDO0lBRUEsSUFBSSxDQUFDQyxRQUFRQSxPQUFPLENBQUNNLE1BQU0sRUFBRTtRQUN6QixNQUFNLElBQUlDLE1BQU07SUFDcEI7SUFFQSxNQUFNQyxTQUFTYixJQUFJQyxVQUFVLENBQUNhLEVBQUUsQ0FBQ0QsTUFBTSxFQUNuQ0UsWUFBWTtRQUFDVDtJQUFNO0lBRXZCLElBQUlFLFNBQVM7UUFDVCxPQUFPSixLQUFLWSxHQUFHLENBQUMsQ0FBQ0MsR0FBR0M7WUFDaEIsSUFBSSxDQUFDRCxLQUFLLE9BQU9BLE1BQU0sVUFBVTtnQkFDN0IsTUFBTSxJQUFJTCxNQUFNLENBQUMsd0JBQXdCLEVBQUVNLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZEO1lBQ0EsT0FBTyxNQUFNTCxPQUFPUixRQUFRYyxTQUFTLEVBQUVkLFFBQVFlLE9BQU8sQ0FBQ0gsSUFBSUYsYUFBYTtRQUM1RSxHQUFHTSxJQUFJO0lBQ1g7SUFDQSxPQUFPLE1BQU1SLE9BQU9SLFFBQVFjLFNBQVMsRUFBRWQsUUFBUWUsT0FBTyxDQUFDaEIsT0FBT1csYUFBYTtBQUMvRTtBQUVBTyxPQUFPQyxPQUFPLEdBQUc7SUFBQ3BCO0FBQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odG1sLWNvbnZlcnRlci8uL25vZGVfbW9kdWxlcy9wZy1wcm9taXNlL2xpYi9oZWxwZXJzL21ldGhvZHMvdmFsdWVzLmpzP2I0M2IiXSwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIFZpdGFseSBUb21pbG92XHJcbiAqXHJcbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGF0IHRoZSB0b3AtbGV2ZWwgZGlyZWN0b3J5IG9mIHRoaXMgZGlzdHJpYnV0aW9uXHJcbiAqIGZvciBsaWNlbnNpbmcgaW5mb3JtYXRpb24uXHJcbiAqXHJcbiAqIFJlbW92YWwgb3IgbW9kaWZpY2F0aW9uIG9mIHRoaXMgY29weXJpZ2h0IG5vdGljZSBpcyBwcm9oaWJpdGVkLlxyXG4gKi9cclxuXHJcbmNvbnN0IHtDb2x1bW5TZXR9ID0gcmVxdWlyZSgnLi4vY29sdW1uLXNldCcpO1xyXG5cclxuY29uc3QgbnBtID0ge1xyXG4gICAgZm9ybWF0dGluZzogcmVxdWlyZSgnLi4vLi4vZm9ybWF0dGluZycpLFxyXG4gICAgdXRpbHM6IHJlcXVpcmUoJy4uLy4uL3V0aWxzJylcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAbWV0aG9kIGhlbHBlcnMudmFsdWVzXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBHZW5lcmF0ZXMgYSBzdHJpbmcgb2YgY29tbWEtc2VwYXJhdGVkIHZhbHVlIGdyb3VwcyBmcm9tIGVpdGhlciBvbmUgb2JqZWN0IG9yIGFuIGFycmF5IG9mIG9iamVjdHMsXHJcbiAqIHRvIGJlIHVzZWQgYXMgcGFydCBvZiBhIHF1ZXJ5OlxyXG4gKlxyXG4gKiAtIGZyb20gYSBzaW5nbGUgb2JqZWN0OiBgKHZhbF8xLCB2YWxfMiwgLi4uKWBcclxuICogLSBmcm9tIGFuIGFycmF5IG9mIG9iamVjdHM6IGAodmFsXzExLCB2YWxfMTIsIC4uLiksICh2YWxfMjEsIHZhbF8yMiwgLi4uKWBcclxuICpcclxuICogQHBhcmFtIHtvYmplY3R8b2JqZWN0W119IGRhdGFcclxuICogQSBzb3VyY2Ugb2JqZWN0IHdpdGggcHJvcGVydGllcyBhcyB2YWx1ZXMsIG9yIGFuIGFycmF5IG9mIHN1Y2ggb2JqZWN0cy5cclxuICpcclxuICogSWYgaXQgaXMgYW55dGhpbmcgZWxzZSwgdGhlIG1ldGhvZCB3aWxsIHRocm93IHtAbGluayBleHRlcm5hbDpUeXBlRXJyb3IgVHlwZUVycm9yfSA9IGBJbnZhbGlkIHBhcmFtZXRlciAnZGF0YScgc3BlY2lmaWVkLmBcclxuICpcclxuICogV2hlbiBgZGF0YWAgaXMgYW4gYXJyYXkgdGhhdCBjb250YWlucyBhIG5vbi1vYmplY3QgdmFsdWUsIHRoZSBtZXRob2Qgd2lsbCB0aHJvdyB7QGxpbmsgZXh0ZXJuYWw6RXJyb3IgRXJyb3J9ID1cclxuICogYEludmFsaWQgb2JqZWN0IGF0IGluZGV4IE4uYFxyXG4gKlxyXG4gKiBXaGVuIGBkYXRhYCBpcyBhbiBlbXB0eSBhcnJheSwgYW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge2FycmF5fGhlbHBlcnMuQ29sdW1ufGhlbHBlcnMuQ29sdW1uU2V0fSBbY29sdW1uc11cclxuICogQ29sdW1ucyBmb3Igd2hpY2ggdG8gcmV0dXJuIHZhbHVlcy5cclxuICpcclxuICogSXQgaXMgb3B0aW9uYWwgd2hlbiBgZGF0YWAgaXMgYSBzaW5nbGUgb2JqZWN0LCBhbmQgcmVxdWlyZWQgd2hlbiBgZGF0YWAgaXMgYW4gYXJyYXkgb2Ygb2JqZWN0cy4gSWYgbm90IHNwZWNpZmllZCBmb3IgYW4gYXJyYXlcclxuICogb2Ygb2JqZWN0cywgdGhlIG1ldGhvZCB3aWxsIHRocm93IHtAbGluayBleHRlcm5hbDpUeXBlRXJyb3IgVHlwZUVycm9yfSA9IGBQYXJhbWV0ZXIgJ2NvbHVtbnMnIGlzIHJlcXVpcmVkIHdoZW4gZ2VuZXJhdGluZyBtdWx0aS1yb3cgdmFsdWVzLmBcclxuICpcclxuICogV2hlbiB0aGUgZmluYWwge0BsaW5rIGhlbHBlcnMuQ29sdW1uU2V0IENvbHVtblNldH0gaXMgZW1wdHkgKG5vIGNvbHVtbnMgaW4gaXQpLCB0aGUgbWV0aG9kIHdpbGwgdGhyb3dcclxuICoge0BsaW5rIGV4dGVybmFsOkVycm9yIEVycm9yfSA9IGBDYW5ub3QgZ2VuZXJhdGUgdmFsdWVzIHdpdGhvdXQgYW55IGNvbHVtbnMuYFxyXG4gKlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gKiAtIGNvbW1hLXNlcGFyYXRlZCB2YWx1ZSBncm91cHMsIGFjY29yZGluZyB0byBgZGF0YWBcclxuICogLSBhbiBlbXB0eSBzdHJpbmcsIGlmIGBkYXRhYCBpcyBhbiBlbXB0eSBhcnJheVxyXG4gKlxyXG4gKiBAc2VlXHJcbiAqICB7QGxpbmsgaGVscGVycy5Db2x1bW4gQ29sdW1ufSxcclxuICogIHtAbGluayBoZWxwZXJzLkNvbHVtblNldCBDb2x1bW5TZXR9XHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGNvbnN0IHBncCA9IHJlcXVpcmUoJ3BnLXByb21pc2UnKSgpO1xyXG4gKlxyXG4gKiBjb25zdCBkYXRhU2luZ2xlID0ge3ZhbDogMTIzLCBtc2c6ICdoZWxsbyd9O1xyXG4gKiBjb25zdCBkYXRhTXVsdGkgPSBbe3ZhbDogMTIzLCBtc2c6ICdoZWxsbyd9LCB7dmFsOiA0NTYsIG1zZzogJ3dvcmxkISd9XTtcclxuICpcclxuICogLy8gUHJvcGVydGllcyBjYW4gYmUgcHVsbGVkIGF1dG9tYXRpY2FsbHkgZnJvbSBhIHNpbmdsZSBvYmplY3Q6XHJcbiAqXHJcbiAqIHBncC5oZWxwZXJzLnZhbHVlcyhkYXRhU2luZ2xlKTtcclxuICogLy89PiAoMTIzLCdoZWxsbycpXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIC8vIENvbHVtbiBkZXRhaWxzIGFyZSByZXF1aXJlZCB3aGVuIHVzaW5nIGFuIGFycmF5IG9mIG9iamVjdHM6XHJcbiAqXHJcbiAqIHBncC5oZWxwZXJzLnZhbHVlcyhkYXRhTXVsdGksIFsndmFsJywgJ21zZyddKTtcclxuICogLy89PiAoMTIzLCdoZWxsbycpLCg0NTYsJ3dvcmxkIScpXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIC8vIENvbHVtbiBkZXRhaWxzIGZyb20gYSByZXVzYWJsZSBDb2x1bW5TZXQgKHJlY29tbWVuZGVkIGZvciBwZXJmb3JtYW5jZSk6XHJcbiAqXHJcbiAqIGNvbnN0IGNzID0gbmV3IHBncC5oZWxwZXJzLkNvbHVtblNldChbJ3ZhbCcsICdtc2cnXSk7XHJcbiAqXHJcbiAqIHBncC5oZWxwZXJzLnZhbHVlcyhkYXRhTXVsdGksIGNzKTtcclxuICogLy89PiAoMTIzLCdoZWxsbycpLCg0NTYsJ3dvcmxkIScpXHJcbiAqXHJcbiAqL1xyXG5mdW5jdGlvbiB2YWx1ZXMoZGF0YSwgY29sdW1ucywgY2FwU1FMKSB7XHJcblxyXG4gICAgaWYgKCFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgcGFyYW1ldGVyIFxcJ2RhdGFcXCcgc3BlY2lmaWVkLicpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KGRhdGEpO1xyXG5cclxuICAgIGlmICghKGNvbHVtbnMgaW5zdGFuY2VvZiBDb2x1bW5TZXQpKSB7XHJcbiAgICAgICAgaWYgKGlzQXJyYXkgJiYgbnBtLnV0aWxzLmlzTnVsbChjb2x1bW5zKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQYXJhbWV0ZXIgXFwnY29sdW1uc1xcJyBpcyByZXF1aXJlZCB3aGVuIGdlbmVyYXRpbmcgbXVsdGktcm93IHZhbHVlcy4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29sdW1ucyA9IG5ldyBDb2x1bW5TZXQoY29sdW1ucyB8fCBkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWNvbHVtbnMuY29sdW1ucy5sZW5ndGgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBnZW5lcmF0ZSB2YWx1ZXMgd2l0aG91dCBhbnkgY29sdW1ucy4nKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBmb3JtYXQgPSBucG0uZm9ybWF0dGluZy5hcy5mb3JtYXQsXHJcbiAgICAgICAgZm1PcHRpb25zID0ge2NhcFNRTH07XHJcblxyXG4gICAgaWYgKGlzQXJyYXkpIHtcclxuICAgICAgICByZXR1cm4gZGF0YS5tYXAoKGQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghZCB8fCB0eXBlb2YgZCAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBvYmplY3QgYXQgaW5kZXggJHtpbmRleH0uYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuICcoJyArIGZvcm1hdChjb2x1bW5zLnZhcmlhYmxlcywgY29sdW1ucy5wcmVwYXJlKGQpLCBmbU9wdGlvbnMpICsgJyknO1xyXG4gICAgICAgIH0pLmpvaW4oKTtcclxuICAgIH1cclxuICAgIHJldHVybiAnKCcgKyBmb3JtYXQoY29sdW1ucy52YXJpYWJsZXMsIGNvbHVtbnMucHJlcGFyZShkYXRhKSwgZm1PcHRpb25zKSArICcpJztcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7dmFsdWVzfTtcclxuIl0sIm5hbWVzIjpbIkNvbHVtblNldCIsInJlcXVpcmUiLCJucG0iLCJmb3JtYXR0aW5nIiwidXRpbHMiLCJ2YWx1ZXMiLCJkYXRhIiwiY29sdW1ucyIsImNhcFNRTCIsIlR5cGVFcnJvciIsImlzQXJyYXkiLCJBcnJheSIsImlzTnVsbCIsImxlbmd0aCIsIkVycm9yIiwiZm9ybWF0IiwiYXMiLCJmbU9wdGlvbnMiLCJtYXAiLCJkIiwiaW5kZXgiLCJ2YXJpYWJsZXMiLCJwcmVwYXJlIiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/helpers/methods/values.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/helpers/table-name.js":
/*!***********************************************************!*\
  !*** ./node_modules/pg-promise/lib/helpers/table-name.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { assert } = __webpack_require__(/*! ../assert */ \"(rsc)/./node_modules/pg-promise/lib/assert.js\");\nconst npm = {\n    utils: __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\"),\n    format: (__webpack_require__(/*! ../formatting */ \"(rsc)/./node_modules/pg-promise/lib/formatting.js\").as) // formatting namespace\n};\n/**\r\n * @class helpers.TableName\r\n * @description\r\n * Represents a full table name that can be injected into queries directly.\r\n *\r\n * This is a read-only type that can be used wherever parameter `table` is supported.\r\n *\r\n * It supports $[Custom Type Formatting], which means you can use the type directly as a formatting\r\n * parameter, without specifying any escaping.\r\n *\r\n * Filter `:alias` is an alternative approach to splitting an SQL name into multiple ones.\r\n *\r\n * @param {string|object} table\r\n * Table name details, depending on the type:\r\n *\r\n * - table name, if `table` is a string\r\n * - object `{table, [schema]}`\r\n *\r\n * @property {string} name\r\n * Formatted/escaped full table name, combining `schema` + `table`.\r\n *\r\n * @property {string} table\r\n * Table name.\r\n *\r\n * @property {string} schema\r\n * Database schema name.\r\n *\r\n * It is `undefined` when no valid schema was specified.\r\n *\r\n * @returns {helpers.TableName}\r\n *\r\n * @see\r\n * {@link helpers.TableName#toPostgres toPostgres}\r\n *\r\n * @example\r\n *\r\n * const table = new pgp.helpers.TableName({table: 'my-table', schema: 'my-schema'});\r\n * console.log(table);\r\n * //=> \"my-schema\".\"my-table\"\r\n *\r\n * // Formatting the type directly:\r\n * pgp.as.format('SELECT * FROM $1', table);\r\n * //=> SELECT * FROM \"my-schema\".\"my-table\"\r\n *\r\n */ class TableName {\n    constructor(table){\n        if (typeof table === \"string\") {\n            this.table = table;\n        } else {\n            const config = assert(table, [\n                \"table\",\n                \"schema\"\n            ]);\n            this.table = config.table;\n            if (npm.utils.isText(config.schema)) {\n                this.schema = config.schema;\n            }\n        }\n        if (!npm.utils.isText(this.table)) {\n            throw new TypeError(\"Table name must be a non-empty text string.\");\n        }\n        this.name = npm.format.name(this.table);\n        if (this.schema) {\n            this.name = npm.format.name(this.schema) + \".\" + this.name;\n        }\n        Object.freeze(this);\n    }\n}\n/**\r\n * @method helpers.TableName#toPostgres\r\n * @description\r\n * $[Custom Type Formatting], based on $[Symbolic CTF], i.e. the actual method is available only via {@link external:Symbol Symbol}:\r\n *\r\n * ```js\r\n * const ctf = pgp.as.ctf; // Custom Type Formatting symbols namespace\r\n * const fullName = tn[ctf.toPostgres]; // tn = an object of type TableName\r\n * ```\r\n *\r\n * This is a raw formatting type (`rawType = true`), i.e. when used as a query-formatting parameter, type `TableName`\r\n * injects full table name as raw text.\r\n *\r\n * @param {helpers.TableName} [self]\r\n * Optional self-reference, for ES6 arrow functions.\r\n *\r\n * @returns {string}\r\n * Escaped full table name that includes optional schema name, if specified.\r\n */ TableName.prototype[npm.format.ctf.toPostgres] = function(self) {\n    self = this instanceof TableName && this || self;\n    return self.name;\n};\nTableName.prototype[npm.format.ctf.rawType] = true; // use as pre-formatted\n/**\r\n * @method helpers.TableName#toString\r\n * @description\r\n * Creates a well-formatted string that represents the object.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @returns {string}\r\n */ TableName.prototype.toString = function() {\n    return this.name;\n};\nnpm.utils.addInspection(TableName, function() {\n    return this.toString();\n});\nmodule.exports = {\n    TableName\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvaGVscGVycy90YWJsZS1uYW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0NBT0M7QUFFRCxNQUFNLEVBQUNBLE1BQU0sRUFBQyxHQUFHQyxtQkFBT0EsQ0FBQztBQUV6QixNQUFNQyxNQUFNO0lBQ1JDLE9BQU9GLG1CQUFPQSxDQUFDO0lBQ2ZHLFFBQVFILGtHQUEyQixDQUFDLHVCQUF1QjtBQUMvRDtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQTRDQyxHQUNELE1BQU1LO0lBRUZDLFlBQVlDLEtBQUssQ0FBRTtRQUNmLElBQUksT0FBT0EsVUFBVSxVQUFVO1lBQzNCLElBQUksQ0FBQ0EsS0FBSyxHQUFHQTtRQUNqQixPQUFPO1lBQ0gsTUFBTUMsU0FBU1QsT0FBT1EsT0FBTztnQkFBQztnQkFBUzthQUFTO1lBQ2hELElBQUksQ0FBQ0EsS0FBSyxHQUFHQyxPQUFPRCxLQUFLO1lBQ3pCLElBQUlOLElBQUlDLEtBQUssQ0FBQ08sTUFBTSxDQUFDRCxPQUFPRSxNQUFNLEdBQUc7Z0JBQ2pDLElBQUksQ0FBQ0EsTUFBTSxHQUFHRixPQUFPRSxNQUFNO1lBQy9CO1FBQ0o7UUFDQSxJQUFJLENBQUNULElBQUlDLEtBQUssQ0FBQ08sTUFBTSxDQUFDLElBQUksQ0FBQ0YsS0FBSyxHQUFHO1lBQy9CLE1BQU0sSUFBSUksVUFBVTtRQUN4QjtRQUNBLElBQUksQ0FBQ0MsSUFBSSxHQUFHWCxJQUFJRSxNQUFNLENBQUNTLElBQUksQ0FBQyxJQUFJLENBQUNMLEtBQUs7UUFDdEMsSUFBSSxJQUFJLENBQUNHLE1BQU0sRUFBRTtZQUNiLElBQUksQ0FBQ0UsSUFBSSxHQUFHWCxJQUFJRSxNQUFNLENBQUNTLElBQUksQ0FBQyxJQUFJLENBQUNGLE1BQU0sSUFBSSxNQUFNLElBQUksQ0FBQ0UsSUFBSTtRQUM5RDtRQUNBQyxPQUFPQyxNQUFNLENBQUMsSUFBSTtJQUN0QjtBQUNKO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWtCQyxHQUNEVCxVQUFVVSxTQUFTLENBQUNkLElBQUlFLE1BQU0sQ0FBQ2EsR0FBRyxDQUFDQyxVQUFVLENBQUMsR0FBRyxTQUFVQyxJQUFJO0lBQzNEQSxPQUFPLElBQUksWUFBWWIsYUFBYSxJQUFJLElBQUlhO0lBQzVDLE9BQU9BLEtBQUtOLElBQUk7QUFDcEI7QUFFQVAsVUFBVVUsU0FBUyxDQUFDZCxJQUFJRSxNQUFNLENBQUNhLEdBQUcsQ0FBQ0csT0FBTyxDQUFDLEdBQUcsTUFBTSx1QkFBdUI7QUFFM0U7Ozs7Ozs7O0NBUUMsR0FDRGQsVUFBVVUsU0FBUyxDQUFDSyxRQUFRLEdBQUc7SUFDM0IsT0FBTyxJQUFJLENBQUNSLElBQUk7QUFDcEI7QUFFQVgsSUFBSUMsS0FBSyxDQUFDbUIsYUFBYSxDQUFDaEIsV0FBVztJQUMvQixPQUFPLElBQUksQ0FBQ2UsUUFBUTtBQUN4QjtBQUVBRSxPQUFPQyxPQUFPLEdBQUc7SUFBQ2xCO0FBQVMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odG1sLWNvbnZlcnRlci8uL25vZGVfbW9kdWxlcy9wZy1wcm9taXNlL2xpYi9oZWxwZXJzL3RhYmxlLW5hbWUuanM/YmY1YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgVml0YWx5IFRvbWlsb3ZcclxuICpcclxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHRvcC1sZXZlbCBkaXJlY3Rvcnkgb2YgdGhpcyBkaXN0cmlidXRpb25cclxuICogZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbi5cclxuICpcclxuICogUmVtb3ZhbCBvciBtb2RpZmljYXRpb24gb2YgdGhpcyBjb3B5cmlnaHQgbm90aWNlIGlzIHByb2hpYml0ZWQuXHJcbiAqL1xyXG5cclxuY29uc3Qge2Fzc2VydH0gPSByZXF1aXJlKCcuLi9hc3NlcnQnKTtcclxuXHJcbmNvbnN0IG5wbSA9IHtcclxuICAgIHV0aWxzOiByZXF1aXJlKCcuLi91dGlscycpLFxyXG4gICAgZm9ybWF0OiByZXF1aXJlKCcuLi9mb3JtYXR0aW5nJykuYXMgLy8gZm9ybWF0dGluZyBuYW1lc3BhY2VcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAY2xhc3MgaGVscGVycy5UYWJsZU5hbWVcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFJlcHJlc2VudHMgYSBmdWxsIHRhYmxlIG5hbWUgdGhhdCBjYW4gYmUgaW5qZWN0ZWQgaW50byBxdWVyaWVzIGRpcmVjdGx5LlxyXG4gKlxyXG4gKiBUaGlzIGlzIGEgcmVhZC1vbmx5IHR5cGUgdGhhdCBjYW4gYmUgdXNlZCB3aGVyZXZlciBwYXJhbWV0ZXIgYHRhYmxlYCBpcyBzdXBwb3J0ZWQuXHJcbiAqXHJcbiAqIEl0IHN1cHBvcnRzICRbQ3VzdG9tIFR5cGUgRm9ybWF0dGluZ10sIHdoaWNoIG1lYW5zIHlvdSBjYW4gdXNlIHRoZSB0eXBlIGRpcmVjdGx5IGFzIGEgZm9ybWF0dGluZ1xyXG4gKiBwYXJhbWV0ZXIsIHdpdGhvdXQgc3BlY2lmeWluZyBhbnkgZXNjYXBpbmcuXHJcbiAqXHJcbiAqIEZpbHRlciBgOmFsaWFzYCBpcyBhbiBhbHRlcm5hdGl2ZSBhcHByb2FjaCB0byBzcGxpdHRpbmcgYW4gU1FMIG5hbWUgaW50byBtdWx0aXBsZSBvbmVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHRhYmxlXHJcbiAqIFRhYmxlIG5hbWUgZGV0YWlscywgZGVwZW5kaW5nIG9uIHRoZSB0eXBlOlxyXG4gKlxyXG4gKiAtIHRhYmxlIG5hbWUsIGlmIGB0YWJsZWAgaXMgYSBzdHJpbmdcclxuICogLSBvYmplY3QgYHt0YWJsZSwgW3NjaGVtYV19YFxyXG4gKlxyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbmFtZVxyXG4gKiBGb3JtYXR0ZWQvZXNjYXBlZCBmdWxsIHRhYmxlIG5hbWUsIGNvbWJpbmluZyBgc2NoZW1hYCArIGB0YWJsZWAuXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0YWJsZVxyXG4gKiBUYWJsZSBuYW1lLlxyXG4gKlxyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc2NoZW1hXHJcbiAqIERhdGFiYXNlIHNjaGVtYSBuYW1lLlxyXG4gKlxyXG4gKiBJdCBpcyBgdW5kZWZpbmVkYCB3aGVuIG5vIHZhbGlkIHNjaGVtYSB3YXMgc3BlY2lmaWVkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7aGVscGVycy5UYWJsZU5hbWV9XHJcbiAqXHJcbiAqIEBzZWVcclxuICoge0BsaW5rIGhlbHBlcnMuVGFibGVOYW1lI3RvUG9zdGdyZXMgdG9Qb3N0Z3Jlc31cclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogY29uc3QgdGFibGUgPSBuZXcgcGdwLmhlbHBlcnMuVGFibGVOYW1lKHt0YWJsZTogJ215LXRhYmxlJywgc2NoZW1hOiAnbXktc2NoZW1hJ30pO1xyXG4gKiBjb25zb2xlLmxvZyh0YWJsZSk7XHJcbiAqIC8vPT4gXCJteS1zY2hlbWFcIi5cIm15LXRhYmxlXCJcclxuICpcclxuICogLy8gRm9ybWF0dGluZyB0aGUgdHlwZSBkaXJlY3RseTpcclxuICogcGdwLmFzLmZvcm1hdCgnU0VMRUNUICogRlJPTSAkMScsIHRhYmxlKTtcclxuICogLy89PiBTRUxFQ1QgKiBGUk9NIFwibXktc2NoZW1hXCIuXCJteS10YWJsZVwiXHJcbiAqXHJcbiAqL1xyXG5jbGFzcyBUYWJsZU5hbWUge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0YWJsZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgdGhpcy50YWJsZSA9IHRhYmxlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IGFzc2VydCh0YWJsZSwgWyd0YWJsZScsICdzY2hlbWEnXSk7XHJcbiAgICAgICAgICAgIHRoaXMudGFibGUgPSBjb25maWcudGFibGU7XHJcbiAgICAgICAgICAgIGlmIChucG0udXRpbHMuaXNUZXh0KGNvbmZpZy5zY2hlbWEpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYSA9IGNvbmZpZy5zY2hlbWE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFucG0udXRpbHMuaXNUZXh0KHRoaXMudGFibGUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RhYmxlIG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSB0ZXh0IHN0cmluZy4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbnBtLmZvcm1hdC5uYW1lKHRoaXMudGFibGUpO1xyXG4gICAgICAgIGlmICh0aGlzLnNjaGVtYSkge1xyXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBucG0uZm9ybWF0Lm5hbWUodGhpcy5zY2hlbWEpICsgJy4nICsgdGhpcy5uYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBPYmplY3QuZnJlZXplKHRoaXMpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQG1ldGhvZCBoZWxwZXJzLlRhYmxlTmFtZSN0b1Bvc3RncmVzXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiAkW0N1c3RvbSBUeXBlIEZvcm1hdHRpbmddLCBiYXNlZCBvbiAkW1N5bWJvbGljIENURl0sIGkuZS4gdGhlIGFjdHVhbCBtZXRob2QgaXMgYXZhaWxhYmxlIG9ubHkgdmlhIHtAbGluayBleHRlcm5hbDpTeW1ib2wgU3ltYm9sfTpcclxuICpcclxuICogYGBganNcclxuICogY29uc3QgY3RmID0gcGdwLmFzLmN0ZjsgLy8gQ3VzdG9tIFR5cGUgRm9ybWF0dGluZyBzeW1ib2xzIG5hbWVzcGFjZVxyXG4gKiBjb25zdCBmdWxsTmFtZSA9IHRuW2N0Zi50b1Bvc3RncmVzXTsgLy8gdG4gPSBhbiBvYmplY3Qgb2YgdHlwZSBUYWJsZU5hbWVcclxuICogYGBgXHJcbiAqXHJcbiAqIFRoaXMgaXMgYSByYXcgZm9ybWF0dGluZyB0eXBlIChgcmF3VHlwZSA9IHRydWVgKSwgaS5lLiB3aGVuIHVzZWQgYXMgYSBxdWVyeS1mb3JtYXR0aW5nIHBhcmFtZXRlciwgdHlwZSBgVGFibGVOYW1lYFxyXG4gKiBpbmplY3RzIGZ1bGwgdGFibGUgbmFtZSBhcyByYXcgdGV4dC5cclxuICpcclxuICogQHBhcmFtIHtoZWxwZXJzLlRhYmxlTmFtZX0gW3NlbGZdXHJcbiAqIE9wdGlvbmFsIHNlbGYtcmVmZXJlbmNlLCBmb3IgRVM2IGFycm93IGZ1bmN0aW9ucy5cclxuICpcclxuICogQHJldHVybnMge3N0cmluZ31cclxuICogRXNjYXBlZCBmdWxsIHRhYmxlIG5hbWUgdGhhdCBpbmNsdWRlcyBvcHRpb25hbCBzY2hlbWEgbmFtZSwgaWYgc3BlY2lmaWVkLlxyXG4gKi9cclxuVGFibGVOYW1lLnByb3RvdHlwZVtucG0uZm9ybWF0LmN0Zi50b1Bvc3RncmVzXSA9IGZ1bmN0aW9uIChzZWxmKSB7XHJcbiAgICBzZWxmID0gdGhpcyBpbnN0YW5jZW9mIFRhYmxlTmFtZSAmJiB0aGlzIHx8IHNlbGY7XHJcbiAgICByZXR1cm4gc2VsZi5uYW1lO1xyXG59O1xyXG5cclxuVGFibGVOYW1lLnByb3RvdHlwZVtucG0uZm9ybWF0LmN0Zi5yYXdUeXBlXSA9IHRydWU7IC8vIHVzZSBhcyBwcmUtZm9ybWF0dGVkXHJcblxyXG4vKipcclxuICogQG1ldGhvZCBoZWxwZXJzLlRhYmxlTmFtZSN0b1N0cmluZ1xyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQ3JlYXRlcyBhIHdlbGwtZm9ybWF0dGVkIHN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIG9iamVjdC5cclxuICpcclxuICogSXQgaXMgY2FsbGVkIGF1dG9tYXRpY2FsbHkgd2hlbiB3cml0aW5nIHRoZSBvYmplY3QgaW50byB0aGUgY29uc29sZS5cclxuICpcclxuICogQHJldHVybnMge3N0cmluZ31cclxuICovXHJcblRhYmxlTmFtZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xyXG59O1xyXG5cclxubnBtLnV0aWxzLmFkZEluc3BlY3Rpb24oVGFibGVOYW1lLCBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1RhYmxlTmFtZX07XHJcbiJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwibnBtIiwidXRpbHMiLCJmb3JtYXQiLCJhcyIsIlRhYmxlTmFtZSIsImNvbnN0cnVjdG9yIiwidGFibGUiLCJjb25maWciLCJpc1RleHQiLCJzY2hlbWEiLCJUeXBlRXJyb3IiLCJuYW1lIiwiT2JqZWN0IiwiZnJlZXplIiwicHJvdG90eXBlIiwiY3RmIiwidG9Qb3N0Z3JlcyIsInNlbGYiLCJyYXdUeXBlIiwidG9TdHJpbmciLCJhZGRJbnNwZWN0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/helpers/table-name.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/pg-promise/lib/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ /* eslint no-var: off */ \nvar v = process.versions.node.split(\".\"), highVer = +v[0];\n// istanbul ignore next\nif (highVer < 14) {\n    // From pg-promise v11.0.0, the oldest supported Node.js is v14.0.0\n    // Node.js v12.0.0 was supported up to pg-promise v10.15.4\n    // Node.js v8.0.0 was supported up to pg-promise v10.14.2\n    // Node.js v7.6.0 was supported up to pg-promise v10.3.5\n    // Node.js v4.5.0 was supported up to pg-promise v8.7.5\n    // Node.js v0.10 was supported up to pg-promise v5.5.8\n    throw new Error(\"Minimum Node.js version supported by pg-promise is 14.0.0\");\n}\nmodule.exports = __webpack_require__(/*! ./main */ \"(rsc)/./node_modules/pg-promise/lib/main.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Q0FPQyxHQUVELHNCQUFzQjtBQUN0QixJQUFJQSxJQUFJQyxRQUFRQyxRQUFRLENBQUNDLElBQUksQ0FBQ0MsS0FBSyxDQUFDLE1BQ2hDQyxVQUFVLENBQUNMLENBQUMsQ0FBQyxFQUFFO0FBRW5CLHVCQUF1QjtBQUN2QixJQUFJSyxVQUFVLElBQUk7SUFFZCxtRUFBbUU7SUFFbkUsMERBQTBEO0lBQzFELHlEQUF5RDtJQUN6RCx3REFBd0Q7SUFDeEQsdURBQXVEO0lBQ3ZELHNEQUFzRDtJQUV0RCxNQUFNLElBQUlDLE1BQU07QUFDcEI7QUFFQUMsaUdBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHRtbC1jb252ZXJ0ZXIvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvaW5kZXguanM/MTgzMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgVml0YWx5IFRvbWlsb3ZcclxuICpcclxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHRvcC1sZXZlbCBkaXJlY3Rvcnkgb2YgdGhpcyBkaXN0cmlidXRpb25cclxuICogZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbi5cclxuICpcclxuICogUmVtb3ZhbCBvciBtb2RpZmljYXRpb24gb2YgdGhpcyBjb3B5cmlnaHQgbm90aWNlIGlzIHByb2hpYml0ZWQuXHJcbiAqL1xyXG5cclxuLyogZXNsaW50IG5vLXZhcjogb2ZmICovXHJcbnZhciB2ID0gcHJvY2Vzcy52ZXJzaW9ucy5ub2RlLnNwbGl0KCcuJyksXHJcbiAgICBoaWdoVmVyID0gK3ZbMF07XHJcblxyXG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxyXG5pZiAoaGlnaFZlciA8IDE0KSB7XHJcblxyXG4gICAgLy8gRnJvbSBwZy1wcm9taXNlIHYxMS4wLjAsIHRoZSBvbGRlc3Qgc3VwcG9ydGVkIE5vZGUuanMgaXMgdjE0LjAuMFxyXG5cclxuICAgIC8vIE5vZGUuanMgdjEyLjAuMCB3YXMgc3VwcG9ydGVkIHVwIHRvIHBnLXByb21pc2UgdjEwLjE1LjRcclxuICAgIC8vIE5vZGUuanMgdjguMC4wIHdhcyBzdXBwb3J0ZWQgdXAgdG8gcGctcHJvbWlzZSB2MTAuMTQuMlxyXG4gICAgLy8gTm9kZS5qcyB2Ny42LjAgd2FzIHN1cHBvcnRlZCB1cCB0byBwZy1wcm9taXNlIHYxMC4zLjVcclxuICAgIC8vIE5vZGUuanMgdjQuNS4wIHdhcyBzdXBwb3J0ZWQgdXAgdG8gcGctcHJvbWlzZSB2OC43LjVcclxuICAgIC8vIE5vZGUuanMgdjAuMTAgd2FzIHN1cHBvcnRlZCB1cCB0byBwZy1wcm9taXNlIHY1LjUuOFxyXG5cclxuICAgIHRocm93IG5ldyBFcnJvcignTWluaW11bSBOb2RlLmpzIHZlcnNpb24gc3VwcG9ydGVkIGJ5IHBnLXByb21pc2UgaXMgMTQuMC4wJyk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9tYWluJyk7XHJcbiJdLCJuYW1lcyI6WyJ2IiwicHJvY2VzcyIsInZlcnNpb25zIiwibm9kZSIsInNwbGl0IiwiaGlnaFZlciIsIkVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/inner-state.js":
/*!****************************************************!*\
  !*** ./node_modules/pg-promise/lib/inner-state.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { addReadProp } = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\");\n/**\r\n * @private\r\n * @class InnerState\r\n * @description\r\n * Implements support for private/inner state object inside the class,\r\n * which can be accessed by a derived class via hidden read-only property _inner.\r\n */ class InnerState {\n    constructor(initialState){\n        addReadProp(this, \"_inner\", {}, true);\n        if (initialState && typeof initialState === \"object\") {\n            this.extendState(initialState);\n        }\n    }\n    /**\r\n     * Extends or overrides inner state with the specified properties.\r\n     *\r\n     * Only own properties are used, i.e. inherited ones are skipped.\r\n     */ extendState(state) {\n        for(const a in state){\n            // istanbul ignore else\n            if (Object.prototype.hasOwnProperty.call(state, a)) {\n                this._inner[a] = state[a];\n            }\n        }\n    }\n}\n/**\r\n * @member InnerState#_inner\r\n * Private/Inner object state.\r\n */ module.exports = {\n    InnerState\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvaW5uZXItc3RhdGUuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sRUFBQ0EsV0FBVyxFQUFDLEdBQUdDLG1CQUFPQSxDQUFDO0FBRTlCOzs7Ozs7Q0FNQyxHQUNELE1BQU1DO0lBRUZDLFlBQVlDLFlBQVksQ0FBRTtRQUN0QkosWUFBWSxJQUFJLEVBQUUsVUFBVSxDQUFDLEdBQUc7UUFDaEMsSUFBSUksZ0JBQWdCLE9BQU9BLGlCQUFpQixVQUFVO1lBQ2xELElBQUksQ0FBQ0MsV0FBVyxDQUFDRDtRQUNyQjtJQUNKO0lBRUE7Ozs7S0FJQyxHQUNEQyxZQUFZQyxLQUFLLEVBQUU7UUFDZixJQUFLLE1BQU1DLEtBQUtELE1BQU87WUFDbkIsdUJBQXVCO1lBQ3ZCLElBQUlFLE9BQU9DLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNMLE9BQU9DLElBQUk7Z0JBQ2hELElBQUksQ0FBQ0ssTUFBTSxDQUFDTCxFQUFFLEdBQUdELEtBQUssQ0FBQ0MsRUFBRTtZQUM3QjtRQUNKO0lBQ0o7QUFDSjtBQUVBOzs7Q0FHQyxHQUVETSxPQUFPQyxPQUFPLEdBQUc7SUFBQ1o7QUFBVSIsInNvdXJjZXMiOlsid2VicGFjazovL2h0bWwtY29udmVydGVyLy4vbm9kZV9tb2R1bGVzL3BnLXByb21pc2UvbGliL2lubmVyLXN0YXRlLmpzPzg3ZDciXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge2FkZFJlYWRQcm9wfSA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcclxuXHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAY2xhc3MgSW5uZXJTdGF0ZVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogSW1wbGVtZW50cyBzdXBwb3J0IGZvciBwcml2YXRlL2lubmVyIHN0YXRlIG9iamVjdCBpbnNpZGUgdGhlIGNsYXNzLFxyXG4gKiB3aGljaCBjYW4gYmUgYWNjZXNzZWQgYnkgYSBkZXJpdmVkIGNsYXNzIHZpYSBoaWRkZW4gcmVhZC1vbmx5IHByb3BlcnR5IF9pbm5lci5cclxuICovXHJcbmNsYXNzIElubmVyU3RhdGUge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGluaXRpYWxTdGF0ZSkge1xyXG4gICAgICAgIGFkZFJlYWRQcm9wKHRoaXMsICdfaW5uZXInLCB7fSwgdHJ1ZSk7XHJcbiAgICAgICAgaWYgKGluaXRpYWxTdGF0ZSAmJiB0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICB0aGlzLmV4dGVuZFN0YXRlKGluaXRpYWxTdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXh0ZW5kcyBvciBvdmVycmlkZXMgaW5uZXIgc3RhdGUgd2l0aCB0aGUgc3BlY2lmaWVkIHByb3BlcnRpZXMuXHJcbiAgICAgKlxyXG4gICAgICogT25seSBvd24gcHJvcGVydGllcyBhcmUgdXNlZCwgaS5lLiBpbmhlcml0ZWQgb25lcyBhcmUgc2tpcHBlZC5cclxuICAgICAqL1xyXG4gICAgZXh0ZW5kU3RhdGUoc3RhdGUpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGEgaW4gc3RhdGUpIHtcclxuICAgICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIGVsc2VcclxuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzdGF0ZSwgYSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lubmVyW2FdID0gc3RhdGVbYV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbWVtYmVyIElubmVyU3RhdGUjX2lubmVyXHJcbiAqIFByaXZhdGUvSW5uZXIgb2JqZWN0IHN0YXRlLlxyXG4gKi9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge0lubmVyU3RhdGV9O1xyXG4iXSwibmFtZXMiOlsiYWRkUmVhZFByb3AiLCJyZXF1aXJlIiwiSW5uZXJTdGF0ZSIsImNvbnN0cnVjdG9yIiwiaW5pdGlhbFN0YXRlIiwiZXh0ZW5kU3RhdGUiLCJzdGF0ZSIsImEiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJfaW5uZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/inner-state.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/main.js":
/*!*********************************************!*\
  !*** ./node_modules/pg-promise/lib/main.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { PromiseAdapter } = __webpack_require__(/*! ./promise-adapter */ \"(rsc)/./node_modules/pg-promise/lib/promise-adapter.js\");\nconst { DatabasePool } = __webpack_require__(/*! ./database-pool */ \"(rsc)/./node_modules/pg-promise/lib/database-pool.js\");\nconst { PreparedStatement, ParameterizedQuery } = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/pg-promise/lib/types/index.js\");\nconst { QueryFile } = __webpack_require__(/*! ./query-file */ \"(rsc)/./node_modules/pg-promise/lib/query-file.js\");\nconst { queryResult } = __webpack_require__(/*! ./query-result */ \"(rsc)/./node_modules/pg-promise/lib/query-result.js\");\nconst { parsePromise } = __webpack_require__(/*! ./promise-parser */ \"(rsc)/./node_modules/pg-promise/lib/promise-parser.js\");\nconst { assert } = __webpack_require__(/*! ./assert */ \"(rsc)/./node_modules/pg-promise/lib/assert.js\");\nconst npm = {\n    path: __webpack_require__(/*! path */ \"path\"),\n    pg: __webpack_require__(/*! pg */ \"pg\"),\n    minify: __webpack_require__(/*! pg-minify */ \"(rsc)/./node_modules/pg-minify/lib/index.js\"),\n    formatting: __webpack_require__(/*! ./formatting */ \"(rsc)/./node_modules/pg-promise/lib/formatting.js\"),\n    helpers: __webpack_require__(/*! ./helpers */ \"(rsc)/./node_modules/pg-promise/lib/helpers/index.js\"),\n    errors: __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/pg-promise/lib/errors/index.js\"),\n    utils: __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\"),\n    pubUtils: __webpack_require__(/*! ./utils/public */ \"(rsc)/./node_modules/pg-promise/lib/utils/public.js\"),\n    mode: __webpack_require__(/*! ./tx-mode */ \"(rsc)/./node_modules/pg-promise/lib/tx-mode.js\"),\n    package: __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/pg-promise/package.json\"),\n    text: __webpack_require__(/*! ./text */ \"(rsc)/./node_modules/pg-promise/lib/text.js\")\n};\nlet originalClientConnect;\n/**\r\n * @author Vitaly Tomilov\r\n * @module pg-promise\r\n *\r\n * @description\r\n * ## pg-promise v11.4\r\n * All documentation here is for the latest official release only.\r\n *\r\n * ### Initialization Options\r\n *\r\n * Below is the complete list of _Initialization Options_ for the library that can be passed in during\r\n * the library's initialization:\r\n *\r\n * ```js\r\n * const initOptions = {&#47;* options as documented below *&#47;};\r\n *\r\n * const pgp = require('pg-promise')(initOptions);\r\n * ```\r\n *\r\n * @property {{}} [options]\r\n * Library Initialization Options.\r\n *\r\n * @property {boolean} [options.pgFormatting=false]\r\n * Redirects all query formatting to the $[pg] driver.\r\n *\r\n * By default (`false`), the library uses its own advanced query-formatting engine.\r\n * If you set this option to a truthy value, query formatting will be done entirely by the\r\n * $[pg] driver, which means you won't be able to use any of the feature-rich query formatting\r\n * that this library implements, restricting yourself to the very basic `$1, $2,...` syntax.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {boolean} [options.pgNative=false]\r\n * Use $[Native Bindings]. Library $[pg-native] must be included and installed independently, or else there will\r\n * be an error thrown: {@link external:Error Error} = `Failed to initialize Native Bindings.`\r\n *\r\n * This is a static option (can only be set prior to initialization).\r\n *\r\n * @property {object|function} [options.promiseLib=Promise]\r\n * Overrides the default (ES6 Promise) promise library for its internal use.\r\n *\r\n * Example below sets to use $[Bluebird] - the best and recommended promise library. It is the fastest one,\r\n * and supports $[Long Stack Traces], essential for debugging promises.\r\n *\r\n * ```js\r\n * const Promise = require('bluebird');\r\n * const initOptions = {\r\n *     promiseLib: Promise\r\n * };\r\n * const pgp = require('pg-promise')(initOptions);\r\n * ```\r\n *\r\n * All existing promise libraries are supported. The ones with recognizable signature are used automatically,\r\n * while the rest can be configured via the $[Promise Adapter].\r\n *\r\n * This is a static option (can only be set prior to initialization).\r\n *\r\n * @property {boolean} [options.capSQL=false]\r\n * Capitalizes any SQL generated by the library.\r\n *\r\n * By default, all internal SQL within the library is generated using the low case.\r\n * If, however, you want all SQL to be capitalized instead, set `capSQL` = `true`.\r\n *\r\n * It is purely a cosmetic feature.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {string|Array<string>|null|undefined|function} [options.schema]\r\n * Forces change of the default database schema(s) for every fresh connection, i.e.\r\n * the library will execute `SET search_path TO schema_1, schema_2, ...` in the background\r\n * whenever a fresh physical connection is allocated.\r\n *\r\n * Normally, one changes the default schema(s) by $[changing the database or the role], but sometimes you\r\n * may want to switch the default schema(s) without persisting the change, and then use this option.\r\n *\r\n * It can be a string, an array of strings, or a callback function that takes `dc` (database context)\r\n * as the only parameter (and as `this`), and returns schema(s) according to the database context. A callback function\r\n * can also return nothing (`undefined` or `null`), if no schema change needed for the specified database context.\r\n *\r\n * The order of schema names matters, so if a table name exists in more than one schema, its default access resolves\r\n * to the table from the first such schema on the list.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {boolean} [options.noWarnings=false]\r\n * Disables all diagnostic warnings in the library (it is ill-advised).\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.connect]\r\n * Global event {@link event:connect connect} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.disconnect]\r\n * Global event {@link event:disconnect disconnect} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.query]\r\n * Global event {@link event:query query} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.receive]\r\n * Global event {@link event:receive receive} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.task]\r\n * Global event {@link event:task task} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.transact]\r\n * Global event {@link event:transact transact} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.error]\r\n * Global event {@link event:error error} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.extend]\r\n * Global event {@link event:extend extend} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @see\r\n * {@link module:pg-promise~end end},\r\n * {@link module:pg-promise~as as},\r\n * {@link module:pg-promise~errors errors},\r\n * {@link module:pg-promise~helpers helpers},\r\n * {@link module:pg-promise~minify minify},\r\n * {@link module:pg-promise~ParameterizedQuery ParameterizedQuery},\r\n * {@link module:pg-promise~PreparedStatement PreparedStatement},\r\n * {@link module:pg-promise~pg pg},\r\n * {@link module:pg-promise~QueryFile QueryFile},\r\n * {@link module:pg-promise~queryResult queryResult},\r\n * {@link module:pg-promise~spex spex},\r\n * {@link module:pg-promise~txMode txMode},\r\n * {@link module:pg-promise~utils utils}\r\n *\r\n */ function $main(options) {\n    options = assert(options, [\n        \"pgFormatting\",\n        \"pgNative\",\n        \"promiseLib\",\n        \"capSQL\",\n        \"noWarnings\",\n        \"connect\",\n        \"disconnect\",\n        \"query\",\n        \"receive\",\n        \"task\",\n        \"transact\",\n        \"error\",\n        \"extend\",\n        \"schema\"\n    ]);\n    let pg = npm.pg;\n    const p = parsePromise(options.promiseLib);\n    const config = {\n        version: npm.package.version,\n        promiseLib: p.promiseLib,\n        promise: p.promise\n    };\n    npm.utils.addReadProp(config, \"$npm\", {}, true);\n    // Locking properties that cannot be changed later:\n    npm.utils.addReadProp(options, \"promiseLib\", options.promiseLib);\n    npm.utils.addReadProp(options, \"pgNative\", !!options.pgNative);\n    config.options = options;\n    // istanbul ignore next:\n    // we do not cover code specific to Native Bindings\n    if (options.pgNative) {\n        pg = npm.pg.native;\n        if (npm.utils.isNull(pg)) {\n            throw new Error(npm.text.nativeError);\n        }\n    } else {\n        if (!originalClientConnect) {\n            originalClientConnect = pg.Client.prototype.connect;\n            pg.Client.prototype.connect = function() {\n                const handler = (msg)=>{\n                    if (msg.parameterName === \"server_version\") {\n                        this.serverVersion = msg.parameterValue;\n                        this.connection.removeListener(\"parameterStatus\", handler);\n                    }\n                };\n                this.connection.on(\"parameterStatus\", handler);\n                return originalClientConnect.call(this, ...arguments);\n            };\n        }\n    }\n    const Database = __webpack_require__(/*! ./database */ \"(rsc)/./node_modules/pg-promise/lib/database.js\")(config);\n    const inst = (cn, dc)=>{\n        if (npm.utils.isText(cn) || cn && typeof cn === \"object\") {\n            return new Database(cn, dc, config);\n        }\n        throw new TypeError(\"Invalid connection details: \" + npm.utils.toJson(cn));\n    };\n    npm.utils.addReadProperties(inst, rootNameSpace);\n    /**\r\n     * @member {external:PG} pg\r\n     * @description\r\n     * Instance of the $[pg] library that's being used, depending on initialization option `pgNative`:\r\n     *  - regular `pg` module instance, without option `pgNative`, or equal to `false` (default)\r\n     *  - `pg` module instance with $[Native Bindings], if option `pgNative` was set.\r\n     *\r\n     * Available as `pgp.pg`, after initializing the library.\r\n     */ inst.pg = pg; // keep it modifiable, so the protocol can be mocked\n    /**\r\n     * @member {function} end\r\n     * @readonly\r\n     * @description\r\n     * Shuts down all connection pools created in the process, so it can terminate without delay.\r\n     * It is available as `pgp.end`, after initializing the library.\r\n     *\r\n     * All {@link Database} objects created previously can no longer be used, and their query methods will be rejecting\r\n     * with {@link external:Error Error} = `Connection pool of the database object has been destroyed.`\r\n     *\r\n     * And if you want to shut down only a specific connection pool, you do so via the {@link Database}\r\n     * object that owns the pool: `db.$pool.end()` (see {@link Database#$pool Database.$pool}).\r\n     *\r\n     * For more details see $[Library de-initialization].\r\n     */ npm.utils.addReadProp(inst, \"end\", ()=>{\n        DatabasePool.shutDown();\n    });\n    /**\r\n     * @member {helpers} helpers\r\n     * @readonly\r\n     * @description\r\n     * Namespace for {@link helpers all query-formatting helper functions}.\r\n     *\r\n     * Available as `pgp.helpers`, after initializing the library.\r\n     *\r\n     * @see {@link helpers}.\r\n     */ npm.utils.addReadProp(inst, \"helpers\", npm.helpers(config));\n    /**\r\n     * @member {external:spex} spex\r\n     * @readonly\r\n     * @description\r\n     * Initialized instance of the $[spex] module, used by the library within tasks and transactions.\r\n     *\r\n     * Available as `pgp.spex`, after initializing the library.\r\n     *\r\n     * @see\r\n     * {@link Task#batch},\r\n     * {@link Task#page},\r\n     * {@link Task#sequence}\r\n     */ npm.utils.addReadProp(inst, \"spex\", config.$npm.spex);\n    config.pgp = inst;\n    return inst;\n}\nconst rootNameSpace = {\n    /**\r\n     * @member {formatting} as\r\n     * @readonly\r\n     * @description\r\n     * Namespace for {@link formatting all query-formatting functions}.\r\n     *\r\n     * Available as `pgp.as`, before and after initializing the library.\r\n     *\r\n     * @see {@link formatting}.\r\n     */ as: npm.formatting.as,\n    /**\r\n     * @member {external:pg-minify} minify\r\n     * @readonly\r\n     * @description\r\n     * Instance of the $[pg-minify] library used internally to minify SQL scripts.\r\n     *\r\n     * Available as `pgp.minify`, before and after initializing the library.\r\n     */ minify: npm.minify,\n    /**\r\n     * @member {queryResult} queryResult\r\n     * @readonly\r\n     * @description\r\n     * Query Result Mask enumerator.\r\n     *\r\n     * Available as `pgp.queryResult`, before and after initializing the library.\r\n     */ queryResult,\n    /**\r\n     * @member {PromiseAdapter} PromiseAdapter\r\n     * @readonly\r\n     * @description\r\n     * {@link PromiseAdapter} class.\r\n     *\r\n     * Available as `pgp.PromiseAdapter`, before and after initializing the library.\r\n     */ PromiseAdapter,\n    /**\r\n     * @member {ParameterizedQuery} ParameterizedQuery\r\n     * @readonly\r\n     * @description\r\n     * {@link ParameterizedQuery} class.\r\n     *\r\n     * Available as `pgp.ParameterizedQuery`, before and after initializing the library.\r\n     */ ParameterizedQuery,\n    /**\r\n     * @member {PreparedStatement} PreparedStatement\r\n     * @readonly\r\n     * @description\r\n     * {@link PreparedStatement} class.\r\n     *\r\n     * Available as `pgp.PreparedStatement`, before and after initializing the library.\r\n     */ PreparedStatement,\n    /**\r\n     * @member {QueryFile} QueryFile\r\n     * @readonly\r\n     * @description\r\n     * {@link QueryFile} class.\r\n     *\r\n     * Available as `pgp.QueryFile`, before and after initializing the library.\r\n     */ QueryFile,\n    /**\r\n     * @member {errors} errors\r\n     * @readonly\r\n     * @description\r\n     * {@link errors} - namespace for all error types.\r\n     *\r\n     * Available as `pgp.errors`, before and after initializing the library.\r\n     */ errors: npm.errors,\n    /**\r\n     * @member {utils} utils\r\n     * @readonly\r\n     * @description\r\n     * {@link utils} - namespace for utility functions.\r\n     *\r\n     * Available as `pgp.utils`, before and after initializing the library.\r\n     */ utils: npm.pubUtils,\n    /**\r\n     * @member {txMode} txMode\r\n     * @readonly\r\n     * @description\r\n     * {@link txMode Transaction Mode} namespace.\r\n     *\r\n     * Available as `pgp.txMode`, before and after initializing the library.\r\n     */ txMode: npm.mode\n};\nnpm.utils.addReadProperties($main, rootNameSpace);\nmodule.exports = $main; /**\r\n * @external Promise\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n */  /**\r\n * @external PG\r\n * @see https://node-postgres.com\r\n */  /**\r\n * @external Client\r\n * @see https://node-postgres.com/api/client\r\n */  /**\r\n * @external pg-minify\r\n * @see https://github.com/vitaly-t/pg-minify\r\n */  /**\r\n * @external spex\r\n * @see https://github.com/vitaly-t/spex\r\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/main.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/patterns.js":
/*!*************************************************!*\
  !*** ./node_modules/pg-promise/lib/patterns.js ***!
  \*************************************************/
/***/ ((module) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ /*\r\n  The most important regular expressions and data as used by the library,\r\n  isolated here to help with possible edge cases during integration.\r\n*/ \nmodule.exports = {\n    // Searches for all Named Parameters, supporting any of the following syntax:\n    // ${propName}, $(propName), $[propName], $/propName/, $<propName>\n    // Nested property names are also supported: ${propName.abc}\n    namedParameters: /\\$(?:({)|(\\()|(<)|(\\[)|(\\/))\\s*[a-zA-Z0-9$_.]+(\\^|~|#|:raw|:alias|:name|:json|:csv|:list|:value)?\\s*(?:(?=\\2)(?=\\3)(?=\\4)(?=\\5)}|(?=\\1)(?=\\3)(?=\\4)(?=\\5)\\)|(?=\\1)(?=\\2)(?=\\4)(?=\\5)>|(?=\\1)(?=\\2)(?=\\3)(?=\\5)]|(?=\\1)(?=\\2)(?=\\3)(?=\\4)\\/)/g,\n    // Searches for all variables $1, $2, ...$100000, and while it will find greater than $100000\n    // variables, the formatting engine is expected to throw an error for those.\n    multipleValues: /\\$([1-9][0-9]{0,16}(?![0-9])(\\^|~|#|:raw|:alias|:name|:json|:csv|:list|:value)?)/g,\n    // Searches for all occurrences of variable $1\n    singleValue: /\\$1(?![0-9])(\\^|~|#|:raw|:alias|:name|:json|:csv|:list|:value)?/g,\n    // Matches a valid column name for the Column type parser, according to the following rules:\n    // - can contain: any combination of a-z, A-Z, 0-9, $ or _\n    // - can contain ? at the start\n    // - can contain one of the supported filters/modifiers\n    validColumn: /\\??[a-zA-Z0-9$_]+(\\^|~|#|:raw|:alias|:name|:json|:csv|:list|:value)?/,\n    // Matches a valid open-name JavaScript variable, according to the following rules:\n    // - can contain: any combination of a-z, A-Z, 0-9, $ or _\n    validVariable: /[a-zA-Z0-9$_]+/,\n    // Matches a valid modifier in a column/property:\n    hasValidModifier: /\\^|~|#|:raw|:alias|:name|:json|:csv|:list|:value/,\n    // List of all supported formatting modifiers:\n    validModifiers: [\n        \"^\",\n        \"~\",\n        \"#\",\n        \":raw\",\n        \":alias\",\n        \":name\",\n        \":json\",\n        \":csv\",\n        \":list\",\n        \":value\"\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvcGF0dGVybnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Q0FPQyxHQUVEOzs7QUFHQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUc7SUFDYiw2RUFBNkU7SUFDN0Usa0VBQWtFO0lBQ2xFLDREQUE0RDtJQUM1REMsaUJBQWlCO0lBRWpCLDZGQUE2RjtJQUM3Riw0RUFBNEU7SUFDNUVDLGdCQUFnQjtJQUVoQiw4Q0FBOEM7SUFDOUNDLGFBQWE7SUFFYiw0RkFBNEY7SUFDNUYsMERBQTBEO0lBQzFELCtCQUErQjtJQUMvQix1REFBdUQ7SUFDdkRDLGFBQWE7SUFFYixtRkFBbUY7SUFDbkYsMERBQTBEO0lBQzFEQyxlQUFlO0lBRWYsaURBQWlEO0lBQ2pEQyxrQkFBa0I7SUFFbEIsOENBQThDO0lBQzlDQyxnQkFBZ0I7UUFBQztRQUFLO1FBQUs7UUFBSztRQUFRO1FBQVU7UUFBUztRQUFTO1FBQVE7UUFBUztLQUFTO0FBQ2xHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHRtbC1jb252ZXJ0ZXIvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvcGF0dGVybnMuanM/NDc3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgVml0YWx5IFRvbWlsb3ZcclxuICpcclxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHRvcC1sZXZlbCBkaXJlY3Rvcnkgb2YgdGhpcyBkaXN0cmlidXRpb25cclxuICogZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbi5cclxuICpcclxuICogUmVtb3ZhbCBvciBtb2RpZmljYXRpb24gb2YgdGhpcyBjb3B5cmlnaHQgbm90aWNlIGlzIHByb2hpYml0ZWQuXHJcbiAqL1xyXG5cclxuLypcclxuICBUaGUgbW9zdCBpbXBvcnRhbnQgcmVndWxhciBleHByZXNzaW9ucyBhbmQgZGF0YSBhcyB1c2VkIGJ5IHRoZSBsaWJyYXJ5LFxyXG4gIGlzb2xhdGVkIGhlcmUgdG8gaGVscCB3aXRoIHBvc3NpYmxlIGVkZ2UgY2FzZXMgZHVyaW5nIGludGVncmF0aW9uLlxyXG4qL1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICAvLyBTZWFyY2hlcyBmb3IgYWxsIE5hbWVkIFBhcmFtZXRlcnMsIHN1cHBvcnRpbmcgYW55IG9mIHRoZSBmb2xsb3dpbmcgc3ludGF4OlxyXG4gICAgLy8gJHtwcm9wTmFtZX0sICQocHJvcE5hbWUpLCAkW3Byb3BOYW1lXSwgJC9wcm9wTmFtZS8sICQ8cHJvcE5hbWU+XHJcbiAgICAvLyBOZXN0ZWQgcHJvcGVydHkgbmFtZXMgYXJlIGFsc28gc3VwcG9ydGVkOiAke3Byb3BOYW1lLmFiY31cclxuICAgIG5hbWVkUGFyYW1ldGVyczogL1xcJCg/Oih7KXwoXFwoKXwoPCl8KFxcWyl8KFxcLykpXFxzKlthLXpBLVowLTkkXy5dKyhcXF58fnwjfDpyYXd8OmFsaWFzfDpuYW1lfDpqc29ufDpjc3Z8Omxpc3R8OnZhbHVlKT9cXHMqKD86KD89XFwyKSg/PVxcMykoPz1cXDQpKD89XFw1KX18KD89XFwxKSg/PVxcMykoPz1cXDQpKD89XFw1KVxcKXwoPz1cXDEpKD89XFwyKSg/PVxcNCkoPz1cXDUpPnwoPz1cXDEpKD89XFwyKSg/PVxcMykoPz1cXDUpXXwoPz1cXDEpKD89XFwyKSg/PVxcMykoPz1cXDQpXFwvKS9nLFxyXG5cclxuICAgIC8vIFNlYXJjaGVzIGZvciBhbGwgdmFyaWFibGVzICQxLCAkMiwgLi4uJDEwMDAwMCwgYW5kIHdoaWxlIGl0IHdpbGwgZmluZCBncmVhdGVyIHRoYW4gJDEwMDAwMFxyXG4gICAgLy8gdmFyaWFibGVzLCB0aGUgZm9ybWF0dGluZyBlbmdpbmUgaXMgZXhwZWN0ZWQgdG8gdGhyb3cgYW4gZXJyb3IgZm9yIHRob3NlLlxyXG4gICAgbXVsdGlwbGVWYWx1ZXM6IC9cXCQoWzEtOV1bMC05XXswLDE2fSg/IVswLTldKShcXF58fnwjfDpyYXd8OmFsaWFzfDpuYW1lfDpqc29ufDpjc3Z8Omxpc3R8OnZhbHVlKT8pL2csXHJcblxyXG4gICAgLy8gU2VhcmNoZXMgZm9yIGFsbCBvY2N1cnJlbmNlcyBvZiB2YXJpYWJsZSAkMVxyXG4gICAgc2luZ2xlVmFsdWU6IC9cXCQxKD8hWzAtOV0pKFxcXnx+fCN8OnJhd3w6YWxpYXN8Om5hbWV8Ompzb258OmNzdnw6bGlzdHw6dmFsdWUpPy9nLFxyXG5cclxuICAgIC8vIE1hdGNoZXMgYSB2YWxpZCBjb2x1bW4gbmFtZSBmb3IgdGhlIENvbHVtbiB0eXBlIHBhcnNlciwgYWNjb3JkaW5nIHRvIHRoZSBmb2xsb3dpbmcgcnVsZXM6XHJcbiAgICAvLyAtIGNhbiBjb250YWluOiBhbnkgY29tYmluYXRpb24gb2YgYS16LCBBLVosIDAtOSwgJCBvciBfXHJcbiAgICAvLyAtIGNhbiBjb250YWluID8gYXQgdGhlIHN0YXJ0XHJcbiAgICAvLyAtIGNhbiBjb250YWluIG9uZSBvZiB0aGUgc3VwcG9ydGVkIGZpbHRlcnMvbW9kaWZpZXJzXHJcbiAgICB2YWxpZENvbHVtbjogL1xcPz9bYS16QS1aMC05JF9dKyhcXF58fnwjfDpyYXd8OmFsaWFzfDpuYW1lfDpqc29ufDpjc3Z8Omxpc3R8OnZhbHVlKT8vLFxyXG5cclxuICAgIC8vIE1hdGNoZXMgYSB2YWxpZCBvcGVuLW5hbWUgSmF2YVNjcmlwdCB2YXJpYWJsZSwgYWNjb3JkaW5nIHRvIHRoZSBmb2xsb3dpbmcgcnVsZXM6XHJcbiAgICAvLyAtIGNhbiBjb250YWluOiBhbnkgY29tYmluYXRpb24gb2YgYS16LCBBLVosIDAtOSwgJCBvciBfXHJcbiAgICB2YWxpZFZhcmlhYmxlOiAvW2EtekEtWjAtOSRfXSsvLFxyXG5cclxuICAgIC8vIE1hdGNoZXMgYSB2YWxpZCBtb2RpZmllciBpbiBhIGNvbHVtbi9wcm9wZXJ0eTpcclxuICAgIGhhc1ZhbGlkTW9kaWZpZXI6IC9cXF58fnwjfDpyYXd8OmFsaWFzfDpuYW1lfDpqc29ufDpjc3Z8Omxpc3R8OnZhbHVlLyxcclxuXHJcbiAgICAvLyBMaXN0IG9mIGFsbCBzdXBwb3J0ZWQgZm9ybWF0dGluZyBtb2RpZmllcnM6XHJcbiAgICB2YWxpZE1vZGlmaWVyczogWydeJywgJ34nLCAnIycsICc6cmF3JywgJzphbGlhcycsICc6bmFtZScsICc6anNvbicsICc6Y3N2JywgJzpsaXN0JywgJzp2YWx1ZSddXHJcbn07XHJcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibmFtZWRQYXJhbWV0ZXJzIiwibXVsdGlwbGVWYWx1ZXMiLCJzaW5nbGVWYWx1ZSIsInZhbGlkQ29sdW1uIiwidmFsaWRWYXJpYWJsZSIsImhhc1ZhbGlkTW9kaWZpZXIiLCJ2YWxpZE1vZGlmaWVycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/patterns.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/promise-adapter.js":
/*!********************************************************!*\
  !*** ./node_modules/pg-promise/lib/promise-adapter.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { assert } = __webpack_require__(/*! ./assert */ \"(rsc)/./node_modules/pg-promise/lib/assert.js\");\n/**\r\n * @class PromiseAdapter\r\n * @summary Adapter for the primary promise operations.\r\n * @description\r\n * Provides compatibility with promise libraries that cannot be recognized automatically,\r\n * via functions that implement the primary operations with promises:\r\n *\r\n *  - construct a new promise with a callback function\r\n *  - resolve a promise with some result data\r\n *  - reject a promise with a reason\r\n *  - resolve an array of promises\r\n *\r\n * The type is available from the library's root: `pgp.PromiseAdapter`.\r\n *\r\n * @param {object} api\r\n * Promise API configuration object.\r\n *\r\n * Passing in anything other than an object will throw {@link external:TypeError TypeError} = `Adapter requires an api configuration object.`\r\n *\r\n * @param {function} api.create\r\n * A function that takes a callback parameter and returns a new promise object.\r\n * The callback parameter is expected to be `function(resolve, reject)`.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'create' must be specified.`\r\n *\r\n * @param {function} api.resolve\r\n * A function that takes an optional data parameter and resolves a promise with it.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'resolve' must be specified.`\r\n *\r\n * @param {function} api.reject\r\n * A function that takes an optional error parameter and rejects a promise with it.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'reject' must be specified.`\r\n *\r\n * @param {function} api.all\r\n * A function that resolves an array of promises.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'all' must be specified.`\r\n *\r\n * @returns {PromiseAdapter}\r\n */ class PromiseAdapter {\n    constructor(api){\n        if (!api || typeof api !== \"object\") {\n            throw new TypeError(\"Adapter requires an api configuration object.\");\n        }\n        api = assert(api, [\n            \"create\",\n            \"resolve\",\n            \"reject\",\n            \"all\"\n        ]);\n        this.create = api.create;\n        this.resolve = api.resolve;\n        this.reject = api.reject;\n        this.all = api.all;\n        if (typeof this.create !== \"function\") {\n            throw new TypeError(\"Function 'create' must be specified.\");\n        }\n        if (typeof this.resolve !== \"function\") {\n            throw new TypeError(\"Function 'resolve' must be specified.\");\n        }\n        if (typeof this.reject !== \"function\") {\n            throw new TypeError(\"Function 'reject' must be specified.\");\n        }\n        if (typeof this.all !== \"function\") {\n            throw new TypeError(\"Function 'all' must be specified.\");\n        }\n    }\n}\nmodule.exports = {\n    PromiseAdapter\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvcHJvbWlzZS1hZGFwdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0NBT0M7QUFFRCxNQUFNLEVBQUNBLE1BQU0sRUFBQyxHQUFHQyxtQkFBT0EsQ0FBQztBQUV6Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0F5Q0MsR0FDRCxNQUFNQztJQUNGQyxZQUFZQyxHQUFHLENBQUU7UUFFYixJQUFJLENBQUNBLE9BQU8sT0FBT0EsUUFBUSxVQUFVO1lBQ2pDLE1BQU0sSUFBSUMsVUFBVTtRQUN4QjtRQUVBRCxNQUFNSixPQUFPSSxLQUFLO1lBQUM7WUFBVTtZQUFXO1lBQVU7U0FBTTtRQUV4RCxJQUFJLENBQUNFLE1BQU0sR0FBR0YsSUFBSUUsTUFBTTtRQUN4QixJQUFJLENBQUNDLE9BQU8sR0FBR0gsSUFBSUcsT0FBTztRQUMxQixJQUFJLENBQUNDLE1BQU0sR0FBR0osSUFBSUksTUFBTTtRQUN4QixJQUFJLENBQUNDLEdBQUcsR0FBR0wsSUFBSUssR0FBRztRQUVsQixJQUFJLE9BQU8sSUFBSSxDQUFDSCxNQUFNLEtBQUssWUFBWTtZQUNuQyxNQUFNLElBQUlELFVBQVU7UUFDeEI7UUFFQSxJQUFJLE9BQU8sSUFBSSxDQUFDRSxPQUFPLEtBQUssWUFBWTtZQUNwQyxNQUFNLElBQUlGLFVBQVU7UUFDeEI7UUFFQSxJQUFJLE9BQU8sSUFBSSxDQUFDRyxNQUFNLEtBQUssWUFBWTtZQUNuQyxNQUFNLElBQUlILFVBQVU7UUFDeEI7UUFFQSxJQUFJLE9BQU8sSUFBSSxDQUFDSSxHQUFHLEtBQUssWUFBWTtZQUNoQyxNQUFNLElBQUlKLFVBQVU7UUFDeEI7SUFDSjtBQUNKO0FBRUFLLE9BQU9DLE9BQU8sR0FBRztJQUFDVDtBQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHRtbC1jb252ZXJ0ZXIvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvcHJvbWlzZS1hZGFwdGVyLmpzPzAwODgiXSwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIFZpdGFseSBUb21pbG92XHJcbiAqXHJcbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGF0IHRoZSB0b3AtbGV2ZWwgZGlyZWN0b3J5IG9mIHRoaXMgZGlzdHJpYnV0aW9uXHJcbiAqIGZvciBsaWNlbnNpbmcgaW5mb3JtYXRpb24uXHJcbiAqXHJcbiAqIFJlbW92YWwgb3IgbW9kaWZpY2F0aW9uIG9mIHRoaXMgY29weXJpZ2h0IG5vdGljZSBpcyBwcm9oaWJpdGVkLlxyXG4gKi9cclxuXHJcbmNvbnN0IHthc3NlcnR9ID0gcmVxdWlyZSgnLi9hc3NlcnQnKTtcclxuXHJcbi8qKlxyXG4gKiBAY2xhc3MgUHJvbWlzZUFkYXB0ZXJcclxuICogQHN1bW1hcnkgQWRhcHRlciBmb3IgdGhlIHByaW1hcnkgcHJvbWlzZSBvcGVyYXRpb25zLlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogUHJvdmlkZXMgY29tcGF0aWJpbGl0eSB3aXRoIHByb21pc2UgbGlicmFyaWVzIHRoYXQgY2Fubm90IGJlIHJlY29nbml6ZWQgYXV0b21hdGljYWxseSxcclxuICogdmlhIGZ1bmN0aW9ucyB0aGF0IGltcGxlbWVudCB0aGUgcHJpbWFyeSBvcGVyYXRpb25zIHdpdGggcHJvbWlzZXM6XHJcbiAqXHJcbiAqICAtIGNvbnN0cnVjdCBhIG5ldyBwcm9taXNlIHdpdGggYSBjYWxsYmFjayBmdW5jdGlvblxyXG4gKiAgLSByZXNvbHZlIGEgcHJvbWlzZSB3aXRoIHNvbWUgcmVzdWx0IGRhdGFcclxuICogIC0gcmVqZWN0IGEgcHJvbWlzZSB3aXRoIGEgcmVhc29uXHJcbiAqICAtIHJlc29sdmUgYW4gYXJyYXkgb2YgcHJvbWlzZXNcclxuICpcclxuICogVGhlIHR5cGUgaXMgYXZhaWxhYmxlIGZyb20gdGhlIGxpYnJhcnkncyByb290OiBgcGdwLlByb21pc2VBZGFwdGVyYC5cclxuICpcclxuICogQHBhcmFtIHtvYmplY3R9IGFwaVxyXG4gKiBQcm9taXNlIEFQSSBjb25maWd1cmF0aW9uIG9iamVjdC5cclxuICpcclxuICogUGFzc2luZyBpbiBhbnl0aGluZyBvdGhlciB0aGFuIGFuIG9iamVjdCB3aWxsIHRocm93IHtAbGluayBleHRlcm5hbDpUeXBlRXJyb3IgVHlwZUVycm9yfSA9IGBBZGFwdGVyIHJlcXVpcmVzIGFuIGFwaSBjb25maWd1cmF0aW9uIG9iamVjdC5gXHJcbiAqXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGFwaS5jcmVhdGVcclxuICogQSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgY2FsbGJhY2sgcGFyYW1ldGVyIGFuZCByZXR1cm5zIGEgbmV3IHByb21pc2Ugb2JqZWN0LlxyXG4gKiBUaGUgY2FsbGJhY2sgcGFyYW1ldGVyIGlzIGV4cGVjdGVkIHRvIGJlIGBmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpYC5cclxuICpcclxuICogUGFzc2luZyBpbiBhbnl0aGluZyBvdGhlciB0aGFuIGEgZnVuY3Rpb24gd2lsbCB0aHJvdyB7QGxpbmsgZXh0ZXJuYWw6VHlwZUVycm9yIFR5cGVFcnJvcn0gPSBgRnVuY3Rpb24gJ2NyZWF0ZScgbXVzdCBiZSBzcGVjaWZpZWQuYFxyXG4gKlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBhcGkucmVzb2x2ZVxyXG4gKiBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYW4gb3B0aW9uYWwgZGF0YSBwYXJhbWV0ZXIgYW5kIHJlc29sdmVzIGEgcHJvbWlzZSB3aXRoIGl0LlxyXG4gKlxyXG4gKiBQYXNzaW5nIGluIGFueXRoaW5nIG90aGVyIHRoYW4gYSBmdW5jdGlvbiB3aWxsIHRocm93IHtAbGluayBleHRlcm5hbDpUeXBlRXJyb3IgVHlwZUVycm9yfSA9IGBGdW5jdGlvbiAncmVzb2x2ZScgbXVzdCBiZSBzcGVjaWZpZWQuYFxyXG4gKlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBhcGkucmVqZWN0XHJcbiAqIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhbiBvcHRpb25hbCBlcnJvciBwYXJhbWV0ZXIgYW5kIHJlamVjdHMgYSBwcm9taXNlIHdpdGggaXQuXHJcbiAqXHJcbiAqIFBhc3NpbmcgaW4gYW55dGhpbmcgb3RoZXIgdGhhbiBhIGZ1bmN0aW9uIHdpbGwgdGhyb3cge0BsaW5rIGV4dGVybmFsOlR5cGVFcnJvciBUeXBlRXJyb3J9ID0gYEZ1bmN0aW9uICdyZWplY3QnIG11c3QgYmUgc3BlY2lmaWVkLmBcclxuICpcclxuICogQHBhcmFtIHtmdW5jdGlvbn0gYXBpLmFsbFxyXG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgYW4gYXJyYXkgb2YgcHJvbWlzZXMuXHJcbiAqXHJcbiAqIFBhc3NpbmcgaW4gYW55dGhpbmcgb3RoZXIgdGhhbiBhIGZ1bmN0aW9uIHdpbGwgdGhyb3cge0BsaW5rIGV4dGVybmFsOlR5cGVFcnJvciBUeXBlRXJyb3J9ID0gYEZ1bmN0aW9uICdhbGwnIG11c3QgYmUgc3BlY2lmaWVkLmBcclxuICpcclxuICogQHJldHVybnMge1Byb21pc2VBZGFwdGVyfVxyXG4gKi9cclxuY2xhc3MgUHJvbWlzZUFkYXB0ZXIge1xyXG4gICAgY29uc3RydWN0b3IoYXBpKSB7XHJcblxyXG4gICAgICAgIGlmICghYXBpIHx8IHR5cGVvZiBhcGkgIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FkYXB0ZXIgcmVxdWlyZXMgYW4gYXBpIGNvbmZpZ3VyYXRpb24gb2JqZWN0LicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXBpID0gYXNzZXJ0KGFwaSwgWydjcmVhdGUnLCAncmVzb2x2ZScsICdyZWplY3QnLCAnYWxsJ10pO1xyXG5cclxuICAgICAgICB0aGlzLmNyZWF0ZSA9IGFwaS5jcmVhdGU7XHJcbiAgICAgICAgdGhpcy5yZXNvbHZlID0gYXBpLnJlc29sdmU7XHJcbiAgICAgICAgdGhpcy5yZWplY3QgPSBhcGkucmVqZWN0O1xyXG4gICAgICAgIHRoaXMuYWxsID0gYXBpLmFsbDtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNyZWF0ZSAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbiBcXCdjcmVhdGVcXCcgbXVzdCBiZSBzcGVjaWZpZWQuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMucmVzb2x2ZSAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbiBcXCdyZXNvbHZlXFwnIG11c3QgYmUgc3BlY2lmaWVkLicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnJlamVjdCAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbiBcXCdyZWplY3RcXCcgbXVzdCBiZSBzcGVjaWZpZWQuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuYWxsICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uIFxcJ2FsbFxcJyBtdXN0IGJlIHNwZWNpZmllZC4nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1Byb21pc2VBZGFwdGVyfTtcclxuIl0sIm5hbWVzIjpbImFzc2VydCIsInJlcXVpcmUiLCJQcm9taXNlQWRhcHRlciIsImNvbnN0cnVjdG9yIiwiYXBpIiwiVHlwZUVycm9yIiwiY3JlYXRlIiwicmVzb2x2ZSIsInJlamVjdCIsImFsbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/promise-adapter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/promise-parser.js":
/*!*******************************************************!*\
  !*** ./node_modules/pg-promise/lib/promise-parser.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { PromiseAdapter } = __webpack_require__(/*! ./promise-adapter */ \"(rsc)/./node_modules/pg-promise/lib/promise-adapter.js\");\n//////////////////////////////////////////\n// Parses and validates a promise library;\nfunction parse(pl) {\n    let promise;\n    if (pl instanceof PromiseAdapter) {\n        promise = function(func) {\n            return pl.create(func);\n        };\n        promise.resolve = pl.resolve;\n        promise.reject = pl.reject;\n        promise.all = pl.all;\n        return promise;\n    }\n    const t = typeof pl;\n    if (t === \"function\" || t === \"object\") {\n        const Root = typeof pl.Promise === \"function\" ? pl.Promise : pl;\n        promise = function(func) {\n            return new Root(func);\n        };\n        promise.resolve = Root.resolve;\n        promise.reject = Root.reject;\n        promise.all = Root.all;\n        if (typeof promise.resolve === \"function\" && typeof promise.reject === \"function\" && typeof promise.all === \"function\") {\n            return promise;\n        }\n    }\n    throw new TypeError(\"Invalid promise library specified.\");\n}\nfunction parsePromise(promiseLib) {\n    const result = {\n        promiseLib\n    };\n    if (promiseLib) {\n        result.promise = parse(promiseLib);\n    } else {\n        result.promise = parse(Promise);\n        result.promiseLib = Promise;\n    }\n    return result;\n}\nmodule.exports = {\n    parsePromise\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvcHJvbWlzZS1wYXJzZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Q0FPQztBQUVELE1BQU0sRUFBQ0EsY0FBYyxFQUFDLEdBQUdDLG1CQUFPQSxDQUFDO0FBRWpDLDBDQUEwQztBQUMxQywwQ0FBMEM7QUFDMUMsU0FBU0MsTUFBTUMsRUFBRTtJQUViLElBQUlDO0lBQ0osSUFBSUQsY0FBY0gsZ0JBQWdCO1FBQzlCSSxVQUFVLFNBQVVDLElBQUk7WUFDcEIsT0FBT0YsR0FBR0csTUFBTSxDQUFDRDtRQUNyQjtRQUNBRCxRQUFRRyxPQUFPLEdBQUdKLEdBQUdJLE9BQU87UUFDNUJILFFBQVFJLE1BQU0sR0FBR0wsR0FBR0ssTUFBTTtRQUMxQkosUUFBUUssR0FBRyxHQUFHTixHQUFHTSxHQUFHO1FBQ3BCLE9BQU9MO0lBQ1g7SUFDQSxNQUFNTSxJQUFJLE9BQU9QO0lBQ2pCLElBQUlPLE1BQU0sY0FBY0EsTUFBTSxVQUFVO1FBQ3BDLE1BQU1DLE9BQU8sT0FBT1IsR0FBR1MsT0FBTyxLQUFLLGFBQWFULEdBQUdTLE9BQU8sR0FBR1Q7UUFDN0RDLFVBQVUsU0FBVUMsSUFBSTtZQUNwQixPQUFPLElBQUlNLEtBQUtOO1FBQ3BCO1FBQ0FELFFBQVFHLE9BQU8sR0FBR0ksS0FBS0osT0FBTztRQUM5QkgsUUFBUUksTUFBTSxHQUFHRyxLQUFLSCxNQUFNO1FBQzVCSixRQUFRSyxHQUFHLEdBQUdFLEtBQUtGLEdBQUc7UUFDdEIsSUFBSSxPQUFPTCxRQUFRRyxPQUFPLEtBQUssY0FDM0IsT0FBT0gsUUFBUUksTUFBTSxLQUFLLGNBQzFCLE9BQU9KLFFBQVFLLEdBQUcsS0FBSyxZQUFZO1lBQ25DLE9BQU9MO1FBQ1g7SUFDSjtJQUVBLE1BQU0sSUFBSVMsVUFBVTtBQUN4QjtBQUVBLFNBQVNDLGFBQWFDLFVBQVU7SUFDNUIsTUFBTUMsU0FBUztRQUFDRDtJQUFVO0lBQzFCLElBQUlBLFlBQVk7UUFDWkMsT0FBT1osT0FBTyxHQUFHRixNQUFNYTtJQUMzQixPQUFPO1FBQ0hDLE9BQU9aLE9BQU8sR0FBR0YsTUFBTVU7UUFDdkJJLE9BQU9ELFVBQVUsR0FBR0g7SUFDeEI7SUFDQSxPQUFPSTtBQUNYO0FBRUFDLE9BQU9DLE9BQU8sR0FBRztJQUFDSjtBQUFZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHRtbC1jb252ZXJ0ZXIvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvcHJvbWlzZS1wYXJzZXIuanM/MTAzMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgVml0YWx5IFRvbWlsb3ZcclxuICpcclxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHRvcC1sZXZlbCBkaXJlY3Rvcnkgb2YgdGhpcyBkaXN0cmlidXRpb25cclxuICogZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbi5cclxuICpcclxuICogUmVtb3ZhbCBvciBtb2RpZmljYXRpb24gb2YgdGhpcyBjb3B5cmlnaHQgbm90aWNlIGlzIHByb2hpYml0ZWQuXHJcbiAqL1xyXG5cclxuY29uc3Qge1Byb21pc2VBZGFwdGVyfSA9IHJlcXVpcmUoJy4vcHJvbWlzZS1hZGFwdGVyJyk7XHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy8gUGFyc2VzIGFuZCB2YWxpZGF0ZXMgYSBwcm9taXNlIGxpYnJhcnk7XHJcbmZ1bmN0aW9uIHBhcnNlKHBsKSB7XHJcblxyXG4gICAgbGV0IHByb21pc2U7XHJcbiAgICBpZiAocGwgaW5zdGFuY2VvZiBQcm9taXNlQWRhcHRlcikge1xyXG4gICAgICAgIHByb21pc2UgPSBmdW5jdGlvbiAoZnVuYykge1xyXG4gICAgICAgICAgICByZXR1cm4gcGwuY3JlYXRlKGZ1bmMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcHJvbWlzZS5yZXNvbHZlID0gcGwucmVzb2x2ZTtcclxuICAgICAgICBwcm9taXNlLnJlamVjdCA9IHBsLnJlamVjdDtcclxuICAgICAgICBwcm9taXNlLmFsbCA9IHBsLmFsbDtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgIH1cclxuICAgIGNvbnN0IHQgPSB0eXBlb2YgcGw7XHJcbiAgICBpZiAodCA9PT0gJ2Z1bmN0aW9uJyB8fCB0ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGNvbnN0IFJvb3QgPSB0eXBlb2YgcGwuUHJvbWlzZSA9PT0gJ2Z1bmN0aW9uJyA/IHBsLlByb21pc2UgOiBwbDtcclxuICAgICAgICBwcm9taXNlID0gZnVuY3Rpb24gKGZ1bmMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSb290KGZ1bmMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcHJvbWlzZS5yZXNvbHZlID0gUm9vdC5yZXNvbHZlO1xyXG4gICAgICAgIHByb21pc2UucmVqZWN0ID0gUm9vdC5yZWplY3Q7XHJcbiAgICAgICAgcHJvbWlzZS5hbGwgPSBSb290LmFsbDtcclxuICAgICAgICBpZiAodHlwZW9mIHByb21pc2UucmVzb2x2ZSA9PT0gJ2Z1bmN0aW9uJyAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgcHJvbWlzZS5yZWplY3QgPT09ICdmdW5jdGlvbicgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHByb21pc2UuYWxsID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHByb21pc2UgbGlicmFyeSBzcGVjaWZpZWQuJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlUHJvbWlzZShwcm9taXNlTGliKSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSB7cHJvbWlzZUxpYn07XHJcbiAgICBpZiAocHJvbWlzZUxpYikge1xyXG4gICAgICAgIHJlc3VsdC5wcm9taXNlID0gcGFyc2UocHJvbWlzZUxpYik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlc3VsdC5wcm9taXNlID0gcGFyc2UoUHJvbWlzZSk7XHJcbiAgICAgICAgcmVzdWx0LnByb21pc2VMaWIgPSBQcm9taXNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7cGFyc2VQcm9taXNlfTtcclxuIl0sIm5hbWVzIjpbIlByb21pc2VBZGFwdGVyIiwicmVxdWlyZSIsInBhcnNlIiwicGwiLCJwcm9taXNlIiwiZnVuYyIsImNyZWF0ZSIsInJlc29sdmUiLCJyZWplY3QiLCJhbGwiLCJ0IiwiUm9vdCIsIlByb21pc2UiLCJUeXBlRXJyb3IiLCJwYXJzZVByb21pc2UiLCJwcm9taXNlTGliIiwicmVzdWx0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/promise-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/query-file.js":
/*!***************************************************!*\
  !*** ./node_modules/pg-promise/lib/query-file.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { InnerState } = __webpack_require__(/*! ./inner-state */ \"(rsc)/./node_modules/pg-promise/lib/inner-state.js\");\nconst { QueryFileError } = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/pg-promise/lib/errors/index.js\");\nconst { assert } = __webpack_require__(/*! ./assert */ \"(rsc)/./node_modules/pg-promise/lib/assert.js\");\nconst { ColorConsole } = __webpack_require__(/*! ./utils/color */ \"(rsc)/./node_modules/pg-promise/lib/utils/color.js\");\nconst npm = {\n    fs: __webpack_require__(/*! fs */ \"fs\"),\n    os: __webpack_require__(/*! os */ \"os\"),\n    path: __webpack_require__(/*! path */ \"path\"),\n    minify: __webpack_require__(/*! pg-minify */ \"(rsc)/./node_modules/pg-minify/lib/index.js\"),\n    utils: __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\"),\n    formatting: __webpack_require__(/*! ./formatting */ \"(rsc)/./node_modules/pg-promise/lib/formatting.js\")\n};\nconst file$query = Symbol(\"QueryFile.query\");\n/**\r\n * @class QueryFile\r\n * @description\r\n *\r\n * Represents an external SQL file. The type is available from the library's root: `pgp.QueryFile`.\r\n *\r\n * Reads a file with SQL and prepares it for execution, also parses and minifies it, if required.\r\n * The SQL can be of any complexity, with both single and multi-line comments.\r\n *\r\n * The type can be used in place of the `query` parameter, with any query method directly, plus as `text` in {@link PreparedStatement}\r\n * and {@link ParameterizedQuery}.\r\n *\r\n * It never throws any error, leaving it for query methods to reject with {@link errors.QueryFileError QueryFileError}.\r\n *\r\n * **IMPORTANT:** You should only create a single reusable object per file, in order to avoid repeated file reads,\r\n * as the IO is a very expensive resource. If you do not follow it, you will be seeing the following warning:\r\n * `Creating a duplicate QueryFile object for the same file`, which signals a bad-use pattern.\r\n *\r\n * @param {string} file\r\n * Path to the SQL file with the query, either absolute or relative to the application's entry point file.\r\n *\r\n * If there is any problem reading the file, it will be reported when executing the query.\r\n *\r\n * @param {QueryFile.Options} [options]\r\n * Set of configuration options, as documented by {@link QueryFile.Options}.\r\n *\r\n * @returns {QueryFile}\r\n *\r\n * @see\r\n * {@link errors.QueryFileError QueryFileError},\r\n * {@link QueryFile#toPostgres toPostgres}\r\n *\r\n * @example\r\n * // File sql.js\r\n *\r\n * // Proper way to organize an sql provider:\r\n * //\r\n * // - have all sql files for Users in ./sql/users\r\n * // - have all sql files for Products in ./sql/products\r\n * // - have your sql provider module as ./sql/index.js\r\n *\r\n * const {QueryFile} = require('pg-promise');\r\n * const {join: joinPath} = require('path');\r\n *\r\n * // Helper for linking to external query files:\r\n * function sql(file) {\r\n *     const fullPath = joinPath(__dirname, file); // generating full path;\r\n *     return new QueryFile(fullPath, {minify: true});\r\n * }\r\n *\r\n * module.exports = {\r\n *     // external queries for Users:\r\n *     users: {\r\n *         add: sql('users/create.sql'),\r\n *         search: sql('users/search.sql'),\r\n *         report: sql('users/report.sql'),\r\n *     },\r\n *     // external queries for Products:\r\n *     products: {\r\n *         add: sql('products/add.sql'),\r\n *         quote: sql('products/quote.sql'),\r\n *         search: sql('products/search.sql'),\r\n *     }\r\n * };\r\n *\r\n * @example\r\n * // Testing our SQL provider\r\n *\r\n * const db = require('./db'); // our database module;\r\n * const {users: sql} = require('./sql'); // sql for users;\r\n *\r\n * module.exports = {\r\n *     addUser: (name, age) => db.none(sql.add, [name, age]),\r\n *     findUser: name => db.any(sql.search, name)\r\n * };\r\n *\r\n */ class QueryFile extends InnerState {\n    constructor(file, options){\n        let filePath = file;\n        options = assert(options, {\n            debug: npm.utils.isDev(),\n            minify: options && options.compress && options.minify === undefined ? true : undefined,\n            compress: undefined,\n            params: undefined,\n            noWarnings: undefined\n        });\n        if (npm.utils.isText(filePath) && !npm.path.isAbsolute(filePath)) {\n            filePath = npm.path.join(npm.utils.startDir, filePath);\n        }\n        const { usedPath } = QueryFile.instance;\n        // istanbul ignore next:\n        if (!options.noWarnings) {\n            if (filePath in usedPath) {\n                usedPath[filePath]++;\n                ColorConsole.warn(`WARNING: Creating a duplicate QueryFile object for the same file - \\n    ${filePath}\\n${npm.utils.getLocalStack(2, 3)}\\n`);\n            } else {\n                usedPath[filePath] = 0;\n            }\n        }\n        const _inner = {\n            file,\n            filePath,\n            options,\n            sql: undefined,\n            error: undefined,\n            ready: undefined,\n            modTime: undefined\n        };\n        super(_inner);\n        this.prepare();\n    }\n    /**\r\n     * Global instance of the file-path repository.\r\n     *\r\n     * @return {{usedPath: {}}}\r\n     */ static get instance() {\n        const s = Symbol.for(\"pgPromiseQueryFile\");\n        let scope = global[s];\n        if (!scope) {\n            scope = {\n                usedPath: {} // used-path look-up dictionary\n            };\n            global[s] = scope;\n        }\n        return scope;\n    }\n    /**\r\n     * @name QueryFile#Symbol(QueryFile.$query)\r\n     * @type {string}\r\n     * @default undefined\r\n     * @readonly\r\n     * @private\r\n     * @summary Prepared query string.\r\n     * @description\r\n     * When property {@link QueryFile#error error} is set, the query is `undefined`.\r\n     *\r\n     * **IMPORTANT:** This property is for internal use by the library only, never use this\r\n     * property directly from your code.\r\n     */ get [file$query]() {\n        return this._inner.sql;\n    }\n    /**\r\n     * @name QueryFile#error\r\n     * @type {errors.QueryFileError}\r\n     * @default undefined\r\n     * @readonly\r\n     * @description\r\n     * When in an error state, it is set to a {@link errors.QueryFileError QueryFileError} object. Otherwise, it is `undefined`.\r\n     */ get error() {\n        return this._inner.error;\n    }\n    /**\r\n     * @name QueryFile#file\r\n     * @type {string}\r\n     * @readonly\r\n     * @description\r\n     * File name that was passed into the constructor.\r\n     *\r\n     * This property is primarily for internal use by the library.\r\n     */ get file() {\n        return this._inner.file;\n    }\n    /**\r\n     * @name QueryFile#options\r\n     * @type {QueryFile.Options}\r\n     * @readonly\r\n     * @description\r\n     * Set of options, as configured during the object's construction.\r\n     *\r\n     * This property is primarily for internal use by the library.\r\n     */ get options() {\n        return this._inner.options;\n    }\n    /**\r\n     * @summary Prepares the query for execution.\r\n     * @description\r\n     * If the query hasn't been prepared yet, it will read the file and process the content according\r\n     * to the parameters passed into the constructor.\r\n     *\r\n     * This method is primarily for internal use by the library.\r\n     *\r\n     * @param {boolean} [throwErrors=false]\r\n     * Throw any error encountered.\r\n     */ prepare(throwErrors) {\n        const i = this._inner, options = i.options;\n        let lastMod;\n        if (options.debug && i.ready) {\n            try {\n                lastMod = npm.fs.statSync(i.filePath).mtime.getTime();\n                // istanbul ignore if;\n                if (lastMod === i.modTime) {\n                    return;\n                }\n                i.ready = false;\n            } catch (e) {\n                i.sql = undefined;\n                i.ready = false;\n                i.error = e;\n                if (throwErrors) {\n                    throw i.error;\n                }\n                return;\n            }\n        }\n        if (i.ready) {\n            return;\n        }\n        try {\n            i.sql = npm.fs.readFileSync(i.filePath, \"utf8\");\n            i.modTime = lastMod || npm.fs.statSync(i.filePath).mtime.getTime();\n            if (options.minify && options.minify !== \"after\") {\n                i.sql = npm.minify(i.sql, {\n                    compress: options.compress\n                });\n            }\n            if (options.params !== undefined) {\n                i.sql = npm.formatting.as.format(i.sql, options.params, {\n                    partial: true\n                });\n            }\n            if (options.minify && options.minify === \"after\") {\n                i.sql = npm.minify(i.sql, {\n                    compress: options.compress\n                });\n            }\n            i.ready = true;\n            i.error = undefined;\n        } catch (e) {\n            i.sql = undefined;\n            i.error = new QueryFileError(e, this);\n            if (throwErrors) {\n                throw i.error;\n            }\n        }\n    }\n}\n// Hiding the query as a symbol within the type,\n// to make it even more difficult to misuse it:\nQueryFile.$query = file$query;\n/**\r\n * @method QueryFile#toPostgres\r\n * @description\r\n * $[Custom Type Formatting], based on $[Symbolic CTF], i.e. the actual method is available only via {@link external:Symbol Symbol}:\r\n *\r\n * ```js\r\n * const ctf = pgp.as.ctf; // Custom Type Formatting symbols namespace\r\n * const query = qf[ctf.toPostgres](); // qf = an object of type QueryFile\r\n * ```\r\n *\r\n * This is a raw formatting type (`rawType = true`), i.e. when used as a query-formatting parameter, type `QueryFile` injects SQL as raw text.\r\n *\r\n * If you need to support type `QueryFile` outside of query methods, this is the only safe way to get the most current SQL.\r\n * And you would want to use this method dynamically, as it reloads the SQL automatically, if option `debug` is set.\r\n * See {@link QueryFile.Options Options}.\r\n *\r\n * @param {QueryFile} [self]\r\n * Optional self-reference, for ES6 arrow functions.\r\n *\r\n * @returns {string}\r\n * SQL string from the file, according to the {@link QueryFile.Options options} specified.\r\n *\r\n */ QueryFile.prototype[npm.formatting.as.ctf.toPostgres] = function(self) {\n    self = this instanceof QueryFile && this || self;\n    self.prepare(true);\n    return self[QueryFile.$query];\n};\nQueryFile.prototype[npm.formatting.as.ctf.rawType] = true; // use as pre-formatted\n/**\r\n * @method QueryFile#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object's current state.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */ QueryFile.prototype.toString = function(level) {\n    level = level > 0 ? parseInt(level) : 0;\n    const gap = npm.utils.messageGap(level + 1);\n    const lines = [\n        \"QueryFile {\"\n    ];\n    this.prepare();\n    lines.push(gap + 'file: \"' + this.file + '\"');\n    lines.push(gap + \"options: \" + npm.utils.toJson(this.options));\n    if (this.error) {\n        lines.push(gap + \"error: \" + this.error.toString(level + 1));\n    } else {\n        lines.push(gap + 'query: \"' + this[QueryFile.$query] + '\"');\n    }\n    lines.push(npm.utils.messageGap(level) + \"}\");\n    return lines.join(npm.os.EOL);\n};\nnpm.utils.addInspection(QueryFile, function() {\n    return this.toString();\n});\nmodule.exports = {\n    QueryFile\n}; /**\r\n * @typedef QueryFile.Options\r\n * @description\r\n * A set of configuration options as passed into the {@link QueryFile} constructor.\r\n *\r\n * @property {boolean} debug\r\n * When in debug mode, the query file is checked for its last modification time on every query request,\r\n * so if it changes, the file is read afresh.\r\n *\r\n * The default for this property is `true` when `NODE_ENV` = `development`,\r\n * or `false` otherwise.\r\n *\r\n * @property {boolean|string} minify=false\r\n * Parses and minifies the SQL using $[pg-minify]:\r\n * - `false` - do not use $[pg-minify]\r\n * - `true` - use $[pg-minify] to parse and minify SQL\r\n * - `'after'` - use $[pg-minify] after applying static formatting parameters\r\n *   (option `params`), as opposed to before it (default)\r\n *\r\n * If option `compress` is set, then the default for `minify` is `true`.\r\n *\r\n * Failure to parse SQL will result in $[SQLParsingError].\r\n *\r\n * @property {boolean} compress=false\r\n * Sets option `compress` as supported by $[pg-minify], to uglify the SQL:\r\n * - `false` - no compression to be applied, keep minimum spaces for easier read\r\n * - `true` - remove all unnecessary spaces from SQL\r\n *\r\n * This option has no meaning, if `minify` is explicitly set to `false`. However, if `minify` is not\r\n * specified and `compress` is specified as `true`, then `minify` defaults to `true`.\r\n *\r\n * @property {array|object|value} params\r\n *\r\n * Static formatting parameters to be applied to the SQL, using the same method {@link formatting.format as.format},\r\n * but with option `partial` = `true`.\r\n *\r\n * Most of the time query formatting is fully dynamic, and applied just before executing the query.\r\n * In some cases though you may need to pre-format SQL with static values. Examples of it can be a\r\n * schema name, or a configurable table name.\r\n *\r\n * This option makes two-step SQL formatting easy: you can pre-format the SQL initially, and then\r\n * apply the second-step dynamic formatting when executing the query.\r\n *\r\n * @property {boolean} noWarnings=false\r\n * Suppresses all warnings produced by the class. It is not recommended for general use, only in specific tests\r\n * that may require it.\r\n *\r\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/query-file.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/query-result.js":
/*!*****************************************************!*\
  !*** ./node_modules/pg-promise/lib/query-result.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ /**\r\n * @enum {number}\r\n * @alias queryResult\r\n * @readonly\r\n * @description\r\n * **Query Result Mask**\r\n *\r\n * Binary mask that represents the number of rows expected from a query method,\r\n * used by generic {@link Database#query query} method, plus {@link Database#func func}.\r\n *\r\n * The mask is always the last optional parameter, which defaults to `queryResult.any`.\r\n *\r\n * Any combination of flags is supported, except for `one + many`.\r\n *\r\n * The type is available from the library's root: `pgp.queryResult`.\r\n *\r\n * @see {@link Database#query Database.query}, {@link Database#func Database.func}\r\n */ \nconst queryResult = {\n    /** Single row is expected, to be resolved as a single row-object. */ one: 1,\n    /** One or more rows expected, to be resolved as an array, with at least 1 row-object. */ many: 2,\n    /** Expecting no rows, to be resolved with `null`. */ none: 4,\n    /** `many|none` - any result is expected, to be resolved with an array of rows-objects. */ any: 6\n};\nmodule.exports = {\n    queryResult\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvcXVlcnktcmVzdWx0LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0NBT0MsR0FFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FpQkM7QUFDRCxNQUFNQSxjQUFjO0lBQ2hCLG1FQUFtRSxHQUNuRUMsS0FBSztJQUNMLHVGQUF1RixHQUN2RkMsTUFBTTtJQUNOLG1EQUFtRCxHQUNuREMsTUFBTTtJQUNOLHdGQUF3RixHQUN4RkMsS0FBSztBQUNUO0FBRUFDLE9BQU9DLE9BQU8sR0FBRztJQUFDTjtBQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHRtbC1jb252ZXJ0ZXIvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvcXVlcnktcmVzdWx0LmpzPzYwMWQiXSwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIFZpdGFseSBUb21pbG92XHJcbiAqXHJcbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGF0IHRoZSB0b3AtbGV2ZWwgZGlyZWN0b3J5IG9mIHRoaXMgZGlzdHJpYnV0aW9uXHJcbiAqIGZvciBsaWNlbnNpbmcgaW5mb3JtYXRpb24uXHJcbiAqXHJcbiAqIFJlbW92YWwgb3IgbW9kaWZpY2F0aW9uIG9mIHRoaXMgY29weXJpZ2h0IG5vdGljZSBpcyBwcm9oaWJpdGVkLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAZW51bSB7bnVtYmVyfVxyXG4gKiBAYWxpYXMgcXVlcnlSZXN1bHRcclxuICogQHJlYWRvbmx5XHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiAqKlF1ZXJ5IFJlc3VsdCBNYXNrKipcclxuICpcclxuICogQmluYXJ5IG1hc2sgdGhhdCByZXByZXNlbnRzIHRoZSBudW1iZXIgb2Ygcm93cyBleHBlY3RlZCBmcm9tIGEgcXVlcnkgbWV0aG9kLFxyXG4gKiB1c2VkIGJ5IGdlbmVyaWMge0BsaW5rIERhdGFiYXNlI3F1ZXJ5IHF1ZXJ5fSBtZXRob2QsIHBsdXMge0BsaW5rIERhdGFiYXNlI2Z1bmMgZnVuY30uXHJcbiAqXHJcbiAqIFRoZSBtYXNrIGlzIGFsd2F5cyB0aGUgbGFzdCBvcHRpb25hbCBwYXJhbWV0ZXIsIHdoaWNoIGRlZmF1bHRzIHRvIGBxdWVyeVJlc3VsdC5hbnlgLlxyXG4gKlxyXG4gKiBBbnkgY29tYmluYXRpb24gb2YgZmxhZ3MgaXMgc3VwcG9ydGVkLCBleGNlcHQgZm9yIGBvbmUgKyBtYW55YC5cclxuICpcclxuICogVGhlIHR5cGUgaXMgYXZhaWxhYmxlIGZyb20gdGhlIGxpYnJhcnkncyByb290OiBgcGdwLnF1ZXJ5UmVzdWx0YC5cclxuICpcclxuICogQHNlZSB7QGxpbmsgRGF0YWJhc2UjcXVlcnkgRGF0YWJhc2UucXVlcnl9LCB7QGxpbmsgRGF0YWJhc2UjZnVuYyBEYXRhYmFzZS5mdW5jfVxyXG4gKi9cclxuY29uc3QgcXVlcnlSZXN1bHQgPSB7XHJcbiAgICAvKiogU2luZ2xlIHJvdyBpcyBleHBlY3RlZCwgdG8gYmUgcmVzb2x2ZWQgYXMgYSBzaW5nbGUgcm93LW9iamVjdC4gKi9cclxuICAgIG9uZTogMSxcclxuICAgIC8qKiBPbmUgb3IgbW9yZSByb3dzIGV4cGVjdGVkLCB0byBiZSByZXNvbHZlZCBhcyBhbiBhcnJheSwgd2l0aCBhdCBsZWFzdCAxIHJvdy1vYmplY3QuICovXHJcbiAgICBtYW55OiAyLFxyXG4gICAgLyoqIEV4cGVjdGluZyBubyByb3dzLCB0byBiZSByZXNvbHZlZCB3aXRoIGBudWxsYC4gKi9cclxuICAgIG5vbmU6IDQsXHJcbiAgICAvKiogYG1hbnl8bm9uZWAgLSBhbnkgcmVzdWx0IGlzIGV4cGVjdGVkLCB0byBiZSByZXNvbHZlZCB3aXRoIGFuIGFycmF5IG9mIHJvd3Mtb2JqZWN0cy4gKi9cclxuICAgIGFueTogNlxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7cXVlcnlSZXN1bHR9O1xyXG4iXSwibmFtZXMiOlsicXVlcnlSZXN1bHQiLCJvbmUiLCJtYW55Iiwibm9uZSIsImFueSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/query-result.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/query.js":
/*!**********************************************!*\
  !*** ./node_modules/pg-promise/lib/query.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { Events } = __webpack_require__(/*! ./events */ \"(rsc)/./node_modules/pg-promise/lib/events.js\");\nconst { QueryFile } = __webpack_require__(/*! ./query-file */ \"(rsc)/./node_modules/pg-promise/lib/query-file.js\");\nconst { ServerFormatting, PreparedStatement, ParameterizedQuery } = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/pg-promise/lib/types/index.js\");\nconst { SpecialQuery } = __webpack_require__(/*! ./special-query */ \"(rsc)/./node_modules/pg-promise/lib/special-query.js\");\nconst { queryResult } = __webpack_require__(/*! ./query-result */ \"(rsc)/./node_modules/pg-promise/lib/query-result.js\");\nconst npm = {\n    util: __webpack_require__(/*! util */ \"util\"),\n    utils: __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\"),\n    formatting: __webpack_require__(/*! ./formatting */ \"(rsc)/./node_modules/pg-promise/lib/formatting.js\"),\n    errors: __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/pg-promise/lib/errors/index.js\"),\n    stream: __webpack_require__(/*! ./stream */ \"(rsc)/./node_modules/pg-promise/lib/stream.js\"),\n    text: __webpack_require__(/*! ./text */ \"(rsc)/./node_modules/pg-promise/lib/text.js\")\n};\nconst QueryResultError = npm.errors.QueryResultError, InternalError = npm.utils.InternalError, qrec = npm.errors.queryResultErrorCode;\nconst badMask = queryResult.one | queryResult.many; // unsupported combination bit-mask;\n//////////////////////////////\n// Generic query method;\nfunction $query(ctx, query, values, qrm, config) {\n    const special = qrm instanceof SpecialQuery && qrm;\n    const $p = config.promise;\n    if (special && special.isStream) {\n        return npm.stream.call(this, ctx, query, values, config);\n    }\n    const opt = ctx.options, capSQL = opt.capSQL;\n    let error, entityType, pgFormatting = opt.pgFormatting, params = pgFormatting ? values : undefined;\n    if (typeof query === \"function\") {\n        try {\n            query = npm.formatting.resolveFunc(query, values);\n        } catch (e) {\n            error = e;\n            params = values;\n            query = npm.util.inspect(query);\n        }\n    }\n    if (!error && !query) {\n        error = new TypeError(npm.text.invalidQuery);\n    }\n    if (!error && typeof query === \"object\") {\n        if (query instanceof QueryFile) {\n            query.prepare();\n            if (query.error) {\n                error = query.error;\n                query = query.file;\n            } else {\n                query = query[QueryFile.$query];\n            }\n        } else {\n            if (\"entity\" in query) {\n                entityType = query.type;\n                query = query.entity; // query is a function name;\n            } else {\n                if (query instanceof ServerFormatting) {\n                    pgFormatting = true;\n                } else {\n                    if (\"name\" in query) {\n                        query = new PreparedStatement(query);\n                        pgFormatting = true;\n                    } else {\n                        if (\"text\" in query) {\n                            query = new ParameterizedQuery(query);\n                            pgFormatting = true;\n                        }\n                    }\n                }\n                if (query instanceof ServerFormatting && !npm.utils.isNull(values)) {\n                    query.values = values;\n                }\n            }\n        }\n    }\n    if (!error) {\n        if (!pgFormatting && !npm.utils.isText(query)) {\n            const errTxt = entityType ? entityType === \"func\" ? npm.text.invalidFunction : npm.text.invalidProc : npm.text.invalidQuery;\n            error = new TypeError(errTxt);\n        }\n        if (query instanceof ServerFormatting) {\n            const qp = query.parse();\n            if (qp instanceof Error) {\n                error = qp;\n            } else {\n                query = qp;\n            }\n        }\n    }\n    if (!error && !special) {\n        if (npm.utils.isNull(qrm)) {\n            qrm = queryResult.any; // default query result;\n        } else {\n            if (qrm !== parseInt(qrm) || (qrm & badMask) === badMask || qrm < 1 || qrm > 6) {\n                error = new TypeError(npm.text.invalidMask);\n            }\n        }\n    }\n    if (!error && (!pgFormatting || entityType)) {\n        try {\n            // use 'pg-promise' implementation of values formatting;\n            if (entityType) {\n                params = undefined;\n                query = npm.formatting.formatEntity(query, values, {\n                    capSQL,\n                    type: entityType\n                });\n            } else {\n                query = npm.formatting.formatQuery(query, values);\n            }\n        } catch (e) {\n            if (entityType) {\n                let prefix = entityType === \"func\" ? \"select * from\" : \"call\";\n                if (capSQL) {\n                    prefix = prefix.toUpperCase();\n                }\n                query = prefix + \" \" + query + \"(...)\";\n            } else {\n                params = values;\n            }\n            error = e instanceof Error ? e : new npm.utils.InternalError(e);\n        }\n    }\n    return $p((resolve, reject)=>{\n        if (notifyReject()) {\n            return;\n        }\n        error = Events.query(opt, getContext());\n        if (notifyReject()) {\n            return;\n        }\n        try {\n            const start = Date.now();\n            ctx.db.client.query(query, params, (err, result)=>{\n                let data, multiResult, lastResult = result;\n                if (err) {\n                    // istanbul ignore if (auto-testing connectivity issues is too problematic)\n                    if (npm.utils.isConnectivityError(err)) {\n                        ctx.db.client.$connectionError = err;\n                    }\n                    err.query = err.query || query;\n                    err.params = err.params || params;\n                    error = err;\n                } else {\n                    multiResult = Array.isArray(result);\n                    if (multiResult) {\n                        lastResult = result[result.length - 1];\n                        for(let i = 0; i < result.length; i++){\n                            const r = result[i];\n                            makeIterable(r);\n                            error = Events.receive(opt, r.rows, r, getContext());\n                            if (error) {\n                                break;\n                            }\n                        }\n                    } else {\n                        makeIterable(result);\n                        result.duration = Date.now() - start;\n                        error = Events.receive(opt, result.rows, result, getContext());\n                    }\n                }\n                if (!error) {\n                    data = lastResult;\n                    if (special) {\n                        if (special.isMultiResult) {\n                            data = multiResult ? result : [\n                                result\n                            ]; // method .multiResult() is called\n                        }\n                    // else, method .result() is called\n                    } else {\n                        data = data.rows;\n                        const len = data.length;\n                        if (len) {\n                            if (len > 1 && qrm & queryResult.one) {\n                                // one row was expected, but returned multiple;\n                                error = new QueryResultError(qrec.multiple, lastResult, query, params);\n                            } else {\n                                if (!(qrm & (queryResult.one | queryResult.many))) {\n                                    // no data should have been returned;\n                                    error = new QueryResultError(qrec.notEmpty, lastResult, query, params);\n                                } else {\n                                    if (!(qrm & queryResult.many)) {\n                                        data = data[0];\n                                    }\n                                }\n                            }\n                        } else {\n                            // no data returned;\n                            if (qrm & queryResult.none) {\n                                if (qrm & queryResult.one) {\n                                    data = null;\n                                } else {\n                                    data = qrm & queryResult.many ? data : null;\n                                }\n                            } else {\n                                error = new QueryResultError(qrec.noData, lastResult, query, params);\n                            }\n                        }\n                    }\n                }\n                if (!notifyReject()) {\n                    resolve(data);\n                }\n            });\n        } catch (e) {\n            // this can only happen as a result of an internal failure within node-postgres,\n            // like during a sudden loss of communications, which is impossible to reproduce\n            // automatically, so removing it from the test coverage:\n            // istanbul ignore next\n            error = e;\n        }\n        function getContext() {\n            let client;\n            if (ctx.db) {\n                client = ctx.db.client;\n            } else {\n                error = new Error(npm.text.looseQuery);\n            }\n            return {\n                client,\n                query,\n                params,\n                dc: ctx.dc,\n                ctx: ctx.ctx\n            };\n        }\n        notifyReject();\n        function notifyReject() {\n            const context = getContext();\n            if (error) {\n                if (error instanceof InternalError) {\n                    error = error.error;\n                }\n                Events.error(opt, error, context);\n                reject(error);\n                return true;\n            }\n        }\n    });\n}\n// Extends Result to provide iterable for the rows;\n//\n// To be removed once the following PR is merged amd released:\n// https://github.com/brianc/node-postgres/pull/2861\nfunction makeIterable(r) {\n    r[Symbol.iterator] = function() {\n        return this.rows.values();\n    };\n}\nmodule.exports = (config)=>{\n    return function(ctx, query, values, qrm) {\n        return $query.call(this, ctx, query, values, qrm, config);\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/query.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/special-query.js":
/*!******************************************************!*\
  !*** ./node_modules/pg-promise/lib/special-query.js ***!
  \******************************************************/
/***/ ((module) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst specialQueryType = {\n    result: 0,\n    multiResult: 1,\n    stream: 2\n};\nclass SpecialQuery {\n    constructor(type){\n        this.isResult = type === specialQueryType.result; // type used implicitly\n        this.isStream = type === specialQueryType.stream;\n        this.isMultiResult = type === specialQueryType.multiResult;\n    }\n}\nconst cache = {\n    resultQuery: new SpecialQuery(specialQueryType.result),\n    multiResultQuery: new SpecialQuery(specialQueryType.multiResult),\n    streamQuery: new SpecialQuery(specialQueryType.stream)\n};\nmodule.exports = Object.assign({\n    SpecialQuery\n}, cache);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvc3BlY2lhbC1xdWVyeS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztDQU9DO0FBRUQsTUFBTUEsbUJBQW1CO0lBQ3JCQyxRQUFRO0lBQ1JDLGFBQWE7SUFDYkMsUUFBUTtBQUNaO0FBRUEsTUFBTUM7SUFDRkMsWUFBWUMsSUFBSSxDQUFFO1FBQ2QsSUFBSSxDQUFDQyxRQUFRLEdBQUdELFNBQVNOLGlCQUFpQkMsTUFBTSxFQUFFLHVCQUF1QjtRQUN6RSxJQUFJLENBQUNPLFFBQVEsR0FBR0YsU0FBU04saUJBQWlCRyxNQUFNO1FBQ2hELElBQUksQ0FBQ00sYUFBYSxHQUFHSCxTQUFTTixpQkFBaUJFLFdBQVc7SUFDOUQ7QUFDSjtBQUVBLE1BQU1RLFFBQVE7SUFDVkMsYUFBYSxJQUFJUCxhQUFhSixpQkFBaUJDLE1BQU07SUFDckRXLGtCQUFrQixJQUFJUixhQUFhSixpQkFBaUJFLFdBQVc7SUFDL0RXLGFBQWEsSUFBSVQsYUFBYUosaUJBQWlCRyxNQUFNO0FBQ3pEO0FBRUFXLE9BQU9DLE9BQU8sR0FBR0MsT0FBT0MsTUFBTSxDQUFDO0lBQUNiO0FBQVksR0FBR00iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odG1sLWNvbnZlcnRlci8uL25vZGVfbW9kdWxlcy9wZy1wcm9taXNlL2xpYi9zcGVjaWFsLXF1ZXJ5LmpzPzk4MTQiXSwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIFZpdGFseSBUb21pbG92XHJcbiAqXHJcbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGF0IHRoZSB0b3AtbGV2ZWwgZGlyZWN0b3J5IG9mIHRoaXMgZGlzdHJpYnV0aW9uXHJcbiAqIGZvciBsaWNlbnNpbmcgaW5mb3JtYXRpb24uXHJcbiAqXHJcbiAqIFJlbW92YWwgb3IgbW9kaWZpY2F0aW9uIG9mIHRoaXMgY29weXJpZ2h0IG5vdGljZSBpcyBwcm9oaWJpdGVkLlxyXG4gKi9cclxuXHJcbmNvbnN0IHNwZWNpYWxRdWVyeVR5cGUgPSB7XHJcbiAgICByZXN1bHQ6IDAsXHJcbiAgICBtdWx0aVJlc3VsdDogMSxcclxuICAgIHN0cmVhbTogMlxyXG59O1xyXG5cclxuY2xhc3MgU3BlY2lhbFF1ZXJ5IHtcclxuICAgIGNvbnN0cnVjdG9yKHR5cGUpIHtcclxuICAgICAgICB0aGlzLmlzUmVzdWx0ID0gdHlwZSA9PT0gc3BlY2lhbFF1ZXJ5VHlwZS5yZXN1bHQ7IC8vIHR5cGUgdXNlZCBpbXBsaWNpdGx5XHJcbiAgICAgICAgdGhpcy5pc1N0cmVhbSA9IHR5cGUgPT09IHNwZWNpYWxRdWVyeVR5cGUuc3RyZWFtO1xyXG4gICAgICAgIHRoaXMuaXNNdWx0aVJlc3VsdCA9IHR5cGUgPT09IHNwZWNpYWxRdWVyeVR5cGUubXVsdGlSZXN1bHQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IGNhY2hlID0ge1xyXG4gICAgcmVzdWx0UXVlcnk6IG5ldyBTcGVjaWFsUXVlcnkoc3BlY2lhbFF1ZXJ5VHlwZS5yZXN1bHQpLFxyXG4gICAgbXVsdGlSZXN1bHRRdWVyeTogbmV3IFNwZWNpYWxRdWVyeShzcGVjaWFsUXVlcnlUeXBlLm11bHRpUmVzdWx0KSxcclxuICAgIHN0cmVhbVF1ZXJ5OiBuZXcgU3BlY2lhbFF1ZXJ5KHNwZWNpYWxRdWVyeVR5cGUuc3RyZWFtKVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKHtTcGVjaWFsUXVlcnl9LCBjYWNoZSk7XHJcbiJdLCJuYW1lcyI6WyJzcGVjaWFsUXVlcnlUeXBlIiwicmVzdWx0IiwibXVsdGlSZXN1bHQiLCJzdHJlYW0iLCJTcGVjaWFsUXVlcnkiLCJjb25zdHJ1Y3RvciIsInR5cGUiLCJpc1Jlc3VsdCIsImlzU3RyZWFtIiwiaXNNdWx0aVJlc3VsdCIsImNhY2hlIiwicmVzdWx0UXVlcnkiLCJtdWx0aVJlc3VsdFF1ZXJ5Iiwic3RyZWFtUXVlcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiT2JqZWN0IiwiYXNzaWduIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/special-query.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/stream.js":
/*!***********************************************!*\
  !*** ./node_modules/pg-promise/lib/stream.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { Events } = __webpack_require__(/*! ./events */ \"(rsc)/./node_modules/pg-promise/lib/events.js\");\nconst npm = {\n    utils: __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\"),\n    text: __webpack_require__(/*! ./text */ \"(rsc)/./node_modules/pg-promise/lib/text.js\")\n};\n////////////////////////////////////////////\n// Streams query data into any destination,\n// with the help of pg-query-stream library.\nfunction $stream(ctx, qs, initCB, config) {\n    const $p = config.promise;\n    // istanbul ignore next:\n    // we do not provide code coverage for the Native Bindings specifics\n    if (ctx.options.pgNative) {\n        return $p.reject(new Error(npm.text.nativeStreaming));\n    }\n    // Stream class was renamed again, see the following issue:\n    // https://github.com/brianc/node-postgres/issues/2412\n    if (!qs || !qs.constructor || qs.constructor.name !== \"QueryStream\") {\n        // invalid or missing stream object;\n        return $p.reject(new TypeError(npm.text.invalidStream));\n    }\n    if (qs._reading || qs._closed) {\n        // stream object is in the wrong state;\n        return $p.reject(new Error(npm.text.invalidStreamState));\n    }\n    if (typeof initCB !== \"function\") {\n        // parameter `initCB` must be passed as the initialization callback;\n        return $p.reject(new TypeError(npm.text.invalidStreamCB));\n    }\n    let error = Events.query(ctx.options, getContext());\n    if (error) {\n        error = getError(error);\n        Events.error(ctx.options, error, getContext());\n        return $p.reject(error);\n    }\n    const stream = ctx.db.client.query(qs);\n    stream.on(\"data\", onData);\n    stream.on(\"error\", onError);\n    stream.on(\"end\", onEnd);\n    try {\n        initCB.call(this, stream); // the stream must be initialized during the call;\n    } catch (e) {\n        release();\n        error = getError(e);\n        Events.error(ctx.options, error, getContext());\n        return $p.reject(error);\n    }\n    const start = Date.now();\n    let resolve, reject, nRows = 0;\n    function onData(data) {\n        nRows++;\n        error = Events.receive(ctx.options, [\n            data\n        ], undefined, getContext());\n        if (error) {\n            onError(error);\n        }\n    }\n    function onError(e) {\n        release();\n        stream.destroy();\n        e = getError(e);\n        Events.error(ctx.options, e, getContext());\n        reject(e);\n    }\n    function onEnd() {\n        release();\n        resolve({\n            processed: nRows,\n            duration: Date.now() - start // duration, in milliseconds;\n        });\n    }\n    function release() {\n        stream.removeListener(\"data\", onData);\n        stream.removeListener(\"error\", onError);\n        stream.removeListener(\"end\", onEnd);\n    }\n    function getError(e) {\n        return e instanceof npm.utils.InternalError ? e.error : e;\n    }\n    function getContext() {\n        let client;\n        if (ctx.db) {\n            client = ctx.db.client;\n        } else {\n            error = new Error(npm.text.looseQuery);\n        }\n        return {\n            client,\n            dc: ctx.dc,\n            query: qs.cursor.text,\n            params: qs.cursor.values,\n            ctx: ctx.ctx\n        };\n    }\n    return $p((res, rej)=>{\n        resolve = res;\n        reject = rej;\n    });\n}\nmodule.exports = $stream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/task.js":
/*!*********************************************!*\
  !*** ./node_modules/pg-promise/lib/task.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { Events } = __webpack_require__(/*! ./events */ \"(rsc)/./node_modules/pg-promise/lib/events.js\");\nconst npm = {\n    spex: __webpack_require__(/*! spex */ \"(rsc)/./node_modules/spex/lib/index.js\"),\n    utils: __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\"),\n    mode: __webpack_require__(/*! ./tx-mode */ \"(rsc)/./node_modules/pg-promise/lib/tx-mode.js\"),\n    query: __webpack_require__(/*! ./query */ \"(rsc)/./node_modules/pg-promise/lib/query.js\"),\n    text: __webpack_require__(/*! ./text */ \"(rsc)/./node_modules/pg-promise/lib/text.js\")\n};\n/**\r\n * @interface Task\r\n * @description\r\n * Extends {@link Database} for an automatic connection session, with methods for executing multiple database queries.\r\n *\r\n * The type isn't available directly, it can only be created via methods {@link Database#task Database.task}, {@link Database#tx Database.tx},\r\n * or their derivations.\r\n *\r\n * When executing more than one request at a time, one should allocate and release the connection only once,\r\n * while executing all the required queries within the same connection session. More importantly, a transaction\r\n * can only work within a single connection.\r\n *\r\n * This is an interface for tasks/transactions to implement a connection session, during which you can\r\n * execute multiple queries against the same connection that's released automatically when the task/transaction is finished.\r\n *\r\n * Each task/transaction manages the connection automatically. When executed on the root {@link Database} object, the connection\r\n * is allocated from the pool, and once the method's callback has finished, the connection is released back to the pool.\r\n * However, when invoked inside another task or transaction, the method reuses the parent connection.\r\n *\r\n * @see\r\n * {@link Task#ctx ctx},\r\n * {@link Task#batch batch},\r\n * {@link Task#sequence sequence},\r\n * {@link Task#page page}\r\n *\r\n * @example\r\n * db.task(t => {\r\n *       // t = task protocol context;\r\n *       // t.ctx = Task Context;\r\n *       return t.one('select * from users where id=$1', 123)\r\n *           .then(user => {\r\n *               return t.any('select * from events where login=$1', user.name);\r\n *           });\r\n *   })\r\n * .then(events => {\r\n *       // success;\r\n *   })\r\n * .catch(error => {\r\n *       // error;\r\n *   });\r\n *\r\n */ function Task(ctx, tag, isTX, config) {\n    const $p = config.promise;\n    /**\r\n     * @member {TaskContext} Task#ctx\r\n     * @readonly\r\n     * @description\r\n     * Task/Transaction Context object - contains individual properties for each task/transaction.\r\n     *\r\n     * @see event {@link event:query query}\r\n     *\r\n     * @example\r\n     *\r\n     * db.task(t => {\r\n     *     return t.ctx; // task context object\r\n     * })\r\n     *     .then(ctx => {\r\n     *         console.log('Task Duration:', ctx.duration);\r\n     *     });\r\n     *\r\n     * @example\r\n     *\r\n     * db.tx(t => {\r\n     *     return t.ctx; // transaction context object\r\n     * })\r\n     *     .then(ctx => {\r\n     *         console.log('Transaction Duration:', ctx.duration);\r\n     *     });\r\n     */ this.ctx = ctx.ctx = {}; // task context object;\n    npm.utils.addReadProp(this.ctx, \"isTX\", isTX);\n    if (\"context\" in ctx) {\n        npm.utils.addReadProp(this.ctx, \"context\", ctx.context);\n    }\n    npm.utils.addReadProp(this.ctx, \"connected\", !ctx.db);\n    npm.utils.addReadProp(this.ctx, \"tag\", tag);\n    npm.utils.addReadProp(this.ctx, \"dc\", ctx.dc);\n    npm.utils.addReadProp(this.ctx, \"level\", ctx.level);\n    npm.utils.addReadProp(this.ctx, \"inTransaction\", ctx.inTransaction);\n    if (isTX) {\n        npm.utils.addReadProp(this.ctx, \"txLevel\", ctx.txLevel);\n    }\n    npm.utils.addReadProp(this.ctx, \"parent\", ctx.parentCtx);\n    // generic query method;\n    this.query = function(query, values, qrm) {\n        if (!ctx.db) {\n            return $p.reject(new Error(npm.text.looseQuery));\n        }\n        return config.$npm.query.call(this, ctx, query, values, qrm);\n    };\n    /**\r\n     * @deprecated\r\n     * Consider using <b>async/await</b> syntax instead, or if you must have\r\n     * pre-generated promises, then $[Promise.allSettled].\r\n     *\r\n     * @method Task#batch\r\n     * @description\r\n     * Settles a predefined array of mixed values by redirecting to method $[spex.batch].\r\n     *\r\n     * For complete method documentation see $[spex.batch].\r\n     *\r\n     * @param {array} values\r\n     * @param {Object} [options]\r\n     * Optional Parameters.\r\n     * @param {function} [options.cb]\r\n     *\r\n     * @returns {external:Promise}\r\n     */ this.batch = function(values, options) {\n        return config.$npm.spex.batch.call(this, values, options);\n    };\n    /**\r\n     * @method Task#page\r\n     * @description\r\n     * Resolves a dynamic sequence of arrays/pages with mixed values, by redirecting to method $[spex.page].\r\n     *\r\n     * For complete method documentation see $[spex.page].\r\n     *\r\n     * @param {function} source\r\n     * @param {Object} [options]\r\n     * Optional Parameters.\r\n     * @param {function} [options.dest]\r\n     * @param {number} [options.limit=0]\r\n     *\r\n     * @returns {external:Promise}\r\n     */ this.page = function(source, options) {\n        return config.$npm.spex.page.call(this, source, options);\n    };\n    /**\r\n     * @method Task#sequence\r\n     * @description\r\n     * Resolves a dynamic sequence of mixed values by redirecting to method $[spex.sequence].\r\n     *\r\n     * For complete method documentation see $[spex.sequence].\r\n     *\r\n     * @param {function} source\r\n     * @param {Object} [options]\r\n     * Optional Parameters.\r\n     * @param {function} [options.dest]\r\n     * @param {number} [options.limit=0]\r\n     * @param {boolean} [options.track=false]\r\n     *\r\n     * @returns {external:Promise}\r\n     */ this.sequence = function(source, options) {\n        return config.$npm.spex.sequence.call(this, source, options);\n    };\n}\n/**\r\n * @private\r\n * @method Task.callback\r\n * Callback invocation helper.\r\n *\r\n * @param ctx\r\n * @param obj\r\n * @param cb\r\n * @param config\r\n * @returns {Promise.<TResult>}\r\n */ const callback = (ctx, obj, cb, config)=>{\n    const $p = config.promise;\n    let result;\n    try {\n        if (cb.constructor.name === \"GeneratorFunction\") {\n            // v9.0 dropped all support for ES6 generator functions;\n            // Clients should use the new ES7 async/await syntax.\n            throw new TypeError(\"ES6 generator functions are no longer supported!\");\n        }\n        result = cb.call(obj, obj); // invoking the callback function;\n    } catch (err) {\n        Events.error(ctx.options, err, {\n            client: ctx.db && ctx.db.client,\n            dc: ctx.dc,\n            ctx: ctx.ctx\n        });\n        return $p.reject(err); // reject with the error;\n    }\n    if (result && typeof result.then === \"function\") {\n        return result; // result is a valid promise object;\n    }\n    return $p.resolve(result);\n};\n/**\r\n * @private\r\n * @method Task.execute\r\n * Executes a task.\r\n *\r\n * @param ctx\r\n * @param obj\r\n * @param isTX\r\n * @param config\r\n * @returns {Promise.<TResult>}\r\n */ const execute = (ctx, obj, isTX, config)=>{\n    const $p = config.promise;\n    // updates the task context and notifies the client;\n    function update(start, success, result) {\n        const c = ctx.ctx;\n        if (start) {\n            npm.utils.addReadProp(c, \"start\", new Date());\n        } else {\n            c.finish = new Date();\n            c.success = success;\n            c.result = result;\n            c.duration = c.finish - c.start;\n        }\n        (isTX ? Events.transact : Events.task)(ctx.options, {\n            client: ctx.db && ctx.db.client,\n            dc: ctx.dc,\n            ctx: c\n        });\n    }\n    let cbData, cbReason, success, spName; // Save-Point Name;\n    const capSQL = ctx.options.capSQL; // capitalize sql;\n    update(true);\n    if (isTX) {\n        // executing a transaction;\n        spName = `sp_${ctx.txLevel}_${ctx.nextTxCount}`;\n        return begin().then(()=>callback(ctx, obj, ctx.cb, config).then((data)=>{\n                cbData = data; // save callback data;\n                success = true;\n                return commit();\n            }, (err)=>{\n                cbReason = err; // save callback failure reason;\n                return rollback();\n            }).then(()=>{\n                if (success) {\n                    update(false, true, cbData);\n                    return cbData;\n                }\n                update(false, false, cbReason);\n                return $p.reject(cbReason);\n            }, (err)=>{\n                // either COMMIT or ROLLBACK has failed, which is impossible\n                // to replicate in a test environment, so skipping from the test;\n                // istanbul ignore next:\n                update(false, false, err);\n                // istanbul ignore next:\n                return $p.reject(err);\n            }), (err)=>{\n            // BEGIN has failed, which is impossible to replicate in a test\n            // environment, so skipping the whole block from the test;\n            // istanbul ignore next:\n            update(false, false, err);\n            // istanbul ignore next:\n            return $p.reject(err);\n        });\n    }\n    function begin() {\n        if (!ctx.txLevel && ctx.mode instanceof npm.mode.TransactionMode) {\n            return exec(ctx.mode.begin(capSQL), \"savepoint\");\n        }\n        return exec(\"begin\", \"savepoint\");\n    }\n    function commit() {\n        return exec(\"commit\", \"release savepoint\");\n    }\n    function rollback() {\n        return exec(\"rollback\", \"rollback to savepoint\");\n    }\n    function exec(top, nested) {\n        if (ctx.txLevel) {\n            return obj.none((capSQL ? nested.toUpperCase() : nested) + \" \" + spName);\n        }\n        return obj.none(capSQL ? top.toUpperCase() : top);\n    }\n    // executing a task;\n    return callback(ctx, obj, ctx.cb, config).then((data)=>{\n        update(false, true, data);\n        return data;\n    }).catch((error)=>{\n        update(false, false, error);\n        return $p.reject(error);\n    });\n};\nmodule.exports = (config)=>{\n    const npmLocal = config.$npm;\n    // istanbul ignore next:\n    // we keep 'npm.query' initialization here, even though it is always\n    // pre-initialized by the 'database' module, for integrity purpose.\n    npmLocal.query = npmLocal.query || npm.query(config);\n    npmLocal.spex = npmLocal.spex || npm.spex(config.promiseLib);\n    return {\n        Task,\n        execute,\n        callback\n    };\n}; /**\r\n * @typedef TaskContext\r\n * @description\r\n * Task/Transaction Context used via property {@link Task#ctx ctx} inside tasks (methods {@link Database#task Database.task} and {@link Database#taskIf Database.taskIf})\r\n * and transactions (methods {@link Database#tx Database.tx} and {@link Database#txIf Database.txIf}).\r\n *\r\n * Properties `context`, `connected`, `parent`, `level`, `dc`, `isTX`, `tag`, `start`, `useCount` and `serverVersion` are set just before the operation has started,\r\n * while properties `finish`, `duration`, `success` and `result` are set immediately after the operation has finished.\r\n *\r\n * @property {*} context\r\n * If the operation was invoked with a calling context - `task.call(context,...)` or `tx.call(context,...)`,\r\n * this property is set with the context that was passed in. Otherwise, the property doesn't exist.\r\n *\r\n * @property {*} dc\r\n * _Database Context_ that was passed into the {@link Database} object during construction.\r\n *\r\n * @property {boolean} isTX\r\n * Indicates whether this operation is a transaction (as opposed to a regular task).\r\n *\r\n * @property {number} duration\r\n * Number of milliseconds consumed by the operation.\r\n *\r\n * Set after the operation has finished, it is simply a shortcut for `finish - start`.\r\n *\r\n * @property {number} level\r\n * Task nesting level, starting from 0, counting both regular tasks and transactions.\r\n *\r\n * @property {number} txLevel\r\n * Transaction nesting level, starting from 0. Transactions on level 0 use `BEGIN/COMMIT/ROLLBACK`,\r\n * while transactions on nested levels use the corresponding `SAVEPOINT` commands.\r\n *\r\n * This property exists only within the context of a transaction (`isTX = true`).\r\n *\r\n * @property {boolean} inTransaction\r\n * Available in both tasks and transactions, it simplifies checking when there is a transaction\r\n * going on either on this level or above.\r\n *\r\n * For example, when you want to check for a containing transaction while inside a task, and\r\n * only start a transaction when there is none yet.\r\n *\r\n * @property {TaskContext} parent\r\n * Parent task/transaction context, or `null` when it is top-level.\r\n *\r\n * @property {boolean} connected\r\n * Indicates when the task/transaction acquired the connection on its own (`connected = true`), and will release it once\r\n * the operation has finished. When the value is `false`, the operation is reusing an existing connection.\r\n *\r\n * @property {*} tag\r\n * Tag value as it was passed into the task. See methods {@link Database#task task} and {@link Database#tx tx}.\r\n *\r\n * @property {Date} start\r\n * Date/Time of when this operation started the execution.\r\n *\r\n * @property {number} useCount\r\n * Number of times the connection has been previously used, starting with 0 for a freshly\r\n * allocated physical connection.\r\n *\r\n * @property {string} serverVersion\r\n * Version of the PostgreSQL server to which we are connected.\r\n * Not available with $[Native Bindings].\r\n *\r\n * @property {Date} finish\r\n * Once the operation has finished, this property is set to the Data/Time of when it happened.\r\n *\r\n * @property {boolean} success\r\n * Once the operation has finished, this property indicates whether it was successful.\r\n *\r\n * @property {*} result\r\n * Once the operation has finished, this property contains the result, depending on property `success`:\r\n * - data resolved by the operation, if `success = true`\r\n * - error / rejection reason, if `success = false`\r\n *\r\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvdGFzay5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztDQU9DO0FBRUQsTUFBTSxFQUFDQSxNQUFNLEVBQUMsR0FBR0MsbUJBQU9BLENBQUM7QUFFekIsTUFBTUMsTUFBTTtJQUNSQyxNQUFNRixtQkFBT0EsQ0FBQztJQUNkRyxPQUFPSCxtQkFBT0EsQ0FBQztJQUNmSSxNQUFNSixtQkFBT0EsQ0FBQztJQUNkSyxPQUFPTCxtQkFBT0EsQ0FBQztJQUNmTSxNQUFNTixtQkFBT0EsQ0FBQztBQUNsQjtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXlDQyxHQUNELFNBQVNPLEtBQUtDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLE1BQU07SUFFaEMsTUFBTUMsS0FBS0QsT0FBT0UsT0FBTztJQUV6Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXlCQyxHQUNELElBQUksQ0FBQ0wsR0FBRyxHQUFHQSxJQUFJQSxHQUFHLEdBQUcsQ0FBQyxHQUFHLHVCQUF1QjtJQUVoRFAsSUFBSUUsS0FBSyxDQUFDVyxXQUFXLENBQUMsSUFBSSxDQUFDTixHQUFHLEVBQUUsUUFBUUU7SUFFeEMsSUFBSSxhQUFhRixLQUFLO1FBQ2xCUCxJQUFJRSxLQUFLLENBQUNXLFdBQVcsQ0FBQyxJQUFJLENBQUNOLEdBQUcsRUFBRSxXQUFXQSxJQUFJTyxPQUFPO0lBQzFEO0lBRUFkLElBQUlFLEtBQUssQ0FBQ1csV0FBVyxDQUFDLElBQUksQ0FBQ04sR0FBRyxFQUFFLGFBQWEsQ0FBQ0EsSUFBSVEsRUFBRTtJQUNwRGYsSUFBSUUsS0FBSyxDQUFDVyxXQUFXLENBQUMsSUFBSSxDQUFDTixHQUFHLEVBQUUsT0FBT0M7SUFDdkNSLElBQUlFLEtBQUssQ0FBQ1csV0FBVyxDQUFDLElBQUksQ0FBQ04sR0FBRyxFQUFFLE1BQU1BLElBQUlTLEVBQUU7SUFDNUNoQixJQUFJRSxLQUFLLENBQUNXLFdBQVcsQ0FBQyxJQUFJLENBQUNOLEdBQUcsRUFBRSxTQUFTQSxJQUFJVSxLQUFLO0lBQ2xEakIsSUFBSUUsS0FBSyxDQUFDVyxXQUFXLENBQUMsSUFBSSxDQUFDTixHQUFHLEVBQUUsaUJBQWlCQSxJQUFJVyxhQUFhO0lBRWxFLElBQUlULE1BQU07UUFDTlQsSUFBSUUsS0FBSyxDQUFDVyxXQUFXLENBQUMsSUFBSSxDQUFDTixHQUFHLEVBQUUsV0FBV0EsSUFBSVksT0FBTztJQUMxRDtJQUVBbkIsSUFBSUUsS0FBSyxDQUFDVyxXQUFXLENBQUMsSUFBSSxDQUFDTixHQUFHLEVBQUUsVUFBVUEsSUFBSWEsU0FBUztJQUV2RCx3QkFBd0I7SUFDeEIsSUFBSSxDQUFDaEIsS0FBSyxHQUFHLFNBQVVBLEtBQUssRUFBRWlCLE1BQU0sRUFBRUMsR0FBRztRQUNyQyxJQUFJLENBQUNmLElBQUlRLEVBQUUsRUFBRTtZQUNULE9BQU9KLEdBQUdZLE1BQU0sQ0FBQyxJQUFJQyxNQUFNeEIsSUFBSUssSUFBSSxDQUFDb0IsVUFBVTtRQUNsRDtRQUNBLE9BQU9mLE9BQU9nQixJQUFJLENBQUN0QixLQUFLLENBQUN1QixJQUFJLENBQUMsSUFBSSxFQUFFcEIsS0FBS0gsT0FBT2lCLFFBQVFDO0lBQzVEO0lBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBaUJDLEdBQ0QsSUFBSSxDQUFDTSxLQUFLLEdBQUcsU0FBVVAsTUFBTSxFQUFFUSxPQUFPO1FBQ2xDLE9BQU9uQixPQUFPZ0IsSUFBSSxDQUFDekIsSUFBSSxDQUFDMkIsS0FBSyxDQUFDRCxJQUFJLENBQUMsSUFBSSxFQUFFTixRQUFRUTtJQUNyRDtJQUVBOzs7Ozs7Ozs7Ozs7OztLQWNDLEdBQ0QsSUFBSSxDQUFDQyxJQUFJLEdBQUcsU0FBVUMsTUFBTSxFQUFFRixPQUFPO1FBQ2pDLE9BQU9uQixPQUFPZ0IsSUFBSSxDQUFDekIsSUFBSSxDQUFDNkIsSUFBSSxDQUFDSCxJQUFJLENBQUMsSUFBSSxFQUFFSSxRQUFRRjtJQUNwRDtJQUVBOzs7Ozs7Ozs7Ozs7Ozs7S0FlQyxHQUNELElBQUksQ0FBQ0csUUFBUSxHQUFHLFNBQVVELE1BQU0sRUFBRUYsT0FBTztRQUNyQyxPQUFPbkIsT0FBT2dCLElBQUksQ0FBQ3pCLElBQUksQ0FBQytCLFFBQVEsQ0FBQ0wsSUFBSSxDQUFDLElBQUksRUFBRUksUUFBUUY7SUFDeEQ7QUFFSjtBQUVBOzs7Ozs7Ozs7O0NBVUMsR0FDRCxNQUFNSSxXQUFXLENBQUMxQixLQUFLMkIsS0FBS0MsSUFBSXpCO0lBRTVCLE1BQU1DLEtBQUtELE9BQU9FLE9BQU87SUFDekIsSUFBSXdCO0lBRUosSUFBSTtRQUNBLElBQUlELEdBQUdFLFdBQVcsQ0FBQ0MsSUFBSSxLQUFLLHFCQUFxQjtZQUM3Qyx3REFBd0Q7WUFDeEQscURBQXFEO1lBQ3JELE1BQU0sSUFBSUMsVUFBVTtRQUN4QjtRQUNBSCxTQUFTRCxHQUFHUixJQUFJLENBQUNPLEtBQUtBLE1BQU0sa0NBQWtDO0lBQ2xFLEVBQUUsT0FBT00sS0FBSztRQUNWMUMsT0FBTzJDLEtBQUssQ0FBQ2xDLElBQUlzQixPQUFPLEVBQUVXLEtBQUs7WUFDM0JFLFFBQVFuQyxJQUFJUSxFQUFFLElBQUlSLElBQUlRLEVBQUUsQ0FBQzJCLE1BQU07WUFDL0IxQixJQUFJVCxJQUFJUyxFQUFFO1lBQ1ZULEtBQUtBLElBQUlBLEdBQUc7UUFDaEI7UUFDQSxPQUFPSSxHQUFHWSxNQUFNLENBQUNpQixNQUFNLHlCQUF5QjtJQUNwRDtJQUNBLElBQUlKLFVBQVUsT0FBT0EsT0FBT08sSUFBSSxLQUFLLFlBQVk7UUFDN0MsT0FBT1AsUUFBUSxvQ0FBb0M7SUFDdkQ7SUFDQSxPQUFPekIsR0FBR2lDLE9BQU8sQ0FBQ1I7QUFDdEI7QUFFQTs7Ozs7Ozs7OztDQVVDLEdBQ0QsTUFBTVMsVUFBVSxDQUFDdEMsS0FBSzJCLEtBQUt6QixNQUFNQztJQUU3QixNQUFNQyxLQUFLRCxPQUFPRSxPQUFPO0lBRXpCLG9EQUFvRDtJQUNwRCxTQUFTa0MsT0FBT0MsS0FBSyxFQUFFQyxPQUFPLEVBQUVaLE1BQU07UUFDbEMsTUFBTWEsSUFBSTFDLElBQUlBLEdBQUc7UUFDakIsSUFBSXdDLE9BQU87WUFDUC9DLElBQUlFLEtBQUssQ0FBQ1csV0FBVyxDQUFDb0MsR0FBRyxTQUFTLElBQUlDO1FBQzFDLE9BQU87WUFDSEQsRUFBRUUsTUFBTSxHQUFHLElBQUlEO1lBQ2ZELEVBQUVELE9BQU8sR0FBR0E7WUFDWkMsRUFBRWIsTUFBTSxHQUFHQTtZQUNYYSxFQUFFRyxRQUFRLEdBQUdILEVBQUVFLE1BQU0sR0FBR0YsRUFBRUYsS0FBSztRQUNuQztRQUNDdEMsQ0FBQUEsT0FBT1gsT0FBT3VELFFBQVEsR0FBR3ZELE9BQU93RCxJQUFJLEVBQUUvQyxJQUFJc0IsT0FBTyxFQUFFO1lBQ2hEYSxRQUFRbkMsSUFBSVEsRUFBRSxJQUFJUixJQUFJUSxFQUFFLENBQUMyQixNQUFNO1lBQy9CMUIsSUFBSVQsSUFBSVMsRUFBRTtZQUNWVCxLQUFLMEM7UUFDVDtJQUNKO0lBRUEsSUFBSU0sUUFBUUMsVUFBVVIsU0FDbEJTLFFBQVEsbUJBQW1CO0lBRS9CLE1BQU1DLFNBQVNuRCxJQUFJc0IsT0FBTyxDQUFDNkIsTUFBTSxFQUFFLGtCQUFrQjtJQUVyRFosT0FBTztJQUVQLElBQUlyQyxNQUFNO1FBQ04sMkJBQTJCO1FBQzNCZ0QsU0FBUyxDQUFDLEdBQUcsRUFBRWxELElBQUlZLE9BQU8sQ0FBQyxDQUFDLEVBQUVaLElBQUlvRCxXQUFXLENBQUMsQ0FBQztRQUMvQyxPQUFPQyxRQUNGakIsSUFBSSxDQUFDLElBQU1WLFNBQVMxQixLQUFLMkIsS0FBSzNCLElBQUk0QixFQUFFLEVBQUV6QixRQUNsQ2lDLElBQUksQ0FBQ2tCLENBQUFBO2dCQUNGTixTQUFTTSxNQUFNLHNCQUFzQjtnQkFDckNiLFVBQVU7Z0JBQ1YsT0FBT2M7WUFDWCxHQUFHdEIsQ0FBQUE7Z0JBQ0NnQixXQUFXaEIsS0FBSyxnQ0FBZ0M7Z0JBQ2hELE9BQU91QjtZQUNYLEdBQ0NwQixJQUFJLENBQUM7Z0JBQ0YsSUFBSUssU0FBUztvQkFDVEYsT0FBTyxPQUFPLE1BQU1TO29CQUNwQixPQUFPQTtnQkFDWDtnQkFDQVQsT0FBTyxPQUFPLE9BQU9VO2dCQUNyQixPQUFPN0MsR0FBR1ksTUFBTSxDQUFDaUM7WUFDckIsR0FDQWhCLENBQUFBO2dCQUNJLDREQUE0RDtnQkFDNUQsaUVBQWlFO2dCQUNqRSx3QkFBd0I7Z0JBQ3hCTSxPQUFPLE9BQU8sT0FBT047Z0JBQ3JCLHdCQUF3QjtnQkFDeEIsT0FBTzdCLEdBQUdZLE1BQU0sQ0FBQ2lCO1lBQ3JCLElBQ0pBLENBQUFBO1lBQ0ksK0RBQStEO1lBQy9ELDBEQUEwRDtZQUMxRCx3QkFBd0I7WUFDeEJNLE9BQU8sT0FBTyxPQUFPTjtZQUNyQix3QkFBd0I7WUFDeEIsT0FBTzdCLEdBQUdZLE1BQU0sQ0FBQ2lCO1FBQ3JCO0lBQ1I7SUFFQSxTQUFTb0I7UUFDTCxJQUFJLENBQUNyRCxJQUFJWSxPQUFPLElBQUlaLElBQUlKLElBQUksWUFBWUgsSUFBSUcsSUFBSSxDQUFDNkQsZUFBZSxFQUFFO1lBQzlELE9BQU9DLEtBQUsxRCxJQUFJSixJQUFJLENBQUN5RCxLQUFLLENBQUNGLFNBQVM7UUFDeEM7UUFDQSxPQUFPTyxLQUFLLFNBQVM7SUFDekI7SUFFQSxTQUFTSDtRQUNMLE9BQU9HLEtBQUssVUFBVTtJQUMxQjtJQUVBLFNBQVNGO1FBQ0wsT0FBT0UsS0FBSyxZQUFZO0lBQzVCO0lBRUEsU0FBU0EsS0FBS0MsR0FBRyxFQUFFQyxNQUFNO1FBQ3JCLElBQUk1RCxJQUFJWSxPQUFPLEVBQUU7WUFDYixPQUFPZSxJQUFJa0MsSUFBSSxDQUFDLENBQUNWLFNBQVNTLE9BQU9FLFdBQVcsS0FBS0YsTUFBSyxJQUFLLE1BQU1WO1FBQ3JFO1FBQ0EsT0FBT3ZCLElBQUlrQyxJQUFJLENBQUNWLFNBQVNRLElBQUlHLFdBQVcsS0FBS0g7SUFDakQ7SUFFQSxvQkFBb0I7SUFDcEIsT0FBT2pDLFNBQVMxQixLQUFLMkIsS0FBSzNCLElBQUk0QixFQUFFLEVBQUV6QixRQUM3QmlDLElBQUksQ0FBQ2tCLENBQUFBO1FBQ0ZmLE9BQU8sT0FBTyxNQUFNZTtRQUNwQixPQUFPQTtJQUNYLEdBQ0NTLEtBQUssQ0FBQzdCLENBQUFBO1FBQ0hLLE9BQU8sT0FBTyxPQUFPTDtRQUNyQixPQUFPOUIsR0FBR1ksTUFBTSxDQUFDa0I7SUFDckI7QUFDUjtBQUVBOEIsT0FBT0MsT0FBTyxHQUFHOUQsQ0FBQUE7SUFDYixNQUFNK0QsV0FBVy9ELE9BQU9nQixJQUFJO0lBRTVCLHdCQUF3QjtJQUN4QixvRUFBb0U7SUFDcEUsbUVBQW1FO0lBQ25FK0MsU0FBU3JFLEtBQUssR0FBR3FFLFNBQVNyRSxLQUFLLElBQUlKLElBQUlJLEtBQUssQ0FBQ007SUFDN0MrRCxTQUFTeEUsSUFBSSxHQUFHd0UsU0FBU3hFLElBQUksSUFBSUQsSUFBSUMsSUFBSSxDQUFDUyxPQUFPZ0UsVUFBVTtJQUUzRCxPQUFPO1FBQ0hwRTtRQUFNdUM7UUFBU1o7SUFDbkI7QUFDSixHQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0F3RUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odG1sLWNvbnZlcnRlci8uL25vZGVfbW9kdWxlcy9wZy1wcm9taXNlL2xpYi90YXNrLmpzPzQ4NWYiXSwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIFZpdGFseSBUb21pbG92XHJcbiAqXHJcbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGF0IHRoZSB0b3AtbGV2ZWwgZGlyZWN0b3J5IG9mIHRoaXMgZGlzdHJpYnV0aW9uXHJcbiAqIGZvciBsaWNlbnNpbmcgaW5mb3JtYXRpb24uXHJcbiAqXHJcbiAqIFJlbW92YWwgb3IgbW9kaWZpY2F0aW9uIG9mIHRoaXMgY29weXJpZ2h0IG5vdGljZSBpcyBwcm9oaWJpdGVkLlxyXG4gKi9cclxuXHJcbmNvbnN0IHtFdmVudHN9ID0gcmVxdWlyZSgnLi9ldmVudHMnKTtcclxuXHJcbmNvbnN0IG5wbSA9IHtcclxuICAgIHNwZXg6IHJlcXVpcmUoJ3NwZXgnKSxcclxuICAgIHV0aWxzOiByZXF1aXJlKCcuL3V0aWxzJyksXHJcbiAgICBtb2RlOiByZXF1aXJlKCcuL3R4LW1vZGUnKSxcclxuICAgIHF1ZXJ5OiByZXF1aXJlKCcuL3F1ZXJ5JyksXHJcbiAgICB0ZXh0OiByZXF1aXJlKCcuL3RleHQnKVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBpbnRlcmZhY2UgVGFza1xyXG4gKiBAZGVzY3JpcHRpb25cclxuICogRXh0ZW5kcyB7QGxpbmsgRGF0YWJhc2V9IGZvciBhbiBhdXRvbWF0aWMgY29ubmVjdGlvbiBzZXNzaW9uLCB3aXRoIG1ldGhvZHMgZm9yIGV4ZWN1dGluZyBtdWx0aXBsZSBkYXRhYmFzZSBxdWVyaWVzLlxyXG4gKlxyXG4gKiBUaGUgdHlwZSBpc24ndCBhdmFpbGFibGUgZGlyZWN0bHksIGl0IGNhbiBvbmx5IGJlIGNyZWF0ZWQgdmlhIG1ldGhvZHMge0BsaW5rIERhdGFiYXNlI3Rhc2sgRGF0YWJhc2UudGFza30sIHtAbGluayBEYXRhYmFzZSN0eCBEYXRhYmFzZS50eH0sXHJcbiAqIG9yIHRoZWlyIGRlcml2YXRpb25zLlxyXG4gKlxyXG4gKiBXaGVuIGV4ZWN1dGluZyBtb3JlIHRoYW4gb25lIHJlcXVlc3QgYXQgYSB0aW1lLCBvbmUgc2hvdWxkIGFsbG9jYXRlIGFuZCByZWxlYXNlIHRoZSBjb25uZWN0aW9uIG9ubHkgb25jZSxcclxuICogd2hpbGUgZXhlY3V0aW5nIGFsbCB0aGUgcmVxdWlyZWQgcXVlcmllcyB3aXRoaW4gdGhlIHNhbWUgY29ubmVjdGlvbiBzZXNzaW9uLiBNb3JlIGltcG9ydGFudGx5LCBhIHRyYW5zYWN0aW9uXHJcbiAqIGNhbiBvbmx5IHdvcmsgd2l0aGluIGEgc2luZ2xlIGNvbm5lY3Rpb24uXHJcbiAqXHJcbiAqIFRoaXMgaXMgYW4gaW50ZXJmYWNlIGZvciB0YXNrcy90cmFuc2FjdGlvbnMgdG8gaW1wbGVtZW50IGEgY29ubmVjdGlvbiBzZXNzaW9uLCBkdXJpbmcgd2hpY2ggeW91IGNhblxyXG4gKiBleGVjdXRlIG11bHRpcGxlIHF1ZXJpZXMgYWdhaW5zdCB0aGUgc2FtZSBjb25uZWN0aW9uIHRoYXQncyByZWxlYXNlZCBhdXRvbWF0aWNhbGx5IHdoZW4gdGhlIHRhc2svdHJhbnNhY3Rpb24gaXMgZmluaXNoZWQuXHJcbiAqXHJcbiAqIEVhY2ggdGFzay90cmFuc2FjdGlvbiBtYW5hZ2VzIHRoZSBjb25uZWN0aW9uIGF1dG9tYXRpY2FsbHkuIFdoZW4gZXhlY3V0ZWQgb24gdGhlIHJvb3Qge0BsaW5rIERhdGFiYXNlfSBvYmplY3QsIHRoZSBjb25uZWN0aW9uXHJcbiAqIGlzIGFsbG9jYXRlZCBmcm9tIHRoZSBwb29sLCBhbmQgb25jZSB0aGUgbWV0aG9kJ3MgY2FsbGJhY2sgaGFzIGZpbmlzaGVkLCB0aGUgY29ubmVjdGlvbiBpcyByZWxlYXNlZCBiYWNrIHRvIHRoZSBwb29sLlxyXG4gKiBIb3dldmVyLCB3aGVuIGludm9rZWQgaW5zaWRlIGFub3RoZXIgdGFzayBvciB0cmFuc2FjdGlvbiwgdGhlIG1ldGhvZCByZXVzZXMgdGhlIHBhcmVudCBjb25uZWN0aW9uLlxyXG4gKlxyXG4gKiBAc2VlXHJcbiAqIHtAbGluayBUYXNrI2N0eCBjdHh9LFxyXG4gKiB7QGxpbmsgVGFzayNiYXRjaCBiYXRjaH0sXHJcbiAqIHtAbGluayBUYXNrI3NlcXVlbmNlIHNlcXVlbmNlfSxcclxuICoge0BsaW5rIFRhc2sjcGFnZSBwYWdlfVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBkYi50YXNrKHQgPT4ge1xyXG4gKiAgICAgICAvLyB0ID0gdGFzayBwcm90b2NvbCBjb250ZXh0O1xyXG4gKiAgICAgICAvLyB0LmN0eCA9IFRhc2sgQ29udGV4dDtcclxuICogICAgICAgcmV0dXJuIHQub25lKCdzZWxlY3QgKiBmcm9tIHVzZXJzIHdoZXJlIGlkPSQxJywgMTIzKVxyXG4gKiAgICAgICAgICAgLnRoZW4odXNlciA9PiB7XHJcbiAqICAgICAgICAgICAgICAgcmV0dXJuIHQuYW55KCdzZWxlY3QgKiBmcm9tIGV2ZW50cyB3aGVyZSBsb2dpbj0kMScsIHVzZXIubmFtZSk7XHJcbiAqICAgICAgICAgICB9KTtcclxuICogICB9KVxyXG4gKiAudGhlbihldmVudHMgPT4ge1xyXG4gKiAgICAgICAvLyBzdWNjZXNzO1xyXG4gKiAgIH0pXHJcbiAqIC5jYXRjaChlcnJvciA9PiB7XHJcbiAqICAgICAgIC8vIGVycm9yO1xyXG4gKiAgIH0pO1xyXG4gKlxyXG4gKi9cclxuZnVuY3Rpb24gVGFzayhjdHgsIHRhZywgaXNUWCwgY29uZmlnKSB7XHJcblxyXG4gICAgY29uc3QgJHAgPSBjb25maWcucHJvbWlzZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBtZW1iZXIge1Rhc2tDb250ZXh0fSBUYXNrI2N0eFxyXG4gICAgICogQHJlYWRvbmx5XHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIFRhc2svVHJhbnNhY3Rpb24gQ29udGV4dCBvYmplY3QgLSBjb250YWlucyBpbmRpdmlkdWFsIHByb3BlcnRpZXMgZm9yIGVhY2ggdGFzay90cmFuc2FjdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAc2VlIGV2ZW50IHtAbGluayBldmVudDpxdWVyeSBxdWVyeX1cclxuICAgICAqXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICpcclxuICAgICAqIGRiLnRhc2sodCA9PiB7XHJcbiAgICAgKiAgICAgcmV0dXJuIHQuY3R4OyAvLyB0YXNrIGNvbnRleHQgb2JqZWN0XHJcbiAgICAgKiB9KVxyXG4gICAgICogICAgIC50aGVuKGN0eCA9PiB7XHJcbiAgICAgKiAgICAgICAgIGNvbnNvbGUubG9nKCdUYXNrIER1cmF0aW9uOicsIGN0eC5kdXJhdGlvbik7XHJcbiAgICAgKiAgICAgfSk7XHJcbiAgICAgKlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqXHJcbiAgICAgKiBkYi50eCh0ID0+IHtcclxuICAgICAqICAgICByZXR1cm4gdC5jdHg7IC8vIHRyYW5zYWN0aW9uIGNvbnRleHQgb2JqZWN0XHJcbiAgICAgKiB9KVxyXG4gICAgICogICAgIC50aGVuKGN0eCA9PiB7XHJcbiAgICAgKiAgICAgICAgIGNvbnNvbGUubG9nKCdUcmFuc2FjdGlvbiBEdXJhdGlvbjonLCBjdHguZHVyYXRpb24pO1xyXG4gICAgICogICAgIH0pO1xyXG4gICAgICovXHJcbiAgICB0aGlzLmN0eCA9IGN0eC5jdHggPSB7fTsgLy8gdGFzayBjb250ZXh0IG9iamVjdDtcclxuXHJcbiAgICBucG0udXRpbHMuYWRkUmVhZFByb3AodGhpcy5jdHgsICdpc1RYJywgaXNUWCk7XHJcblxyXG4gICAgaWYgKCdjb250ZXh0JyBpbiBjdHgpIHtcclxuICAgICAgICBucG0udXRpbHMuYWRkUmVhZFByb3AodGhpcy5jdHgsICdjb250ZXh0JywgY3R4LmNvbnRleHQpO1xyXG4gICAgfVxyXG5cclxuICAgIG5wbS51dGlscy5hZGRSZWFkUHJvcCh0aGlzLmN0eCwgJ2Nvbm5lY3RlZCcsICFjdHguZGIpO1xyXG4gICAgbnBtLnV0aWxzLmFkZFJlYWRQcm9wKHRoaXMuY3R4LCAndGFnJywgdGFnKTtcclxuICAgIG5wbS51dGlscy5hZGRSZWFkUHJvcCh0aGlzLmN0eCwgJ2RjJywgY3R4LmRjKTtcclxuICAgIG5wbS51dGlscy5hZGRSZWFkUHJvcCh0aGlzLmN0eCwgJ2xldmVsJywgY3R4LmxldmVsKTtcclxuICAgIG5wbS51dGlscy5hZGRSZWFkUHJvcCh0aGlzLmN0eCwgJ2luVHJhbnNhY3Rpb24nLCBjdHguaW5UcmFuc2FjdGlvbik7XHJcblxyXG4gICAgaWYgKGlzVFgpIHtcclxuICAgICAgICBucG0udXRpbHMuYWRkUmVhZFByb3AodGhpcy5jdHgsICd0eExldmVsJywgY3R4LnR4TGV2ZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIG5wbS51dGlscy5hZGRSZWFkUHJvcCh0aGlzLmN0eCwgJ3BhcmVudCcsIGN0eC5wYXJlbnRDdHgpO1xyXG5cclxuICAgIC8vIGdlbmVyaWMgcXVlcnkgbWV0aG9kO1xyXG4gICAgdGhpcy5xdWVyeSA9IGZ1bmN0aW9uIChxdWVyeSwgdmFsdWVzLCBxcm0pIHtcclxuICAgICAgICBpZiAoIWN0eC5kYikge1xyXG4gICAgICAgICAgICByZXR1cm4gJHAucmVqZWN0KG5ldyBFcnJvcihucG0udGV4dC5sb29zZVF1ZXJ5KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb25maWcuJG5wbS5xdWVyeS5jYWxsKHRoaXMsIGN0eCwgcXVlcnksIHZhbHVlcywgcXJtKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICogQ29uc2lkZXIgdXNpbmcgPGI+YXN5bmMvYXdhaXQ8L2I+IHN5bnRheCBpbnN0ZWFkLCBvciBpZiB5b3UgbXVzdCBoYXZlXHJcbiAgICAgKiBwcmUtZ2VuZXJhdGVkIHByb21pc2VzLCB0aGVuICRbUHJvbWlzZS5hbGxTZXR0bGVkXS5cclxuICAgICAqXHJcbiAgICAgKiBAbWV0aG9kIFRhc2sjYmF0Y2hcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogU2V0dGxlcyBhIHByZWRlZmluZWQgYXJyYXkgb2YgbWl4ZWQgdmFsdWVzIGJ5IHJlZGlyZWN0aW5nIHRvIG1ldGhvZCAkW3NwZXguYmF0Y2hdLlxyXG4gICAgICpcclxuICAgICAqIEZvciBjb21wbGV0ZSBtZXRob2QgZG9jdW1lbnRhdGlvbiBzZWUgJFtzcGV4LmJhdGNoXS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge2FycmF5fSB2YWx1ZXNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgICAqIE9wdGlvbmFsIFBhcmFtZXRlcnMuXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbb3B0aW9ucy5jYl1cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7ZXh0ZXJuYWw6UHJvbWlzZX1cclxuICAgICAqL1xyXG4gICAgdGhpcy5iYXRjaCA9IGZ1bmN0aW9uICh2YWx1ZXMsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gY29uZmlnLiRucG0uc3BleC5iYXRjaC5jYWxsKHRoaXMsIHZhbHVlcywgb3B0aW9ucyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG1ldGhvZCBUYXNrI3BhZ2VcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogUmVzb2x2ZXMgYSBkeW5hbWljIHNlcXVlbmNlIG9mIGFycmF5cy9wYWdlcyB3aXRoIG1peGVkIHZhbHVlcywgYnkgcmVkaXJlY3RpbmcgdG8gbWV0aG9kICRbc3BleC5wYWdlXS5cclxuICAgICAqXHJcbiAgICAgKiBGb3IgY29tcGxldGUgbWV0aG9kIGRvY3VtZW50YXRpb24gc2VlICRbc3BleC5wYWdlXS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBzb3VyY2VcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgICAqIE9wdGlvbmFsIFBhcmFtZXRlcnMuXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbb3B0aW9ucy5kZXN0XVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxpbWl0PTBdXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge2V4dGVybmFsOlByb21pc2V9XHJcbiAgICAgKi9cclxuICAgIHRoaXMucGFnZSA9IGZ1bmN0aW9uIChzb3VyY2UsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gY29uZmlnLiRucG0uc3BleC5wYWdlLmNhbGwodGhpcywgc291cmNlLCBvcHRpb25zKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbWV0aG9kIFRhc2sjc2VxdWVuY2VcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogUmVzb2x2ZXMgYSBkeW5hbWljIHNlcXVlbmNlIG9mIG1peGVkIHZhbHVlcyBieSByZWRpcmVjdGluZyB0byBtZXRob2QgJFtzcGV4LnNlcXVlbmNlXS5cclxuICAgICAqXHJcbiAgICAgKiBGb3IgY29tcGxldGUgbWV0aG9kIGRvY3VtZW50YXRpb24gc2VlICRbc3BleC5zZXF1ZW5jZV0uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gc291cmNlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICAgKiBPcHRpb25hbCBQYXJhbWV0ZXJzLlxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gW29wdGlvbnMuZGVzdF1cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5saW1pdD0wXVxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFjaz1mYWxzZV1cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7ZXh0ZXJuYWw6UHJvbWlzZX1cclxuICAgICAqL1xyXG4gICAgdGhpcy5zZXF1ZW5jZSA9IGZ1bmN0aW9uIChzb3VyY2UsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gY29uZmlnLiRucG0uc3BleC5zZXF1ZW5jZS5jYWxsKHRoaXMsIHNvdXJjZSwgb3B0aW9ucyk7XHJcbiAgICB9O1xyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBtZXRob2QgVGFzay5jYWxsYmFja1xyXG4gKiBDYWxsYmFjayBpbnZvY2F0aW9uIGhlbHBlci5cclxuICpcclxuICogQHBhcmFtIGN0eFxyXG4gKiBAcGFyYW0gb2JqXHJcbiAqIEBwYXJhbSBjYlxyXG4gKiBAcGFyYW0gY29uZmlnXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlLjxUUmVzdWx0Pn1cclxuICovXHJcbmNvbnN0IGNhbGxiYWNrID0gKGN0eCwgb2JqLCBjYiwgY29uZmlnKSA9PiB7XHJcblxyXG4gICAgY29uc3QgJHAgPSBjb25maWcucHJvbWlzZTtcclxuICAgIGxldCByZXN1bHQ7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICBpZiAoY2IuY29uc3RydWN0b3IubmFtZSA9PT0gJ0dlbmVyYXRvckZ1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAvLyB2OS4wIGRyb3BwZWQgYWxsIHN1cHBvcnQgZm9yIEVTNiBnZW5lcmF0b3IgZnVuY3Rpb25zO1xyXG4gICAgICAgICAgICAvLyBDbGllbnRzIHNob3VsZCB1c2UgdGhlIG5ldyBFUzcgYXN5bmMvYXdhaXQgc3ludGF4LlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFUzYgZ2VuZXJhdG9yIGZ1bmN0aW9ucyBhcmUgbm8gbG9uZ2VyIHN1cHBvcnRlZCEnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzdWx0ID0gY2IuY2FsbChvYmosIG9iaik7IC8vIGludm9raW5nIHRoZSBjYWxsYmFjayBmdW5jdGlvbjtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIEV2ZW50cy5lcnJvcihjdHgub3B0aW9ucywgZXJyLCB7XHJcbiAgICAgICAgICAgIGNsaWVudDogY3R4LmRiICYmIGN0eC5kYi5jbGllbnQsIC8vIHRoZSBlcnJvciBjYW4gYmUgZHVlIHRvIGxvc3Mgb2YgY29ubmVjdGl2aXR5XHJcbiAgICAgICAgICAgIGRjOiBjdHguZGMsXHJcbiAgICAgICAgICAgIGN0eDogY3R4LmN0eFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiAkcC5yZWplY3QoZXJyKTsgLy8gcmVqZWN0IHdpdGggdGhlIGVycm9yO1xyXG4gICAgfVxyXG4gICAgaWYgKHJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICByZXR1cm4gcmVzdWx0OyAvLyByZXN1bHQgaXMgYSB2YWxpZCBwcm9taXNlIG9iamVjdDtcclxuICAgIH1cclxuICAgIHJldHVybiAkcC5yZXNvbHZlKHJlc3VsdCk7XHJcbn07XHJcblxyXG4vKipcclxuICogQHByaXZhdGVcclxuICogQG1ldGhvZCBUYXNrLmV4ZWN1dGVcclxuICogRXhlY3V0ZXMgYSB0YXNrLlxyXG4gKlxyXG4gKiBAcGFyYW0gY3R4XHJcbiAqIEBwYXJhbSBvYmpcclxuICogQHBhcmFtIGlzVFhcclxuICogQHBhcmFtIGNvbmZpZ1xyXG4gKiBAcmV0dXJucyB7UHJvbWlzZS48VFJlc3VsdD59XHJcbiAqL1xyXG5jb25zdCBleGVjdXRlID0gKGN0eCwgb2JqLCBpc1RYLCBjb25maWcpID0+IHtcclxuXHJcbiAgICBjb25zdCAkcCA9IGNvbmZpZy5wcm9taXNlO1xyXG5cclxuICAgIC8vIHVwZGF0ZXMgdGhlIHRhc2sgY29udGV4dCBhbmQgbm90aWZpZXMgdGhlIGNsaWVudDtcclxuICAgIGZ1bmN0aW9uIHVwZGF0ZShzdGFydCwgc3VjY2VzcywgcmVzdWx0KSB7XHJcbiAgICAgICAgY29uc3QgYyA9IGN0eC5jdHg7XHJcbiAgICAgICAgaWYgKHN0YXJ0KSB7XHJcbiAgICAgICAgICAgIG5wbS51dGlscy5hZGRSZWFkUHJvcChjLCAnc3RhcnQnLCBuZXcgRGF0ZSgpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjLmZpbmlzaCA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgIGMuc3VjY2VzcyA9IHN1Y2Nlc3M7XHJcbiAgICAgICAgICAgIGMucmVzdWx0ID0gcmVzdWx0O1xyXG4gICAgICAgICAgICBjLmR1cmF0aW9uID0gYy5maW5pc2ggLSBjLnN0YXJ0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAoaXNUWCA/IEV2ZW50cy50cmFuc2FjdCA6IEV2ZW50cy50YXNrKShjdHgub3B0aW9ucywge1xyXG4gICAgICAgICAgICBjbGllbnQ6IGN0eC5kYiAmJiBjdHguZGIuY2xpZW50LCAvLyBsb3NzIG9mIGNvbm5lY3Rpdml0eSBpcyBwb3NzaWJsZSBhdCB0aGlzIHBvaW50XHJcbiAgICAgICAgICAgIGRjOiBjdHguZGMsXHJcbiAgICAgICAgICAgIGN0eDogY1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBjYkRhdGEsIGNiUmVhc29uLCBzdWNjZXNzLFxyXG4gICAgICAgIHNwTmFtZTsgLy8gU2F2ZS1Qb2ludCBOYW1lO1xyXG5cclxuICAgIGNvbnN0IGNhcFNRTCA9IGN0eC5vcHRpb25zLmNhcFNRTDsgLy8gY2FwaXRhbGl6ZSBzcWw7XHJcblxyXG4gICAgdXBkYXRlKHRydWUpO1xyXG5cclxuICAgIGlmIChpc1RYKSB7XHJcbiAgICAgICAgLy8gZXhlY3V0aW5nIGEgdHJhbnNhY3Rpb247XHJcbiAgICAgICAgc3BOYW1lID0gYHNwXyR7Y3R4LnR4TGV2ZWx9XyR7Y3R4Lm5leHRUeENvdW50fWA7XHJcbiAgICAgICAgcmV0dXJuIGJlZ2luKClcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4gY2FsbGJhY2soY3R4LCBvYmosIGN0eC5jYiwgY29uZmlnKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2JEYXRhID0gZGF0YTsgLy8gc2F2ZSBjYWxsYmFjayBkYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21taXQoKTtcclxuICAgICAgICAgICAgICAgIH0sIGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2JSZWFzb24gPSBlcnI7IC8vIHNhdmUgY2FsbGJhY2sgZmFpbHVyZSByZWFzb247XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZShmYWxzZSwgdHJ1ZSwgY2JEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNiRGF0YTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlKGZhbHNlLCBmYWxzZSwgY2JSZWFzb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkcC5yZWplY3QoY2JSZWFzb24pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZWl0aGVyIENPTU1JVCBvciBST0xMQkFDSyBoYXMgZmFpbGVkLCB3aGljaCBpcyBpbXBvc3NpYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gcmVwbGljYXRlIGluIGEgdGVzdCBlbnZpcm9ubWVudCwgc28gc2tpcHBpbmcgZnJvbSB0aGUgdGVzdDtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dDpcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGUoZmFsc2UsIGZhbHNlLCBlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkcC5yZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gQkVHSU4gaGFzIGZhaWxlZCwgd2hpY2ggaXMgaW1wb3NzaWJsZSB0byByZXBsaWNhdGUgaW4gYSB0ZXN0XHJcbiAgICAgICAgICAgICAgICAvLyBlbnZpcm9ubWVudCwgc28gc2tpcHBpbmcgdGhlIHdob2xlIGJsb2NrIGZyb20gdGhlIHRlc3Q7XHJcbiAgICAgICAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dDpcclxuICAgICAgICAgICAgICAgIHVwZGF0ZShmYWxzZSwgZmFsc2UsIGVycik7XHJcbiAgICAgICAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dDpcclxuICAgICAgICAgICAgICAgIHJldHVybiAkcC5yZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYmVnaW4oKSB7XHJcbiAgICAgICAgaWYgKCFjdHgudHhMZXZlbCAmJiBjdHgubW9kZSBpbnN0YW5jZW9mIG5wbS5tb2RlLlRyYW5zYWN0aW9uTW9kZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXhlYyhjdHgubW9kZS5iZWdpbihjYXBTUUwpLCAnc2F2ZXBvaW50Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBleGVjKCdiZWdpbicsICdzYXZlcG9pbnQnKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjb21taXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIGV4ZWMoJ2NvbW1pdCcsICdyZWxlYXNlIHNhdmVwb2ludCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJvbGxiYWNrKCkge1xyXG4gICAgICAgIHJldHVybiBleGVjKCdyb2xsYmFjaycsICdyb2xsYmFjayB0byBzYXZlcG9pbnQnKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBleGVjKHRvcCwgbmVzdGVkKSB7XHJcbiAgICAgICAgaWYgKGN0eC50eExldmVsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvYmoubm9uZSgoY2FwU1FMID8gbmVzdGVkLnRvVXBwZXJDYXNlKCkgOiBuZXN0ZWQpICsgJyAnICsgc3BOYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9iai5ub25lKGNhcFNRTCA/IHRvcC50b1VwcGVyQ2FzZSgpIDogdG9wKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBleGVjdXRpbmcgYSB0YXNrO1xyXG4gICAgcmV0dXJuIGNhbGxiYWNrKGN0eCwgb2JqLCBjdHguY2IsIGNvbmZpZylcclxuICAgICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICAgICAgdXBkYXRlKGZhbHNlLCB0cnVlLCBkYXRhKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICB1cGRhdGUoZmFsc2UsIGZhbHNlLCBlcnJvcik7XHJcbiAgICAgICAgICAgIHJldHVybiAkcC5yZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBjb25maWcgPT4ge1xyXG4gICAgY29uc3QgbnBtTG9jYWwgPSBjb25maWcuJG5wbTtcclxuXHJcbiAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dDpcclxuICAgIC8vIHdlIGtlZXAgJ25wbS5xdWVyeScgaW5pdGlhbGl6YXRpb24gaGVyZSwgZXZlbiB0aG91Z2ggaXQgaXMgYWx3YXlzXHJcbiAgICAvLyBwcmUtaW5pdGlhbGl6ZWQgYnkgdGhlICdkYXRhYmFzZScgbW9kdWxlLCBmb3IgaW50ZWdyaXR5IHB1cnBvc2UuXHJcbiAgICBucG1Mb2NhbC5xdWVyeSA9IG5wbUxvY2FsLnF1ZXJ5IHx8IG5wbS5xdWVyeShjb25maWcpO1xyXG4gICAgbnBtTG9jYWwuc3BleCA9IG5wbUxvY2FsLnNwZXggfHwgbnBtLnNwZXgoY29uZmlnLnByb21pc2VMaWIpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgVGFzaywgZXhlY3V0ZSwgY2FsbGJhY2tcclxuICAgIH07XHJcbn07XHJcblxyXG4vKipcclxuICogQHR5cGVkZWYgVGFza0NvbnRleHRcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRhc2svVHJhbnNhY3Rpb24gQ29udGV4dCB1c2VkIHZpYSBwcm9wZXJ0eSB7QGxpbmsgVGFzayNjdHggY3R4fSBpbnNpZGUgdGFza3MgKG1ldGhvZHMge0BsaW5rIERhdGFiYXNlI3Rhc2sgRGF0YWJhc2UudGFza30gYW5kIHtAbGluayBEYXRhYmFzZSN0YXNrSWYgRGF0YWJhc2UudGFza0lmfSlcclxuICogYW5kIHRyYW5zYWN0aW9ucyAobWV0aG9kcyB7QGxpbmsgRGF0YWJhc2UjdHggRGF0YWJhc2UudHh9IGFuZCB7QGxpbmsgRGF0YWJhc2UjdHhJZiBEYXRhYmFzZS50eElmfSkuXHJcbiAqXHJcbiAqIFByb3BlcnRpZXMgYGNvbnRleHRgLCBgY29ubmVjdGVkYCwgYHBhcmVudGAsIGBsZXZlbGAsIGBkY2AsIGBpc1RYYCwgYHRhZ2AsIGBzdGFydGAsIGB1c2VDb3VudGAgYW5kIGBzZXJ2ZXJWZXJzaW9uYCBhcmUgc2V0IGp1c3QgYmVmb3JlIHRoZSBvcGVyYXRpb24gaGFzIHN0YXJ0ZWQsXHJcbiAqIHdoaWxlIHByb3BlcnRpZXMgYGZpbmlzaGAsIGBkdXJhdGlvbmAsIGBzdWNjZXNzYCBhbmQgYHJlc3VsdGAgYXJlIHNldCBpbW1lZGlhdGVseSBhZnRlciB0aGUgb3BlcmF0aW9uIGhhcyBmaW5pc2hlZC5cclxuICpcclxuICogQHByb3BlcnR5IHsqfSBjb250ZXh0XHJcbiAqIElmIHRoZSBvcGVyYXRpb24gd2FzIGludm9rZWQgd2l0aCBhIGNhbGxpbmcgY29udGV4dCAtIGB0YXNrLmNhbGwoY29udGV4dCwuLi4pYCBvciBgdHguY2FsbChjb250ZXh0LC4uLilgLFxyXG4gKiB0aGlzIHByb3BlcnR5IGlzIHNldCB3aXRoIHRoZSBjb250ZXh0IHRoYXQgd2FzIHBhc3NlZCBpbi4gT3RoZXJ3aXNlLCB0aGUgcHJvcGVydHkgZG9lc24ndCBleGlzdC5cclxuICpcclxuICogQHByb3BlcnR5IHsqfSBkY1xyXG4gKiBfRGF0YWJhc2UgQ29udGV4dF8gdGhhdCB3YXMgcGFzc2VkIGludG8gdGhlIHtAbGluayBEYXRhYmFzZX0gb2JqZWN0IGR1cmluZyBjb25zdHJ1Y3Rpb24uXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNUWFxyXG4gKiBJbmRpY2F0ZXMgd2hldGhlciB0aGlzIG9wZXJhdGlvbiBpcyBhIHRyYW5zYWN0aW9uIChhcyBvcHBvc2VkIHRvIGEgcmVndWxhciB0YXNrKS5cclxuICpcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGR1cmF0aW9uXHJcbiAqIE51bWJlciBvZiBtaWxsaXNlY29uZHMgY29uc3VtZWQgYnkgdGhlIG9wZXJhdGlvbi5cclxuICpcclxuICogU2V0IGFmdGVyIHRoZSBvcGVyYXRpb24gaGFzIGZpbmlzaGVkLCBpdCBpcyBzaW1wbHkgYSBzaG9ydGN1dCBmb3IgYGZpbmlzaCAtIHN0YXJ0YC5cclxuICpcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGxldmVsXHJcbiAqIFRhc2sgbmVzdGluZyBsZXZlbCwgc3RhcnRpbmcgZnJvbSAwLCBjb3VudGluZyBib3RoIHJlZ3VsYXIgdGFza3MgYW5kIHRyYW5zYWN0aW9ucy5cclxuICpcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IHR4TGV2ZWxcclxuICogVHJhbnNhY3Rpb24gbmVzdGluZyBsZXZlbCwgc3RhcnRpbmcgZnJvbSAwLiBUcmFuc2FjdGlvbnMgb24gbGV2ZWwgMCB1c2UgYEJFR0lOL0NPTU1JVC9ST0xMQkFDS2AsXHJcbiAqIHdoaWxlIHRyYW5zYWN0aW9ucyBvbiBuZXN0ZWQgbGV2ZWxzIHVzZSB0aGUgY29ycmVzcG9uZGluZyBgU0FWRVBPSU5UYCBjb21tYW5kcy5cclxuICpcclxuICogVGhpcyBwcm9wZXJ0eSBleGlzdHMgb25seSB3aXRoaW4gdGhlIGNvbnRleHQgb2YgYSB0cmFuc2FjdGlvbiAoYGlzVFggPSB0cnVlYCkuXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaW5UcmFuc2FjdGlvblxyXG4gKiBBdmFpbGFibGUgaW4gYm90aCB0YXNrcyBhbmQgdHJhbnNhY3Rpb25zLCBpdCBzaW1wbGlmaWVzIGNoZWNraW5nIHdoZW4gdGhlcmUgaXMgYSB0cmFuc2FjdGlvblxyXG4gKiBnb2luZyBvbiBlaXRoZXIgb24gdGhpcyBsZXZlbCBvciBhYm92ZS5cclxuICpcclxuICogRm9yIGV4YW1wbGUsIHdoZW4geW91IHdhbnQgdG8gY2hlY2sgZm9yIGEgY29udGFpbmluZyB0cmFuc2FjdGlvbiB3aGlsZSBpbnNpZGUgYSB0YXNrLCBhbmRcclxuICogb25seSBzdGFydCBhIHRyYW5zYWN0aW9uIHdoZW4gdGhlcmUgaXMgbm9uZSB5ZXQuXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7VGFza0NvbnRleHR9IHBhcmVudFxyXG4gKiBQYXJlbnQgdGFzay90cmFuc2FjdGlvbiBjb250ZXh0LCBvciBgbnVsbGAgd2hlbiBpdCBpcyB0b3AtbGV2ZWwuXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gY29ubmVjdGVkXHJcbiAqIEluZGljYXRlcyB3aGVuIHRoZSB0YXNrL3RyYW5zYWN0aW9uIGFjcXVpcmVkIHRoZSBjb25uZWN0aW9uIG9uIGl0cyBvd24gKGBjb25uZWN0ZWQgPSB0cnVlYCksIGFuZCB3aWxsIHJlbGVhc2UgaXQgb25jZVxyXG4gKiB0aGUgb3BlcmF0aW9uIGhhcyBmaW5pc2hlZC4gV2hlbiB0aGUgdmFsdWUgaXMgYGZhbHNlYCwgdGhlIG9wZXJhdGlvbiBpcyByZXVzaW5nIGFuIGV4aXN0aW5nIGNvbm5lY3Rpb24uXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7Kn0gdGFnXHJcbiAqIFRhZyB2YWx1ZSBhcyBpdCB3YXMgcGFzc2VkIGludG8gdGhlIHRhc2suIFNlZSBtZXRob2RzIHtAbGluayBEYXRhYmFzZSN0YXNrIHRhc2t9IGFuZCB7QGxpbmsgRGF0YWJhc2UjdHggdHh9LlxyXG4gKlxyXG4gKiBAcHJvcGVydHkge0RhdGV9IHN0YXJ0XHJcbiAqIERhdGUvVGltZSBvZiB3aGVuIHRoaXMgb3BlcmF0aW9uIHN0YXJ0ZWQgdGhlIGV4ZWN1dGlvbi5cclxuICpcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IHVzZUNvdW50XHJcbiAqIE51bWJlciBvZiB0aW1lcyB0aGUgY29ubmVjdGlvbiBoYXMgYmVlbiBwcmV2aW91c2x5IHVzZWQsIHN0YXJ0aW5nIHdpdGggMCBmb3IgYSBmcmVzaGx5XHJcbiAqIGFsbG9jYXRlZCBwaHlzaWNhbCBjb25uZWN0aW9uLlxyXG4gKlxyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc2VydmVyVmVyc2lvblxyXG4gKiBWZXJzaW9uIG9mIHRoZSBQb3N0Z3JlU1FMIHNlcnZlciB0byB3aGljaCB3ZSBhcmUgY29ubmVjdGVkLlxyXG4gKiBOb3QgYXZhaWxhYmxlIHdpdGggJFtOYXRpdmUgQmluZGluZ3NdLlxyXG4gKlxyXG4gKiBAcHJvcGVydHkge0RhdGV9IGZpbmlzaFxyXG4gKiBPbmNlIHRoZSBvcGVyYXRpb24gaGFzIGZpbmlzaGVkLCB0aGlzIHByb3BlcnR5IGlzIHNldCB0byB0aGUgRGF0YS9UaW1lIG9mIHdoZW4gaXQgaGFwcGVuZWQuXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc3VjY2Vzc1xyXG4gKiBPbmNlIHRoZSBvcGVyYXRpb24gaGFzIGZpbmlzaGVkLCB0aGlzIHByb3BlcnR5IGluZGljYXRlcyB3aGV0aGVyIGl0IHdhcyBzdWNjZXNzZnVsLlxyXG4gKlxyXG4gKiBAcHJvcGVydHkgeyp9IHJlc3VsdFxyXG4gKiBPbmNlIHRoZSBvcGVyYXRpb24gaGFzIGZpbmlzaGVkLCB0aGlzIHByb3BlcnR5IGNvbnRhaW5zIHRoZSByZXN1bHQsIGRlcGVuZGluZyBvbiBwcm9wZXJ0eSBgc3VjY2Vzc2A6XHJcbiAqIC0gZGF0YSByZXNvbHZlZCBieSB0aGUgb3BlcmF0aW9uLCBpZiBgc3VjY2VzcyA9IHRydWVgXHJcbiAqIC0gZXJyb3IgLyByZWplY3Rpb24gcmVhc29uLCBpZiBgc3VjY2VzcyA9IGZhbHNlYFxyXG4gKlxyXG4gKi9cclxuIl0sIm5hbWVzIjpbIkV2ZW50cyIsInJlcXVpcmUiLCJucG0iLCJzcGV4IiwidXRpbHMiLCJtb2RlIiwicXVlcnkiLCJ0ZXh0IiwiVGFzayIsImN0eCIsInRhZyIsImlzVFgiLCJjb25maWciLCIkcCIsInByb21pc2UiLCJhZGRSZWFkUHJvcCIsImNvbnRleHQiLCJkYiIsImRjIiwibGV2ZWwiLCJpblRyYW5zYWN0aW9uIiwidHhMZXZlbCIsInBhcmVudEN0eCIsInZhbHVlcyIsInFybSIsInJlamVjdCIsIkVycm9yIiwibG9vc2VRdWVyeSIsIiRucG0iLCJjYWxsIiwiYmF0Y2giLCJvcHRpb25zIiwicGFnZSIsInNvdXJjZSIsInNlcXVlbmNlIiwiY2FsbGJhY2siLCJvYmoiLCJjYiIsInJlc3VsdCIsImNvbnN0cnVjdG9yIiwibmFtZSIsIlR5cGVFcnJvciIsImVyciIsImVycm9yIiwiY2xpZW50IiwidGhlbiIsInJlc29sdmUiLCJleGVjdXRlIiwidXBkYXRlIiwic3RhcnQiLCJzdWNjZXNzIiwiYyIsIkRhdGUiLCJmaW5pc2giLCJkdXJhdGlvbiIsInRyYW5zYWN0IiwidGFzayIsImNiRGF0YSIsImNiUmVhc29uIiwic3BOYW1lIiwiY2FwU1FMIiwibmV4dFR4Q291bnQiLCJiZWdpbiIsImRhdGEiLCJjb21taXQiLCJyb2xsYmFjayIsIlRyYW5zYWN0aW9uTW9kZSIsImV4ZWMiLCJ0b3AiLCJuZXN0ZWQiLCJub25lIiwidG9VcHBlckNhc2UiLCJjYXRjaCIsIm1vZHVsZSIsImV4cG9ydHMiLCJucG1Mb2NhbCIsInByb21pc2VMaWIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/task.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/text.js":
/*!*********************************************!*\
  !*** ./node_modules/pg-promise/lib/text.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ /* All error messages used in the module */ \nconst streamVersion = (__webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/pg-promise/package.json\").devDependencies[\"pg-query-stream\"]);\nmodule.exports = {\n    nativeError: \"Failed to initialize Native Bindings.\",\n    /* Database errors */ queryDisconnected: \"Cannot execute a query on a disconnected client.\",\n    invalidQuery: \"Invalid query format.\",\n    invalidFunction: \"Invalid function name.\",\n    invalidProc: \"Invalid procedure name.\",\n    invalidMask: \"Invalid Query Result Mask specified.\",\n    looseQuery: \"Querying against a released or lost connection.\",\n    /* result errors */ notEmpty: \"No return data was expected.\",\n    noData: \"No data returned from the query.\",\n    multiple: \"Multiple rows were not expected.\",\n    /* streaming support */ nativeStreaming: \"Streaming doesn't work with Native Bindings.\",\n    invalidStream: `Invalid or missing stream object: pg-query-stream >= v${streamVersion} was expected`,\n    invalidStreamState: \"Invalid stream state.\",\n    invalidStreamCB: \"Invalid or missing stream initialization callback.\",\n    /* connection errors */ poolDestroyed: \"Connection pool of the database object has been destroyed.\",\n    clientEnd: \"Abnormal client.end() call, due to invalid code or failed server connection.\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvdGV4dC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztDQU9DLEdBRUQseUNBQXlDO0FBRXpDLE1BQU1BLGdCQUFnQkMsK0hBQ2lCO0FBRXZDRSxPQUFPQyxPQUFPLEdBQUc7SUFDYkMsYUFBYTtJQUViLG1CQUFtQixHQUNuQkMsbUJBQW1CO0lBQ25CQyxjQUFjO0lBQ2RDLGlCQUFpQjtJQUNqQkMsYUFBYTtJQUNiQyxhQUFhO0lBQ2JDLFlBQVk7SUFFWixpQkFBaUIsR0FDakJDLFVBQVU7SUFDVkMsUUFBUTtJQUNSQyxVQUFVO0lBRVYscUJBQXFCLEdBQ3JCQyxpQkFBaUI7SUFDakJDLGVBQWUsQ0FBQyxzREFBc0QsRUFBRWhCLGNBQWMsYUFBYSxDQUFDO0lBQ3BHaUIsb0JBQW9CO0lBQ3BCQyxpQkFBaUI7SUFFakIscUJBQXFCLEdBQ3JCQyxlQUFlO0lBQ2ZDLFdBQVc7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2h0bWwtY29udmVydGVyLy4vbm9kZV9tb2R1bGVzL3BnLXByb21pc2UvbGliL3RleHQuanM/ZjE5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgVml0YWx5IFRvbWlsb3ZcclxuICpcclxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHRvcC1sZXZlbCBkaXJlY3Rvcnkgb2YgdGhpcyBkaXN0cmlidXRpb25cclxuICogZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbi5cclxuICpcclxuICogUmVtb3ZhbCBvciBtb2RpZmljYXRpb24gb2YgdGhpcyBjb3B5cmlnaHQgbm90aWNlIGlzIHByb2hpYml0ZWQuXHJcbiAqL1xyXG5cclxuLyogQWxsIGVycm9yIG1lc3NhZ2VzIHVzZWQgaW4gdGhlIG1vZHVsZSAqL1xyXG5cclxuY29uc3Qgc3RyZWFtVmVyc2lvbiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpXHJcbiAgICAuZGV2RGVwZW5kZW5jaWVzWydwZy1xdWVyeS1zdHJlYW0nXTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgbmF0aXZlRXJyb3I6ICdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBOYXRpdmUgQmluZGluZ3MuJyxcclxuXHJcbiAgICAvKiBEYXRhYmFzZSBlcnJvcnMgKi9cclxuICAgIHF1ZXJ5RGlzY29ubmVjdGVkOiAnQ2Fubm90IGV4ZWN1dGUgYSBxdWVyeSBvbiBhIGRpc2Nvbm5lY3RlZCBjbGllbnQuJyxcclxuICAgIGludmFsaWRRdWVyeTogJ0ludmFsaWQgcXVlcnkgZm9ybWF0LicsXHJcbiAgICBpbnZhbGlkRnVuY3Rpb246ICdJbnZhbGlkIGZ1bmN0aW9uIG5hbWUuJyxcclxuICAgIGludmFsaWRQcm9jOiAnSW52YWxpZCBwcm9jZWR1cmUgbmFtZS4nLFxyXG4gICAgaW52YWxpZE1hc2s6ICdJbnZhbGlkIFF1ZXJ5IFJlc3VsdCBNYXNrIHNwZWNpZmllZC4nLFxyXG4gICAgbG9vc2VRdWVyeTogJ1F1ZXJ5aW5nIGFnYWluc3QgYSByZWxlYXNlZCBvciBsb3N0IGNvbm5lY3Rpb24uJyxcclxuXHJcbiAgICAvKiByZXN1bHQgZXJyb3JzICovXHJcbiAgICBub3RFbXB0eTogJ05vIHJldHVybiBkYXRhIHdhcyBleHBlY3RlZC4nLFxyXG4gICAgbm9EYXRhOiAnTm8gZGF0YSByZXR1cm5lZCBmcm9tIHRoZSBxdWVyeS4nLFxyXG4gICAgbXVsdGlwbGU6ICdNdWx0aXBsZSByb3dzIHdlcmUgbm90IGV4cGVjdGVkLicsXHJcblxyXG4gICAgLyogc3RyZWFtaW5nIHN1cHBvcnQgKi9cclxuICAgIG5hdGl2ZVN0cmVhbWluZzogJ1N0cmVhbWluZyBkb2VzblxcJ3Qgd29yayB3aXRoIE5hdGl2ZSBCaW5kaW5ncy4nLFxyXG4gICAgaW52YWxpZFN0cmVhbTogYEludmFsaWQgb3IgbWlzc2luZyBzdHJlYW0gb2JqZWN0OiBwZy1xdWVyeS1zdHJlYW0gPj0gdiR7c3RyZWFtVmVyc2lvbn0gd2FzIGV4cGVjdGVkYCxcclxuICAgIGludmFsaWRTdHJlYW1TdGF0ZTogJ0ludmFsaWQgc3RyZWFtIHN0YXRlLicsXHJcbiAgICBpbnZhbGlkU3RyZWFtQ0I6ICdJbnZhbGlkIG9yIG1pc3Npbmcgc3RyZWFtIGluaXRpYWxpemF0aW9uIGNhbGxiYWNrLicsXHJcblxyXG4gICAgLyogY29ubmVjdGlvbiBlcnJvcnMgKi9cclxuICAgIHBvb2xEZXN0cm95ZWQ6ICdDb25uZWN0aW9uIHBvb2wgb2YgdGhlIGRhdGFiYXNlIG9iamVjdCBoYXMgYmVlbiBkZXN0cm95ZWQuJyxcclxuICAgIGNsaWVudEVuZDogJ0Fibm9ybWFsIGNsaWVudC5lbmQoKSBjYWxsLCBkdWUgdG8gaW52YWxpZCBjb2RlIG9yIGZhaWxlZCBzZXJ2ZXIgY29ubmVjdGlvbi4nXHJcbn07XHJcbiJdLCJuYW1lcyI6WyJzdHJlYW1WZXJzaW9uIiwicmVxdWlyZSIsImRldkRlcGVuZGVuY2llcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJuYXRpdmVFcnJvciIsInF1ZXJ5RGlzY29ubmVjdGVkIiwiaW52YWxpZFF1ZXJ5IiwiaW52YWxpZEZ1bmN0aW9uIiwiaW52YWxpZFByb2MiLCJpbnZhbGlkTWFzayIsImxvb3NlUXVlcnkiLCJub3RFbXB0eSIsIm5vRGF0YSIsIm11bHRpcGxlIiwibmF0aXZlU3RyZWFtaW5nIiwiaW52YWxpZFN0cmVhbSIsImludmFsaWRTdHJlYW1TdGF0ZSIsImludmFsaWRTdHJlYW1DQiIsInBvb2xEZXN0cm95ZWQiLCJjbGllbnRFbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/text.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/tx-mode.js":
/*!************************************************!*\
  !*** ./node_modules/pg-promise/lib/tx-mode.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { InnerState } = __webpack_require__(/*! ./inner-state */ \"(rsc)/./node_modules/pg-promise/lib/inner-state.js\");\nconst { addInspection } = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\");\nconst { assert } = __webpack_require__(/*! ./assert */ \"(rsc)/./node_modules/pg-promise/lib/assert.js\");\n/**\r\n * @enum {number}\r\n * @alias txMode.isolationLevel\r\n * @readonly\r\n * @summary Transaction Isolation Level.\r\n * @description\r\n * The type is available from the {@link txMode} namespace.\r\n *\r\n * @see $[Transaction Isolation]\r\n */ const isolationLevel = {\n    /** Isolation level not specified. */ none: 0,\n    /** ISOLATION LEVEL SERIALIZABLE */ serializable: 1,\n    /** ISOLATION LEVEL REPEATABLE READ */ repeatableRead: 2,\n    /** ISOLATION LEVEL READ COMMITTED */ readCommitted: 3\n};\n/**\r\n * @class txMode.TransactionMode\r\n * @description\r\n * Constructs a complete transaction-opening `BEGIN` command, from these options:\r\n *  - isolation level\r\n *  - access mode\r\n *  - deferrable mode\r\n *\r\n * The type is available from the {@link txMode} namespace.\r\n *\r\n * @param {} [options]\r\n * Transaction Mode options.\r\n *\r\n * @param {txMode.isolationLevel} [options.tiLevel]\r\n * Transaction Isolation Level.\r\n *\r\n * @param {boolean} [options.readOnly]\r\n * Sets transaction access mode based on the read-only flag:\r\n *  - `undefined` - access mode not specified (default)\r\n *  - `true` - access mode is set to `READ ONLY`\r\n *  - `false` - access mode is set to `READ WRITE`\r\n *\r\n * @param {boolean} [options.deferrable]\r\n * Sets transaction deferrable mode based on the boolean value:\r\n *  - `undefined` - deferrable mode not specified (default)\r\n *  - `true` - mode is set to `DEFERRABLE`\r\n *  - `false` - mode is set to `NOT DEFERRABLE`\r\n *\r\n * It is used only when `tiLevel`=`isolationLevel.serializable`\r\n * and `readOnly`=`true`, or else it is ignored.\r\n *\r\n * @returns {txMode.TransactionMode}\r\n *\r\n * @see $[BEGIN], {@link txMode.isolationLevel}\r\n *\r\n * @example\r\n *\r\n * const {TransactionMode, isolationLevel} = pgp.txMode;\r\n *\r\n * // Create a reusable transaction mode (serializable + read-only + deferrable):\r\n * const mode = new TransactionMode({\r\n *     tiLevel: isolationLevel.serializable,\r\n *     readOnly: true,\r\n *     deferrable: true\r\n * });\r\n *\r\n * db.tx({mode}, t => {\r\n *     return t.any('SELECT * FROM table');\r\n * })\r\n *     .then(data => {\r\n *         // success;\r\n *     })\r\n *     .catch(error => {\r\n *         // error\r\n *     });\r\n *\r\n * // Instead of the default BEGIN, such transaction will start with:\r\n *\r\n * // BEGIN ISOLATION LEVEL SERIALIZABLE READ ONLY DEFERRABLE\r\n *\r\n */ class TransactionMode extends InnerState {\n    constructor(options){\n        options = assert(options, [\n            \"tiLevel\",\n            \"deferrable\",\n            \"readOnly\"\n        ]);\n        const { readOnly, deferrable } = options;\n        let { tiLevel } = options;\n        let level, accessMode, deferrableMode, begin = \"begin\";\n        tiLevel = tiLevel > 0 ? parseInt(tiLevel) : 0;\n        if (tiLevel > 0 && tiLevel < 4) {\n            const values = [\n                \"serializable\",\n                \"repeatable read\",\n                \"read committed\"\n            ];\n            level = \"isolation level \" + values[tiLevel - 1];\n        }\n        if (readOnly) {\n            accessMode = \"read only\";\n        } else {\n            if (readOnly !== undefined) {\n                accessMode = \"read write\";\n            }\n        }\n        // From the official documentation: http://www.postgresql.org/docs/9.5/static/sql-set-transaction.html\n        // The DEFERRABLE transaction property has no effect unless the transaction is also SERIALIZABLE and READ ONLY\n        if (tiLevel === isolationLevel.serializable && readOnly) {\n            if (deferrable) {\n                deferrableMode = \"deferrable\";\n            } else {\n                if (deferrable !== undefined) {\n                    deferrableMode = \"not deferrable\";\n                }\n            }\n        }\n        if (level) {\n            begin += \" \" + level;\n        }\n        if (accessMode) {\n            begin += \" \" + accessMode;\n        }\n        if (deferrableMode) {\n            begin += \" \" + deferrableMode;\n        }\n        super({\n            begin,\n            capBegin: begin.toUpperCase()\n        });\n    }\n    /**\r\n     * @method txMode.TransactionMode#begin\r\n     * @description\r\n     * Returns a complete BEGIN statement, according to all the parameters passed into the class.\r\n     *\r\n     * This method is primarily for internal use by the library.\r\n     *\r\n     * @param {boolean} [cap=false]\r\n     * Indicates whether the returned SQL must be capitalized.\r\n     *\r\n     * @returns {string}\r\n     */ begin(cap) {\n        return cap ? this._inner.capBegin : this._inner.begin;\n    }\n}\naddInspection(TransactionMode, function() {\n    return this.begin(true);\n});\n/**\r\n * @namespace txMode\r\n * @description\r\n * Transaction Mode namespace, available as `pgp.txMode`, before and after initializing the library.\r\n *\r\n * Extends the default `BEGIN` with Transaction Mode parameters:\r\n *  - isolation level\r\n *  - access mode\r\n *  - deferrable mode\r\n *\r\n * @property {function} TransactionMode\r\n * {@link txMode.TransactionMode TransactionMode} class constructor.\r\n *\r\n * @property {txMode.isolationLevel} isolationLevel\r\n * Transaction Isolation Level enumerator\r\n *\r\n * @see $[BEGIN]\r\n */ module.exports = {\n    isolationLevel,\n    TransactionMode\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/tx-mode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/types/index.js":
/*!****************************************************!*\
  !*** ./node_modules/pg-promise/lib/types/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { ServerFormatting } = __webpack_require__(/*! ./server-formatting */ \"(rsc)/./node_modules/pg-promise/lib/types/server-formatting.js\");\nconst { PreparedStatement } = __webpack_require__(/*! ./prepared-statement */ \"(rsc)/./node_modules/pg-promise/lib/types/prepared-statement.js\");\nconst { ParameterizedQuery } = __webpack_require__(/*! ./parameterized-query */ \"(rsc)/./node_modules/pg-promise/lib/types/parameterized-query.js\");\nmodule.exports = {\n    ServerFormatting,\n    PreparedStatement,\n    ParameterizedQuery\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvdHlwZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Q0FPQztBQUVELE1BQU0sRUFBQ0EsZ0JBQWdCLEVBQUMsR0FBR0MsbUJBQU9BLENBQUM7QUFDbkMsTUFBTSxFQUFDQyxpQkFBaUIsRUFBQyxHQUFHRCxtQkFBT0EsQ0FBQztBQUNwQyxNQUFNLEVBQUNFLGtCQUFrQixFQUFDLEdBQUdGLG1CQUFPQSxDQUFDO0FBRXJDRyxPQUFPQyxPQUFPLEdBQUc7SUFDYkw7SUFDQUU7SUFDQUM7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2h0bWwtY29udmVydGVyLy4vbm9kZV9tb2R1bGVzL3BnLXByb21pc2UvbGliL3R5cGVzL2luZGV4LmpzP2E5NGYiXSwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIFZpdGFseSBUb21pbG92XHJcbiAqXHJcbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGF0IHRoZSB0b3AtbGV2ZWwgZGlyZWN0b3J5IG9mIHRoaXMgZGlzdHJpYnV0aW9uXHJcbiAqIGZvciBsaWNlbnNpbmcgaW5mb3JtYXRpb24uXHJcbiAqXHJcbiAqIFJlbW92YWwgb3IgbW9kaWZpY2F0aW9uIG9mIHRoaXMgY29weXJpZ2h0IG5vdGljZSBpcyBwcm9oaWJpdGVkLlxyXG4gKi9cclxuXHJcbmNvbnN0IHtTZXJ2ZXJGb3JtYXR0aW5nfSA9IHJlcXVpcmUoJy4vc2VydmVyLWZvcm1hdHRpbmcnKTtcclxuY29uc3Qge1ByZXBhcmVkU3RhdGVtZW50fSA9IHJlcXVpcmUoJy4vcHJlcGFyZWQtc3RhdGVtZW50Jyk7XHJcbmNvbnN0IHtQYXJhbWV0ZXJpemVkUXVlcnl9ID0gcmVxdWlyZSgnLi9wYXJhbWV0ZXJpemVkLXF1ZXJ5Jyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIFNlcnZlckZvcm1hdHRpbmcsXHJcbiAgICBQcmVwYXJlZFN0YXRlbWVudCxcclxuICAgIFBhcmFtZXRlcml6ZWRRdWVyeVxyXG59O1xyXG4iXSwibmFtZXMiOlsiU2VydmVyRm9ybWF0dGluZyIsInJlcXVpcmUiLCJQcmVwYXJlZFN0YXRlbWVudCIsIlBhcmFtZXRlcml6ZWRRdWVyeSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/types/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/types/parameterized-query.js":
/*!******************************************************************!*\
  !*** ./node_modules/pg-promise/lib/types/parameterized-query.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { ServerFormatting } = __webpack_require__(/*! ./server-formatting */ \"(rsc)/./node_modules/pg-promise/lib/types/server-formatting.js\");\nconst { ParameterizedQueryError } = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/pg-promise/lib/errors/index.js\");\nconst { QueryFile } = __webpack_require__(/*! ../query-file */ \"(rsc)/./node_modules/pg-promise/lib/query-file.js\");\nconst { assert } = __webpack_require__(/*! ../assert */ \"(rsc)/./node_modules/pg-promise/lib/assert.js\");\nconst npm = {\n    EOL: (__webpack_require__(/*! os */ \"os\").EOL),\n    utils: __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\")\n};\n/**\r\n * @class ParameterizedQuery\r\n * @description\r\n * Constructs a new {@link ParameterizedQuery} object. All properties can also be set after the object's construction.\r\n *\r\n * This type extends the basic `{text, values}` object, i.e. when the basic object is used with a query method,\r\n * a new {@link ParameterizedQuery} object is created in its place.\r\n *\r\n * The type can be used in place of the `query` parameter, with any query method directly.\r\n *\r\n * The type is available from the library's root: `pgp.ParameterizedQuery`.\r\n *\r\n * @param {string|QueryFile|Object} [options]\r\n * Object configuration options / properties.\r\n *\r\n * @param {string|QueryFile} [options.text] - See property {@link ParameterizedQuery#text text}.\r\n * @param {array} [options.values] - See property {@link ParameterizedQuery#values values}.\r\n * @param {boolean} [options.binary] - See property {@link ParameterizedQuery#binary binary}.\r\n * @param {string} [options.rowMode] - See property {@link ParameterizedQuery#rowMode rowMode}.\r\n *\r\n * @returns {ParameterizedQuery}\r\n *\r\n * @see\r\n * {@link errors.ParameterizedQueryError ParameterizedQueryError}\r\n *\r\n * @example\r\n *\r\n * const {ParameterizedQuery: PQ} = require('pg-promise');\r\n *\r\n * // Creating a complete Parameterized Query with parameters:\r\n * const findUser = new PQ({text: 'SELECT * FROM Users WHERE id = $1', values: [123]});\r\n *\r\n * db.one(findUser)\r\n *     .then(user => {\r\n *         // user found;\r\n *     })\r\n *     .catch(error => {\r\n *         // error;\r\n *     });\r\n *\r\n * @example\r\n *\r\n * const {ParameterizedQuery: PQ} = require('pg-promise');\r\n *\r\n * // Creating a reusable Parameterized Query without values:\r\n * const addUser = new PQ('INSERT INTO Users(name, age) VALUES($1, $2)');\r\n *\r\n * // setting values explicitly:\r\n * addUser.values = ['John', 30];\r\n *\r\n * db.none(addUser)\r\n *     .then(() => {\r\n *         // user added;\r\n *     })\r\n *     .catch(error=> {\r\n *         // error;\r\n *     });\r\n *\r\n * // setting values implicitly, by passing them into the query method:\r\n * db.none(addUser, ['Mike', 25])\r\n *     .then(() => {\r\n *         // user added;\r\n *     })\r\n *     .catch(error=> {\r\n *         // error;\r\n *     });\r\n */ class ParameterizedQuery extends ServerFormatting {\n    constructor(options){\n        if (typeof options === \"string\" || options instanceof QueryFile) {\n            options = {\n                text: options\n            };\n        } else {\n            options = assert(options, [\n                \"text\",\n                \"values\",\n                \"binary\",\n                \"rowMode\"\n            ]);\n        }\n        super(options);\n    }\n}\n/**\r\n * @method ParameterizedQuery#parse\r\n * @description\r\n * Parses the current object and returns a simple `{text, values}`, if successful,\r\n * or else it returns a {@link errors.ParameterizedQueryError ParameterizedQueryError} object.\r\n *\r\n * This method is primarily for internal use by the library.\r\n *\r\n * @returns {{text, values}|errors.ParameterizedQueryError}\r\n */ ParameterizedQuery.prototype.parse = function() {\n    const _i = this._inner, options = _i.options;\n    const qf = options.text instanceof QueryFile ? options.text : null;\n    if (!_i.changed && !qf) {\n        return _i.target;\n    }\n    const errors = [], values = _i.target.values;\n    _i.target = {\n        text: options.text\n    };\n    _i.changed = true;\n    _i.currentError = undefined;\n    if (qf) {\n        qf.prepare();\n        if (qf.error) {\n            errors.push(qf.error);\n        } else {\n            _i.target.text = qf[QueryFile.$query];\n        }\n    }\n    if (!npm.utils.isText(_i.target.text)) {\n        errors.push(\"Property 'text' must be a non-empty text string.\");\n    }\n    if (!npm.utils.isNull(values)) {\n        _i.target.values = values;\n    }\n    if (options.binary !== undefined) {\n        _i.target.binary = !!options.binary;\n    }\n    if (options.rowMode !== undefined) {\n        _i.target.rowMode = options.rowMode;\n    }\n    if (errors.length) {\n        return _i.currentError = new ParameterizedQueryError(errors[0], _i.target);\n    }\n    _i.changed = false;\n    return _i.target;\n};\n/**\r\n * @method ParameterizedQuery#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object's current state.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */ ParameterizedQuery.prototype.toString = function(level) {\n    level = level > 0 ? parseInt(level) : 0;\n    const gap = npm.utils.messageGap(level + 1);\n    const pq = this.parse();\n    const lines = [\n        \"ParameterizedQuery {\"\n    ];\n    if (npm.utils.isText(pq.text)) {\n        lines.push(gap + 'text: \"' + pq.text + '\"');\n    }\n    if (this.values !== undefined) {\n        lines.push(gap + \"values: \" + npm.utils.toJson(this.values));\n    }\n    if (this.binary !== undefined) {\n        lines.push(gap + \"binary: \" + npm.utils.toJson(this.binary));\n    }\n    if (this.rowMode !== undefined) {\n        lines.push(gap + \"rowMode: \" + npm.utils.toJson(this.rowMode));\n    }\n    if (this.error !== undefined) {\n        lines.push(gap + \"error: \" + this.error.toString(level + 1));\n    }\n    lines.push(npm.utils.messageGap(level) + \"}\");\n    return lines.join(npm.EOL);\n};\nmodule.exports = {\n    ParameterizedQuery\n}; /**\r\n * @name ParameterizedQuery#text\r\n * @type {string|QueryFile}\r\n * @description\r\n * A non-empty query string or a {@link QueryFile} object.\r\n *\r\n * Only the basic variables (`$1`, `$2`, etc) can be used in the query, because _Parameterized Queries_\r\n * are formatted on the server side.\r\n */  /**\r\n * @name ParameterizedQuery#values\r\n * @type {array}\r\n * @description\r\n * Query formatting parameters, depending on the type:\r\n *\r\n * - `null` / `undefined` means the query has no formatting parameters\r\n * - `Array` - it is an array of formatting parameters\r\n * - None of the above, means it is a single formatting value, which\r\n *   is then automatically wrapped into an array\r\n */  /**\r\n * @name ParameterizedQuery#binary\r\n * @type {boolean}\r\n * @default undefined\r\n * @description\r\n * Activates binary result mode. The default is the text mode.\r\n *\r\n * @see {@link http://www.postgresql.org/docs/devel/static/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY Extended Query}\r\n */  /**\r\n * @name ParameterizedQuery#rowMode\r\n * @type {string}\r\n * @default undefined\r\n * @description\r\n * Changes the way data arrives to the client, with only one value supported by $[pg]:\r\n *  - `array` will make all data rows arrive as arrays of values. By default, rows arrive as objects.\r\n */  /**\r\n * @name ParameterizedQuery#error\r\n * @type {errors.ParameterizedQueryError}\r\n * @default undefined\r\n * @readonly\r\n * @description\r\n * When in an error state, it is set to a {@link errors.ParameterizedQueryError ParameterizedQueryError} object. Otherwise, it is `undefined`.\r\n *\r\n * This property is primarily for internal use by the library.\r\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/types/parameterized-query.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/types/prepared-statement.js":
/*!*****************************************************************!*\
  !*** ./node_modules/pg-promise/lib/types/prepared-statement.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { ServerFormatting } = __webpack_require__(/*! ./server-formatting */ \"(rsc)/./node_modules/pg-promise/lib/types/server-formatting.js\");\nconst { PreparedStatementError } = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/pg-promise/lib/errors/index.js\");\nconst { QueryFile } = __webpack_require__(/*! ../query-file */ \"(rsc)/./node_modules/pg-promise/lib/query-file.js\");\nconst { assert } = __webpack_require__(/*! ../assert */ \"(rsc)/./node_modules/pg-promise/lib/assert.js\");\nconst npm = {\n    EOL: (__webpack_require__(/*! os */ \"os\").EOL),\n    utils: __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\")\n};\n/**\r\n * @class PreparedStatement\r\n * @description\r\n * Constructs a new $[Prepared Statement] object. All properties can also be set after the object's construction.\r\n *\r\n * This type extends the basic `{name, text, values}` object, i.e. when the basic object is used\r\n * with a query method, a new {@link PreparedStatement} object is created in its place.\r\n *\r\n * The type can be used in place of the `query` parameter, with any query method directly.\r\n *\r\n * The type is available from the library's root: `pgp.PreparedStatement`.\r\n *\r\n * @param {Object} [options]\r\n * Object configuration options / properties.\r\n *\r\n * @param {string} [options.name] - See property {@link PreparedStatement#name name}.\r\n * @param {string|QueryFile} [options.text] - See property {@link PreparedStatement#text text}.\r\n * @param {array} [options.values] - See property {@link PreparedStatement#values values}.\r\n * @param {boolean} [options.binary] - See property {@link PreparedStatement#binary binary}.\r\n * @param {string} [options.rowMode] - See property {@link PreparedStatement#rowMode rowMode}.\r\n * @param {number} [options.rows] - See property {@link PreparedStatement#rows rows}.\r\n *\r\n * @returns {PreparedStatement}\r\n *\r\n * @see\r\n * {@link errors.PreparedStatementError PreparedStatementError},\r\n * {@link http://www.postgresql.org/docs/9.6/static/sql-prepare.html PostgreSQL Prepared Statements}\r\n *\r\n * @example\r\n *\r\n * const {PreparedStatement: PS} = require('pg-promise');\r\n *\r\n * // Creating a complete Prepared Statement with parameters:\r\n * const findUser = new PS({name: 'find-user', text: 'SELECT * FROM Users WHERE id = $1', values: [123]});\r\n *\r\n * db.one(findUser)\r\n *     .then(user => {\r\n *         // user found;\r\n *     })\r\n *     .catch(error => {\r\n *         // error;\r\n *     });\r\n *\r\n * @example\r\n *\r\n * const {PreparedStatement: PS} = require('pg-promise');\r\n *\r\n * // Creating a reusable Prepared Statement without values:\r\n * const addUser = new PS({name: 'add-user', text: 'INSERT INTO Users(name, age) VALUES($1, $2)'});\r\n *\r\n * // setting values explicitly:\r\n * addUser.values = ['John', 30];\r\n *\r\n * db.none(addUser)\r\n *     .then(() => {\r\n *         // user added;\r\n *     })\r\n *     .catch(error => {\r\n *         // error;\r\n *     });\r\n *\r\n * // setting values implicitly, by passing them into the query method:\r\n * db.none(addUser, ['Mike', 25])\r\n *     .then(() => {\r\n *         // user added;\r\n *     })\r\n *     .catch(error => {\r\n *         // error;\r\n *     });\r\n */ class PreparedStatement extends ServerFormatting {\n    constructor(options){\n        options = assert(options, [\n            \"name\",\n            \"text\",\n            \"values\",\n            \"binary\",\n            \"rowMode\",\n            \"rows\"\n        ]);\n        super(options);\n    }\n    /**\r\n     * @name PreparedStatement#name\r\n     * @type {string}\r\n     * @description\r\n     * An arbitrary name given to this particular prepared statement. It must be unique within a single session and is\r\n     * subsequently used to execute or deallocate a previously prepared statement.\r\n     */ get name() {\n        return this._inner.options.name;\n    }\n    set name(value) {\n        const _i = this._inner;\n        if (value !== _i.options.name) {\n            _i.options.name = value;\n            _i.changed = true;\n        }\n    }\n    /**\r\n     * @name PreparedStatement#rows\r\n     * @type {number}\r\n     * @description\r\n     * Number of rows to return at a time from a Prepared Statement's portal.\r\n     * The default is 0, which means that all rows must be returned at once.\r\n     */ get rows() {\n        return this._inner.options.rows;\n    }\n    set rows(value) {\n        const _i = this._inner;\n        if (value !== _i.options.rows) {\n            _i.options.rows = value;\n            _i.changed = true;\n        }\n    }\n}\n/**\r\n * @method PreparedStatement#parse\r\n * @description\r\n * Parses the current object and returns a simple `{name, text, values}`, if successful,\r\n * or else it returns a {@link errors.PreparedStatementError PreparedStatementError} object.\r\n *\r\n * This method is primarily for internal use by the library.\r\n *\r\n * @returns {{name, text, values}|errors.PreparedStatementError}\r\n */ PreparedStatement.prototype.parse = function() {\n    const _i = this._inner, options = _i.options;\n    const qf = options.text instanceof QueryFile ? options.text : null;\n    if (!_i.changed && !qf) {\n        return _i.target;\n    }\n    const errors = [], values = _i.target.values;\n    _i.target = {\n        name: options.name,\n        text: options.text\n    };\n    _i.changed = true;\n    _i.currentError = undefined;\n    if (!npm.utils.isText(_i.target.name)) {\n        errors.push(\"Property 'name' must be a non-empty text string.\");\n    }\n    if (qf) {\n        qf.prepare();\n        if (qf.error) {\n            errors.push(qf.error);\n        } else {\n            _i.target.text = qf[QueryFile.$query];\n        }\n    }\n    if (!npm.utils.isText(_i.target.text)) {\n        errors.push(\"Property 'text' must be a non-empty text string.\");\n    }\n    if (!npm.utils.isNull(values)) {\n        _i.target.values = values;\n    }\n    if (options.binary !== undefined) {\n        _i.target.binary = !!options.binary;\n    }\n    if (options.rowMode !== undefined) {\n        _i.target.rowMode = options.rowMode;\n    }\n    if (options.rows !== undefined) {\n        _i.target.rows = options.rows;\n    }\n    if (errors.length) {\n        return _i.currentError = new PreparedStatementError(errors[0], _i.target);\n    }\n    _i.changed = false;\n    return _i.target;\n};\n/**\r\n * @method PreparedStatement#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object's current state.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */ PreparedStatement.prototype.toString = function(level) {\n    level = level > 0 ? parseInt(level) : 0;\n    const gap = npm.utils.messageGap(level + 1);\n    const ps = this.parse();\n    const lines = [\n        \"PreparedStatement {\",\n        gap + \"name: \" + npm.utils.toJson(this.name)\n    ];\n    if (npm.utils.isText(ps.text)) {\n        lines.push(gap + 'text: \"' + ps.text + '\"');\n    }\n    if (this.values !== undefined) {\n        lines.push(gap + \"values: \" + npm.utils.toJson(this.values));\n    }\n    if (this.binary !== undefined) {\n        lines.push(gap + \"binary: \" + npm.utils.toJson(this.binary));\n    }\n    if (this.rowMode !== undefined) {\n        lines.push(gap + \"rowMode: \" + npm.utils.toJson(this.rowMode));\n    }\n    if (this.rows !== undefined) {\n        lines.push(gap + \"rows: \" + npm.utils.toJson(this.rows));\n    }\n    if (this.error) {\n        lines.push(gap + \"error: \" + this.error.toString(level + 1));\n    }\n    lines.push(npm.utils.messageGap(level) + \"}\");\n    return lines.join(npm.EOL);\n};\nmodule.exports = {\n    PreparedStatement\n}; /**\r\n * @name PreparedStatement#text\r\n * @type {string|QueryFile}\r\n * @description\r\n * A non-empty query string or a {@link QueryFile} object.\r\n *\r\n * Only the basic variables (`$1`, `$2`, etc) can be used in the query, because $[Prepared Statements]\r\n * are formatted on the server side.\r\n *\r\n * Changing this property for the same {@link PreparedStatement#name name} will have no effect, because queries\r\n * for Prepared Statements are cached by the server, with {@link PreparedStatement#name name} being the cache key.\r\n */  /**\r\n * @name PreparedStatement#values\r\n * @type {array}\r\n * @description\r\n * Query formatting parameters, depending on the type:\r\n *\r\n * - `null` / `undefined` means the query has no formatting parameters\r\n * - `Array` - it is an array of formatting parameters\r\n * - None of the above, means it is a single formatting value, which\r\n *   is then automatically wrapped into an array\r\n */  /**\r\n * @name PreparedStatement#binary\r\n * @type {boolean}\r\n * @default undefined\r\n * @description\r\n * Activates binary result mode. The default is the text mode.\r\n *\r\n * @see {@link http://www.postgresql.org/docs/devel/static/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY Extended Query}\r\n */  /**\r\n * @name PreparedStatement#rowMode\r\n * @type {string}\r\n * @default undefined\r\n * @description\r\n * Changes the way data arrives to the client, with only one value supported by $[pg]:\r\n *  - `array` will make all data rows arrive as arrays of values. By default, rows arrive as objects.\r\n */  /**\r\n * @name PreparedStatement#error\r\n * @type {errors.PreparedStatementError}\r\n * @default undefined\r\n * @description\r\n * When in an error state, it is set to a {@link errors.PreparedStatementError PreparedStatementError} object. Otherwise, it is `undefined`.\r\n *\r\n * This property is primarily for internal use by the library.\r\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/types/prepared-statement.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/types/server-formatting.js":
/*!****************************************************************!*\
  !*** ./node_modules/pg-promise/lib/types/server-formatting.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { InnerState } = __webpack_require__(/*! ../inner-state */ \"(rsc)/./node_modules/pg-promise/lib/inner-state.js\");\nconst { addInspection } = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\");\nconst utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\");\n/**\r\n * @private\r\n * @class ServerFormatting\r\n */ class ServerFormatting extends InnerState {\n    constructor(options){\n        const _inner = {\n            options,\n            changed: true,\n            currentError: undefined,\n            target: {}\n        };\n        super(_inner);\n        setValues.call(this, options.values);\n    }\n    get error() {\n        return this._inner.currentError;\n    }\n    get text() {\n        return this._inner.options.text;\n    }\n    set text(value) {\n        const _i = this._inner;\n        if (value !== _i.options.text) {\n            _i.options.text = value;\n            _i.changed = true;\n        }\n    }\n    get binary() {\n        return this._inner.options.binary;\n    }\n    set binary(value) {\n        const _i = this._inner;\n        if (value !== _i.options.binary) {\n            _i.options.binary = value;\n            _i.changed = true;\n        }\n    }\n    get rowMode() {\n        return this._inner.options.rowMode;\n    }\n    set rowMode(value) {\n        const _i = this._inner;\n        if (value !== _i.options.rowMode) {\n            _i.options.rowMode = value;\n            _i.changed = true;\n        }\n    }\n    get values() {\n        return this._inner.target.values;\n    }\n    set values(values) {\n        setValues.call(this, values);\n    }\n}\n/**\r\n * @member ServerFormatting#parse\r\n */ function setValues(v) {\n    const target = this._inner.target;\n    if (Array.isArray(v)) {\n        if (v.length) {\n            target.values = v;\n        } else {\n            delete target.values;\n        }\n    } else {\n        if (utils.isNull(v)) {\n            delete target.values;\n        } else {\n            target.values = [\n                v\n            ];\n        }\n    }\n}\naddInspection(ServerFormatting, function() {\n    return this.toString();\n});\nmodule.exports = {\n    ServerFormatting\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvdHlwZXMvc2VydmVyLWZvcm1hdHRpbmcuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sRUFBQ0EsVUFBVSxFQUFDLEdBQUdDLG1CQUFPQSxDQUFDO0FBQzdCLE1BQU0sRUFBQ0MsYUFBYSxFQUFDLEdBQUdELG1CQUFPQSxDQUFDO0FBQ2hDLE1BQU1FLFFBQVFGLG1CQUFPQSxDQUFDO0FBRXRCOzs7Q0FHQyxHQUNELE1BQU1HLHlCQUF5Qko7SUFFM0JLLFlBQVlDLE9BQU8sQ0FBRTtRQUNqQixNQUFNQyxTQUFTO1lBQ1hEO1lBQ0FFLFNBQVM7WUFDVEMsY0FBY0M7WUFDZEMsUUFBUSxDQUFDO1FBQ2I7UUFDQSxLQUFLLENBQUNKO1FBQ05LLFVBQVVDLElBQUksQ0FBQyxJQUFJLEVBQUVQLFFBQVFRLE1BQU07SUFDdkM7SUFFQSxJQUFJQyxRQUFRO1FBQ1IsT0FBTyxJQUFJLENBQUNSLE1BQU0sQ0FBQ0UsWUFBWTtJQUNuQztJQUVBLElBQUlPLE9BQU87UUFDUCxPQUFPLElBQUksQ0FBQ1QsTUFBTSxDQUFDRCxPQUFPLENBQUNVLElBQUk7SUFDbkM7SUFFQSxJQUFJQSxLQUFLQyxLQUFLLEVBQUU7UUFDWixNQUFNQyxLQUFLLElBQUksQ0FBQ1gsTUFBTTtRQUN0QixJQUFJVSxVQUFVQyxHQUFHWixPQUFPLENBQUNVLElBQUksRUFBRTtZQUMzQkUsR0FBR1osT0FBTyxDQUFDVSxJQUFJLEdBQUdDO1lBQ2xCQyxHQUFHVixPQUFPLEdBQUc7UUFDakI7SUFDSjtJQUVBLElBQUlXLFNBQVM7UUFDVCxPQUFPLElBQUksQ0FBQ1osTUFBTSxDQUFDRCxPQUFPLENBQUNhLE1BQU07SUFDckM7SUFFQSxJQUFJQSxPQUFPRixLQUFLLEVBQUU7UUFDZCxNQUFNQyxLQUFLLElBQUksQ0FBQ1gsTUFBTTtRQUN0QixJQUFJVSxVQUFVQyxHQUFHWixPQUFPLENBQUNhLE1BQU0sRUFBRTtZQUM3QkQsR0FBR1osT0FBTyxDQUFDYSxNQUFNLEdBQUdGO1lBQ3BCQyxHQUFHVixPQUFPLEdBQUc7UUFDakI7SUFDSjtJQUVBLElBQUlZLFVBQVU7UUFDVixPQUFPLElBQUksQ0FBQ2IsTUFBTSxDQUFDRCxPQUFPLENBQUNjLE9BQU87SUFDdEM7SUFFQSxJQUFJQSxRQUFRSCxLQUFLLEVBQUU7UUFDZixNQUFNQyxLQUFLLElBQUksQ0FBQ1gsTUFBTTtRQUN0QixJQUFJVSxVQUFVQyxHQUFHWixPQUFPLENBQUNjLE9BQU8sRUFBRTtZQUM5QkYsR0FBR1osT0FBTyxDQUFDYyxPQUFPLEdBQUdIO1lBQ3JCQyxHQUFHVixPQUFPLEdBQUc7UUFDakI7SUFDSjtJQUVBLElBQUlNLFNBQVM7UUFDVCxPQUFPLElBQUksQ0FBQ1AsTUFBTSxDQUFDSSxNQUFNLENBQUNHLE1BQU07SUFDcEM7SUFFQSxJQUFJQSxPQUFPQSxNQUFNLEVBQUU7UUFDZkYsVUFBVUMsSUFBSSxDQUFDLElBQUksRUFBRUM7SUFDekI7QUFFSjtBQUVBOztDQUVDLEdBRUQsU0FBU0YsVUFBVVMsQ0FBQztJQUNoQixNQUFNVixTQUFTLElBQUksQ0FBQ0osTUFBTSxDQUFDSSxNQUFNO0lBQ2pDLElBQUlXLE1BQU1DLE9BQU8sQ0FBQ0YsSUFBSTtRQUNsQixJQUFJQSxFQUFFRyxNQUFNLEVBQUU7WUFDVmIsT0FBT0csTUFBTSxHQUFHTztRQUNwQixPQUFPO1lBQ0gsT0FBT1YsT0FBT0csTUFBTTtRQUN4QjtJQUNKLE9BQU87UUFDSCxJQUFJWCxNQUFNc0IsTUFBTSxDQUFDSixJQUFJO1lBQ2pCLE9BQU9WLE9BQU9HLE1BQU07UUFDeEIsT0FBTztZQUNISCxPQUFPRyxNQUFNLEdBQUc7Z0JBQUNPO2FBQUU7UUFDdkI7SUFDSjtBQUNKO0FBRUFuQixjQUFjRSxrQkFBa0I7SUFDNUIsT0FBTyxJQUFJLENBQUNzQixRQUFRO0FBQ3hCO0FBRUFDLE9BQU9DLE9BQU8sR0FBRztJQUFDeEI7QUFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odG1sLWNvbnZlcnRlci8uL25vZGVfbW9kdWxlcy9wZy1wcm9taXNlL2xpYi90eXBlcy9zZXJ2ZXItZm9ybWF0dGluZy5qcz9mNTRhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtJbm5lclN0YXRlfSA9IHJlcXVpcmUoJy4uL2lubmVyLXN0YXRlJyk7XHJcbmNvbnN0IHthZGRJbnNwZWN0aW9ufSA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XHJcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcclxuXHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAY2xhc3MgU2VydmVyRm9ybWF0dGluZ1xyXG4gKi9cclxuY2xhc3MgU2VydmVyRm9ybWF0dGluZyBleHRlbmRzIElubmVyU3RhdGUge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBfaW5uZXIgPSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMsXHJcbiAgICAgICAgICAgIGNoYW5nZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIGN1cnJlbnRFcnJvcjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICB0YXJnZXQ6IHt9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzdXBlcihfaW5uZXIpO1xyXG4gICAgICAgIHNldFZhbHVlcy5jYWxsKHRoaXMsIG9wdGlvbnMudmFsdWVzKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZXJyb3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lubmVyLmN1cnJlbnRFcnJvcjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdGV4dCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5uZXIub3B0aW9ucy50ZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIHNldCB0ZXh0KHZhbHVlKSB7XHJcbiAgICAgICAgY29uc3QgX2kgPSB0aGlzLl9pbm5lcjtcclxuICAgICAgICBpZiAodmFsdWUgIT09IF9pLm9wdGlvbnMudGV4dCkge1xyXG4gICAgICAgICAgICBfaS5vcHRpb25zLnRleHQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgX2kuY2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBiaW5hcnkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lubmVyLm9wdGlvbnMuYmluYXJ5O1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBiaW5hcnkodmFsdWUpIHtcclxuICAgICAgICBjb25zdCBfaSA9IHRoaXMuX2lubmVyO1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gX2kub3B0aW9ucy5iaW5hcnkpIHtcclxuICAgICAgICAgICAgX2kub3B0aW9ucy5iaW5hcnkgPSB2YWx1ZTtcclxuICAgICAgICAgICAgX2kuY2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCByb3dNb2RlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbm5lci5vcHRpb25zLnJvd01vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHJvd01vZGUodmFsdWUpIHtcclxuICAgICAgICBjb25zdCBfaSA9IHRoaXMuX2lubmVyO1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gX2kub3B0aW9ucy5yb3dNb2RlKSB7XHJcbiAgICAgICAgICAgIF9pLm9wdGlvbnMucm93TW9kZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICBfaS5jaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHZhbHVlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5uZXIudGFyZ2V0LnZhbHVlcztcclxuICAgIH1cclxuXHJcbiAgICBzZXQgdmFsdWVzKHZhbHVlcykge1xyXG4gICAgICAgIHNldFZhbHVlcy5jYWxsKHRoaXMsIHZhbHVlcyk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4vKipcclxuICogQG1lbWJlciBTZXJ2ZXJGb3JtYXR0aW5nI3BhcnNlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gc2V0VmFsdWVzKHYpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuX2lubmVyLnRhcmdldDtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHYpKSB7XHJcbiAgICAgICAgaWYgKHYubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRhcmdldC52YWx1ZXMgPSB2O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXQudmFsdWVzO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHV0aWxzLmlzTnVsbCh2KSkge1xyXG4gICAgICAgICAgICBkZWxldGUgdGFyZ2V0LnZhbHVlcztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0YXJnZXQudmFsdWVzID0gW3ZdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuYWRkSW5zcGVjdGlvbihTZXJ2ZXJGb3JtYXR0aW5nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1NlcnZlckZvcm1hdHRpbmd9O1xyXG4iXSwibmFtZXMiOlsiSW5uZXJTdGF0ZSIsInJlcXVpcmUiLCJhZGRJbnNwZWN0aW9uIiwidXRpbHMiLCJTZXJ2ZXJGb3JtYXR0aW5nIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiX2lubmVyIiwiY2hhbmdlZCIsImN1cnJlbnRFcnJvciIsInVuZGVmaW5lZCIsInRhcmdldCIsInNldFZhbHVlcyIsImNhbGwiLCJ2YWx1ZXMiLCJlcnJvciIsInRleHQiLCJ2YWx1ZSIsIl9pIiwiYmluYXJ5Iiwicm93TW9kZSIsInYiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJpc051bGwiLCJ0b1N0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/types/server-formatting.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/utils/color.js":
/*!****************************************************!*\
  !*** ./node_modules/pg-promise/lib/utils/color.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst util = __webpack_require__(/*! util */ \"util\");\nclass ColorConsole {\n    static log() {\n        ColorConsole.writeNormal([\n            ...arguments\n        ], 39); // white\n    }\n    static info() {\n        ColorConsole.writeNormal([\n            ...arguments\n        ], 36); // cyan\n    }\n    static success() {\n        ColorConsole.writeNormal([\n            ...arguments\n        ], 32); // green\n    }\n    static warn() {\n        ColorConsole.writeNormal([\n            ...arguments\n        ], 33); // yellow\n    }\n    static error() {\n        ColorConsole.writeError([\n            ...arguments\n        ], 31); // red\n    }\n    static writeNormal(params, color) {\n        // istanbul ignore else\n        if (process.stdout.isTTY) {\n            console.log.apply(null, ColorConsole.formatColor(params, color)); // eslint-disable-line no-console\n        } else {\n            console.log.apply(null, params); // eslint-disable-line no-console\n        }\n    }\n    static writeError(params, color) {\n        // istanbul ignore else\n        if (process.stderr.isTTY) {\n            console.error.apply(null, ColorConsole.formatColor(params, color)); // eslint-disable-line no-console\n        } else {\n            console.error.apply(null, params); // eslint-disable-line no-console\n        }\n    }\n    static formatColor(args, color) {\n        return args.map((a)=>`\\x1b[${color}m${util.format(a)}\\x1b[0m`);\n    }\n}\nColorConsole.log.bright = function() {\n    ColorConsole.writeNormal([\n        ...arguments\n    ], 97); // light white\n};\nColorConsole.info.bright = function() {\n    ColorConsole.writeNormal([\n        ...arguments\n    ], 93); // light cyan\n};\nColorConsole.success.bright = function() {\n    ColorConsole.writeNormal([\n        ...arguments\n    ], 92); // light green\n};\nColorConsole.warn.bright = function() {\n    ColorConsole.writeNormal([\n        ...arguments\n    ], 93); // light yellow\n};\nColorConsole.error.bright = function() {\n    ColorConsole.writeError([\n        ...arguments\n    ], 91); // light red\n};\nmodule.exports = {\n    ColorConsole\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvdXRpbHMvY29sb3IuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLE9BQU9DLG1CQUFPQSxDQUFDO0FBRXJCLE1BQU1DO0lBRUYsT0FBT0MsTUFBTTtRQUNURCxhQUFhRSxXQUFXLENBQUM7ZUFBSUM7U0FBVSxFQUFFLEtBQUssUUFBUTtJQUMxRDtJQUVBLE9BQU9DLE9BQU87UUFDVkosYUFBYUUsV0FBVyxDQUFDO2VBQUlDO1NBQVUsRUFBRSxLQUFLLE9BQU87SUFDekQ7SUFFQSxPQUFPRSxVQUFVO1FBQ2JMLGFBQWFFLFdBQVcsQ0FBQztlQUFJQztTQUFVLEVBQUUsS0FBSyxRQUFRO0lBQzFEO0lBRUEsT0FBT0csT0FBTztRQUNWTixhQUFhRSxXQUFXLENBQUM7ZUFBSUM7U0FBVSxFQUFFLEtBQUssU0FBUztJQUMzRDtJQUVBLE9BQU9JLFFBQVE7UUFDWFAsYUFBYVEsVUFBVSxDQUFDO2VBQUlMO1NBQVUsRUFBRSxLQUFLLE1BQU07SUFDdkQ7SUFFQSxPQUFPRCxZQUFZTyxNQUFNLEVBQUVDLEtBQUssRUFBRTtRQUM5Qix1QkFBdUI7UUFDdkIsSUFBSUMsUUFBUUMsTUFBTSxDQUFDQyxLQUFLLEVBQUU7WUFDdEJDLFFBQVFiLEdBQUcsQ0FBQ2MsS0FBSyxDQUFDLE1BQU1mLGFBQWFnQixXQUFXLENBQUNQLFFBQVFDLFNBQVMsaUNBQWlDO1FBQ3ZHLE9BQU87WUFDSEksUUFBUWIsR0FBRyxDQUFDYyxLQUFLLENBQUMsTUFBTU4sU0FBUyxpQ0FBaUM7UUFDdEU7SUFDSjtJQUVBLE9BQU9ELFdBQVdDLE1BQU0sRUFBRUMsS0FBSyxFQUFFO1FBQzdCLHVCQUF1QjtRQUN2QixJQUFJQyxRQUFRTSxNQUFNLENBQUNKLEtBQUssRUFBRTtZQUN0QkMsUUFBUVAsS0FBSyxDQUFDUSxLQUFLLENBQUMsTUFBTWYsYUFBYWdCLFdBQVcsQ0FBQ1AsUUFBUUMsU0FBUyxpQ0FBaUM7UUFDekcsT0FBTztZQUNISSxRQUFRUCxLQUFLLENBQUNRLEtBQUssQ0FBQyxNQUFNTixTQUFTLGlDQUFpQztRQUN4RTtJQUNKO0lBRUEsT0FBT08sWUFBWUUsSUFBSSxFQUFFUixLQUFLLEVBQUU7UUFDNUIsT0FBT1EsS0FBS0MsR0FBRyxDQUFDQyxDQUFBQSxJQUFLLENBQUMsS0FBSyxFQUFFVixNQUFNLENBQUMsRUFBRVosS0FBS3VCLE1BQU0sQ0FBQ0QsR0FBRyxPQUFPLENBQUM7SUFDakU7QUFDSjtBQUVBcEIsYUFBYUMsR0FBRyxDQUFDcUIsTUFBTSxHQUFHO0lBQ3RCdEIsYUFBYUUsV0FBVyxDQUFDO1dBQUlDO0tBQVUsRUFBRSxLQUFLLGNBQWM7QUFDaEU7QUFFQUgsYUFBYUksSUFBSSxDQUFDa0IsTUFBTSxHQUFHO0lBQ3ZCdEIsYUFBYUUsV0FBVyxDQUFDO1dBQUlDO0tBQVUsRUFBRSxLQUFLLGFBQWE7QUFDL0Q7QUFFQUgsYUFBYUssT0FBTyxDQUFDaUIsTUFBTSxHQUFHO0lBQzFCdEIsYUFBYUUsV0FBVyxDQUFDO1dBQUlDO0tBQVUsRUFBRSxLQUFLLGNBQWM7QUFDaEU7QUFFQUgsYUFBYU0sSUFBSSxDQUFDZ0IsTUFBTSxHQUFHO0lBQ3ZCdEIsYUFBYUUsV0FBVyxDQUFDO1dBQUlDO0tBQVUsRUFBRSxLQUFLLGVBQWU7QUFDakU7QUFFQUgsYUFBYU8sS0FBSyxDQUFDZSxNQUFNLEdBQUc7SUFDeEJ0QixhQUFhUSxVQUFVLENBQUM7V0FBSUw7S0FBVSxFQUFFLEtBQUssWUFBWTtBQUM3RDtBQUVBb0IsT0FBT0MsT0FBTyxHQUFHO0lBQUN4QjtBQUFZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHRtbC1jb252ZXJ0ZXIvLi9ub2RlX21vZHVsZXMvcGctcHJvbWlzZS9saWIvdXRpbHMvY29sb3IuanM/OTc5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xyXG5cclxuY2xhc3MgQ29sb3JDb25zb2xlIHtcclxuXHJcbiAgICBzdGF0aWMgbG9nKCkge1xyXG4gICAgICAgIENvbG9yQ29uc29sZS53cml0ZU5vcm1hbChbLi4uYXJndW1lbnRzXSwgMzkpOyAvLyB3aGl0ZVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBpbmZvKCkge1xyXG4gICAgICAgIENvbG9yQ29uc29sZS53cml0ZU5vcm1hbChbLi4uYXJndW1lbnRzXSwgMzYpOyAvLyBjeWFuXHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHN1Y2Nlc3MoKSB7XHJcbiAgICAgICAgQ29sb3JDb25zb2xlLndyaXRlTm9ybWFsKFsuLi5hcmd1bWVudHNdLCAzMik7IC8vIGdyZWVuXHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHdhcm4oKSB7XHJcbiAgICAgICAgQ29sb3JDb25zb2xlLndyaXRlTm9ybWFsKFsuLi5hcmd1bWVudHNdLCAzMyk7IC8vIHllbGxvd1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBlcnJvcigpIHtcclxuICAgICAgICBDb2xvckNvbnNvbGUud3JpdGVFcnJvcihbLi4uYXJndW1lbnRzXSwgMzEpOyAvLyByZWRcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgd3JpdGVOb3JtYWwocGFyYW1zLCBjb2xvcikge1xyXG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlXHJcbiAgICAgICAgaWYgKHByb2Nlc3Muc3Rkb3V0LmlzVFRZKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KG51bGwsIENvbG9yQ29uc29sZS5mb3JtYXRDb2xvcihwYXJhbXMsIGNvbG9yKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KG51bGwsIHBhcmFtcyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgd3JpdGVFcnJvcihwYXJhbXMsIGNvbG9yKSB7XHJcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIGVsc2VcclxuICAgICAgICBpZiAocHJvY2Vzcy5zdGRlcnIuaXNUVFkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvci5hcHBseShudWxsLCBDb2xvckNvbnNvbGUuZm9ybWF0Q29sb3IocGFyYW1zLCBjb2xvcikpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yLmFwcGx5KG51bGwsIHBhcmFtcyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZm9ybWF0Q29sb3IoYXJncywgY29sb3IpIHtcclxuICAgICAgICByZXR1cm4gYXJncy5tYXAoYSA9PiBgXFx4MWJbJHtjb2xvcn1tJHt1dGlsLmZvcm1hdChhKX1cXHgxYlswbWApO1xyXG4gICAgfVxyXG59XHJcblxyXG5Db2xvckNvbnNvbGUubG9nLmJyaWdodCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIENvbG9yQ29uc29sZS53cml0ZU5vcm1hbChbLi4uYXJndW1lbnRzXSwgOTcpOyAvLyBsaWdodCB3aGl0ZVxyXG59O1xyXG5cclxuQ29sb3JDb25zb2xlLmluZm8uYnJpZ2h0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgQ29sb3JDb25zb2xlLndyaXRlTm9ybWFsKFsuLi5hcmd1bWVudHNdLCA5Myk7IC8vIGxpZ2h0IGN5YW5cclxufTtcclxuXHJcbkNvbG9yQ29uc29sZS5zdWNjZXNzLmJyaWdodCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIENvbG9yQ29uc29sZS53cml0ZU5vcm1hbChbLi4uYXJndW1lbnRzXSwgOTIpOyAvLyBsaWdodCBncmVlblxyXG59O1xyXG5cclxuQ29sb3JDb25zb2xlLndhcm4uYnJpZ2h0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgQ29sb3JDb25zb2xlLndyaXRlTm9ybWFsKFsuLi5hcmd1bWVudHNdLCA5Myk7IC8vIGxpZ2h0IHllbGxvd1xyXG59O1xyXG5cclxuQ29sb3JDb25zb2xlLmVycm9yLmJyaWdodCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIENvbG9yQ29uc29sZS53cml0ZUVycm9yKFsuLi5hcmd1bWVudHNdLCA5MSk7IC8vIGxpZ2h0IHJlZFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7Q29sb3JDb25zb2xlfTtcclxuIl0sIm5hbWVzIjpbInV0aWwiLCJyZXF1aXJlIiwiQ29sb3JDb25zb2xlIiwibG9nIiwid3JpdGVOb3JtYWwiLCJhcmd1bWVudHMiLCJpbmZvIiwic3VjY2VzcyIsIndhcm4iLCJlcnJvciIsIndyaXRlRXJyb3IiLCJwYXJhbXMiLCJjb2xvciIsInByb2Nlc3MiLCJzdGRvdXQiLCJpc1RUWSIsImNvbnNvbGUiLCJhcHBseSIsImZvcm1hdENvbG9yIiwic3RkZXJyIiwiYXJncyIsIm1hcCIsImEiLCJmb3JtYXQiLCJicmlnaHQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/utils/color.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/utils/index.js":
/*!****************************************************!*\
  !*** ./node_modules/pg-promise/lib/utils/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst npm = {\n    path: __webpack_require__(/*! path */ \"path\"),\n    util: __webpack_require__(/*! util */ \"util\"),\n    patterns: __webpack_require__(/*! ../patterns */ \"(rsc)/./node_modules/pg-promise/lib/patterns.js\")\n};\n////////////////////////////////////////////\n// Simpler check for null/undefined;\nfunction isNull(value) {\n    return value === null || value === undefined;\n}\n////////////////////////////////////////////////////////\n// Verifies parameter for being a non-empty text string;\nfunction isText(txt) {\n    return txt && typeof txt === \"string\" && /\\S/.test(txt);\n}\n///////////////////////////////////////////////////////////\n// Approximates the environment as being for development.\n//\n// Proper configuration is having NODE_ENV = 'development', but this\n// method only checks for 'dev' being present, and regardless of the case.\nfunction isDev() {\n    const env = global.process.env.NODE_ENV || \"\";\n    return env.toLowerCase().indexOf(\"dev\") !== -1;\n}\n/////////////////////////////////////////////\n// Adds properties from source to the target,\n// making them read-only and enumerable.\nfunction addReadProperties(target, source) {\n    for(const p in source){\n        addReadProp(target, p, source[p]);\n    }\n}\n///////////////////////////////////////////////////////\n// Adds a read-only, non-deletable enumerable property.\nfunction addReadProp(obj, name, value, hidden) {\n    Object.defineProperty(obj, name, {\n        value,\n        configurable: false,\n        enumerable: !hidden,\n        writable: false\n    });\n}\n//////////////////////////////////////////////////////////////\n// Converts a connection string or object into its safe copy:\n// if password is present, it is masked with symbol '#'.\nfunction getSafeConnection(cn) {\n    const maskPassword = (cs)=>cs.replace(/:(?![/])([^@]+)/, (_, m)=>\":\" + new Array(m.length + 1).join(\"#\"));\n    if (typeof cn === \"object\") {\n        const copy = Object.assign({}, cn);\n        if (typeof copy.password === \"string\") {\n            copy.password = copy.password.replace(/./g, \"#\");\n        }\n        if (typeof copy.connectionString === \"string\") {\n            copy.connectionString = maskPassword(copy.connectionString);\n        }\n        return copy;\n    }\n    return maskPassword(cn);\n}\n///////////////////////////////////////////\n// Returns a space gap for console output;\nfunction messageGap(level) {\n    return \" \".repeat(level * 4);\n}\n/////////////////////////////////////////\n// Provides platform-neutral inheritance;\nfunction inherits(child, parent) {\n    child.prototype.__proto__ = parent.prototype;\n}\n// istanbul ignore next\nfunction getLocalStack(startIdx, maxLines) {\n    // from the call stack, we take up to maximum lines,\n    // starting with specified line index:\n    startIdx = startIdx || 0;\n    const endIdx = maxLines > 0 ? startIdx + maxLines : undefined;\n    return new Error().stack.split(\"\\n\").filter((line)=>line.match(/\\(.+\\)/)).slice(startIdx, endIdx).join(\"\\n\");\n}\n//////////////////////////////\n// Internal error container;\nfunction InternalError(error) {\n    this.error = error;\n}\n/////////////////////////////////////////////////////////////////\n// Parses a property name, and gets its name from the object,\n// if the property exists. Returns object {valid, has, target, value}:\n//  - valid - true/false, whether the syntax is valid\n//  - has - a flag that property exists; set when 'valid' = true\n//  - target - the target object that contains the property; set when 'has' = true\n//  - value - the value; set when 'has' = true\nfunction getIfHas(obj, prop) {\n    const result = {\n        valid: true\n    };\n    if (prop.indexOf(\".\") === -1) {\n        result.has = prop in obj;\n        result.target = obj;\n        if (result.has) {\n            result.value = obj[prop];\n        }\n    } else {\n        const names = prop.split(\".\");\n        let missing, target;\n        for(let i = 0; i < names.length; i++){\n            const n = names[i];\n            if (!n) {\n                result.valid = false;\n                return result;\n            }\n            if (!missing && hasProperty(obj, n)) {\n                target = obj;\n                obj = obj[n];\n            } else {\n                missing = true;\n            }\n        }\n        result.has = !missing;\n        if (result.has) {\n            result.target = target;\n            result.value = obj;\n        }\n    }\n    return result;\n}\n/////////////////////////////////////////////////////////////////////////\n// Checks if the property exists in the object or value or its prototype;\nfunction hasProperty(value, prop) {\n    return value && typeof value === \"object\" && prop in value || value !== null && value !== undefined && value[prop] !== undefined;\n}\n////////////////////////////////////////////////////////\n// Adds prototype inspection\nfunction addInspection(type, cb) {\n    type.prototype[npm.util.inspect.custom] = cb;\n}\n/////////////////////////////////////////////////////////////////////////////////////////\n// Identifies a general connectivity error, after which no more queries can be executed.\n// This is for detecting when to skip executing ROLLBACK for a failed transaction.\nfunction isConnectivityError(err) {\n    const code = err && typeof err.code === \"string\" && err.code;\n    const cls = code && code.substr(0, 2); // Error Class\n    // istanbul ignore next (we cannot test-cover all error cases):\n    return code === \"ECONNRESET\" || cls === \"08\" && code !== \"08P01\" || cls === \"57\" && code !== \"57014\";\n// Code 'ECONNRESET' - Connectivity issue handled by the driver.\n// Class 08 - Connection Exception (except for 08P01, for protocol violation).\n// Class 57 - Operator Intervention (except for 57014, for cancelled queries).\n//\n// ERROR CODES: https://www.postgresql.org/docs/9.6/static/errcodes-appendix.html\n}\n///////////////////////////////////////////////////////////////\n// Does JSON.stringify, with support for BigInt (irreversible)\nfunction toJson(data) {\n    if (data !== undefined) {\n        return JSON.stringify(data, (_, v)=>typeof v === \"bigint\" ? `${v}#bigint` : v).replace(/\"(-?\\d+)#bigint\"/g, (_, a)=>a);\n    }\n}\nconst exp = {\n    toJson,\n    getIfHas,\n    addInspection,\n    InternalError,\n    getLocalStack,\n    isText,\n    isNull,\n    isDev,\n    addReadProp,\n    addReadProperties,\n    getSafeConnection,\n    messageGap,\n    inherits,\n    isConnectivityError\n};\nconst mainFile = process.argv[1];\n// istanbul ignore next\nexp.startDir = mainFile ? npm.path.dirname(mainFile) : process.cwd();\nmodule.exports = exp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/utils/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/lib/utils/public.js":
/*!*****************************************************!*\
  !*** ./node_modules/pg-promise/lib/utils/public.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */ \nconst { assert } = __webpack_require__(/*! ../assert */ \"(rsc)/./node_modules/pg-promise/lib/assert.js\");\nconst npm = {\n    fs: __webpack_require__(/*! fs */ \"fs\"),\n    path: __webpack_require__(/*! path */ \"path\"),\n    utils: __webpack_require__(/*! ./ */ \"(rsc)/./node_modules/pg-promise/lib/utils/index.js\"),\n    package: __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/pg-promise/package.json\")\n};\n/**\r\n * @method utils.camelize\r\n * @description\r\n * Camelizes a text string.\r\n *\r\n * Case-changing characters include:\r\n * - _hyphen_\r\n * - _underscore_\r\n * - _period_\r\n * - _space_\r\n *\r\n * @param {string} text\r\n * Input text string.\r\n *\r\n * @returns {string}\r\n * Camelized text string.\r\n *\r\n * @see\r\n * {@link utils.camelizeVar camelizeVar}\r\n *\r\n */ function camelize(text) {\n    text = text.replace(/[-_\\s.]+(.)?/g, (_, c)=>c ? c.toUpperCase() : \"\");\n    return text.substr(0, 1).toLowerCase() + text.substr(1);\n}\n/**\r\n * @method utils.camelizeVar\r\n * @description\r\n * Camelizes a text string, while making it compliant with JavaScript variable names:\r\n * - contains symbols `a-z`, `A-Z`, `0-9`, `_` and `$`\r\n * - cannot have leading digits\r\n *\r\n * First, it removes all symbols that do not meet the above criteria, except for _hyphen_, _period_ and _space_,\r\n * and then it forwards into {@link utils.camelize camelize}.\r\n *\r\n * @param {string} text\r\n * Input text string.\r\n *\r\n * If it doesn't contain any symbols to make up a valid variable name, the result will be an empty string.\r\n *\r\n * @returns {string}\r\n * Camelized text string that can be used as an open property name.\r\n *\r\n * @see\r\n * {@link utils.camelize camelize}\r\n *\r\n */ function camelizeVar(text) {\n    text = text.replace(/[^a-zA-Z0-9$_\\-\\s.]/g, \"\").replace(/^[0-9_\\-\\s.]+/, \"\");\n    return camelize(text);\n}\nfunction _enumSql(dir, options, cb, namePath) {\n    const tree = {};\n    npm.fs.readdirSync(dir).forEach((file)=>{\n        let stat;\n        const fullPath = npm.path.join(dir, file);\n        try {\n            stat = npm.fs.statSync(fullPath);\n        } catch (e) {\n            // while it is very easy to test manually, it is very difficult to test for\n            // access-denied errors automatically; therefore excluding from the coverage:\n            // istanbul ignore next\n            if (options.ignoreErrors) {\n                return; // on to the next file/folder;\n            }\n            // istanbul ignore next\n            throw e;\n        }\n        if (stat.isDirectory()) {\n            if (options.recursive) {\n                const dirName = camelizeVar(file);\n                const np = namePath ? namePath + \".\" + dirName : dirName;\n                const t = _enumSql(fullPath, options, cb, np);\n                if (Object.keys(t).length) {\n                    if (!dirName.length || dirName in tree) {\n                        if (!options.ignoreErrors) {\n                            throw new Error(\"Empty or duplicate camelized folder name: \" + fullPath);\n                        }\n                    }\n                    tree[dirName] = t;\n                }\n            }\n        } else {\n            if (npm.path.extname(file).toLowerCase() === \".sql\") {\n                const name = camelizeVar(file.replace(/\\.[^/.]+$/, \"\"));\n                if (!name.length || name in tree) {\n                    if (!options.ignoreErrors) {\n                        throw new Error(\"Empty or duplicate camelized file name: \" + fullPath);\n                    }\n                }\n                tree[name] = fullPath;\n                if (cb) {\n                    const result = cb(fullPath, name, namePath ? namePath + \".\" + name : name);\n                    if (result !== undefined) {\n                        tree[name] = result;\n                    }\n                }\n            }\n        }\n    });\n    return tree;\n}\n/**\r\n * @method utils.enumSql\r\n * @description\r\n * Synchronously enumerates all SQL files (within a given directory) into a camelized SQL tree.\r\n *\r\n * All property names within the tree are camelized via {@link utils.camelizeVar camelizeVar},\r\n * so they can be used in the code directly, as open property names.\r\n *\r\n * @param {string} dir\r\n * Directory path where SQL files are located, either absolute or relative to the current directory.\r\n *\r\n * SQL files are identified by using `.sql` extension (case-insensitive).\r\n *\r\n * @param {{}} [options]\r\n * Search options.\r\n *\r\n * @param {boolean} [options.recursive=false]\r\n * Include sub-directories into the search.\r\n *\r\n * Sub-directories without SQL files will be skipped from the result.\r\n *\r\n * @param {boolean} [options.ignoreErrors=false]\r\n * Ignore the following types of errors:\r\n * - access errors, when there is no read access to a file or folder\r\n * - empty or duplicate camelized property names\r\n *\r\n * This flag does not affect errors related to invalid input parameters, or if you pass in a\r\n * non-existing directory.\r\n *\r\n * @param {function} [cb]\r\n * A callback function that takes three arguments:\r\n * - `file` - SQL file path, relative or absolute, according to how you specified the search directory\r\n * - `name` - name of the property that represents the SQL file\r\n * - `path` - property resolution path (full property name)\r\n *\r\n * If the function returns anything other than `undefined`, it overrides the corresponding property value in the tree.\r\n *\r\n * @returns {object}\r\n * Camelized SQL tree object, with each value being an SQL file path (unless changed via the callback).\r\n *\r\n * @example\r\n *\r\n * // simple SQL tree generation for further processing:\r\n * const tree = pgp.utils.enumSql('../sql', {recursive: true});\r\n *\r\n * @example\r\n *\r\n * // generating an SQL tree for dynamic use of names:\r\n * const sql = pgp.utils.enumSql(__dirname, {recursive: true}, file => {\r\n *     return new pgp.QueryFile(file, {minify: true});\r\n * });\r\n *\r\n * @example\r\n *\r\n * const {join: joinPath} = require('path');\r\n *\r\n * // replacing each relative path in the tree with a full one:\r\n * const tree = pgp.utils.enumSql('../sql', {recursive: true}, file => {\r\n *     return joinPath(__dirname, file);\r\n * });\r\n *\r\n */ function enumSql(dir, options, cb) {\n    if (!npm.utils.isText(dir)) {\n        throw new TypeError(\"Parameter 'dir' must be a non-empty text string.\");\n    }\n    options = assert(options, [\n        \"recursive\",\n        \"ignoreErrors\"\n    ]);\n    cb = typeof cb === \"function\" ? cb : null;\n    return _enumSql(dir, options, cb, \"\");\n}\n/**\r\n * @method utils.taskArgs\r\n * @description\r\n * Normalizes/prepares arguments for tasks and transactions.\r\n *\r\n * Its main purpose is to simplify adding custom methods {@link Database#task task}, {@link Database#taskIf taskIf},\r\n * {@link Database#tx tx} and {@link Database#txIf txIf} within event {@link event:extend extend}, as the those methods use fairly\r\n * complex logic for parsing inputs.\r\n *\r\n * @param args {Object}\r\n * Array-like object of `arguments` that was passed into the method. It is expected that the `arguments`\r\n * are always made of two parameters - `(options, cb)`, same as all the default task/transaction methods.\r\n *\r\n * And if your custom method needs additional parameters, they should be passed in as extra properties within `options`.\r\n *\r\n * @returns {Array}\r\n * Array of arguments that can be passed into a task or transaction.\r\n *\r\n * It is extended with properties `options` and `cb` to access the corresponding array elements `[0]` and `[1]` by name.\r\n *\r\n * @example\r\n *\r\n * // Registering a custom transaction method that assigns a default Transaction Mode:\r\n *\r\n * const initOptions = {\r\n *     extend: obj => {\r\n *         obj.myTx = function(options, cb) {\r\n *             const args = pgp.utils.taskArgs(arguments); // prepare arguments\r\n *\r\n *             if (!('mode' in args.options)) {\r\n *                 // if no 'mode' was specified, set default for transaction mode:\r\n *                 args.options.mode = myTxModeObject; // of type pgp.txMode.TransactionMode\r\n *             }\r\n *\r\n *             return obj.tx.apply(this, args);\r\n *             // or explicitly, if needed:\r\n *             // return obj.tx.call(this, args.options, args.cb);\r\n *         }\r\n *     }\r\n * };\r\n *\r\n */ function taskArgs(args) {\n    if (!args || typeof args.length !== \"number\") {\n        throw new TypeError(\"Parameter 'args' must be an array-like object of arguments.\");\n    }\n    let options = args[0], cb;\n    if (typeof options === \"function\") {\n        cb = options;\n        options = {};\n        if (cb.name) {\n            options.tag = cb.name;\n        }\n    } else {\n        if (typeof args[1] === \"function\") {\n            cb = args[1];\n        }\n        if (typeof options === \"string\" || typeof options === \"number\") {\n            options = {\n                tag: options\n            };\n        } else {\n            options = typeof options === \"object\" && options || {};\n            if (!(\"tag\" in options) && cb && cb.name) {\n                options.tag = cb.name;\n            }\n        }\n    }\n    const res = [\n        options,\n        cb\n    ];\n    Object.defineProperty(res, \"options\", {\n        get: function() {\n            return this[0];\n        },\n        set: function(newValue) {\n            this[0] = newValue;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(res, \"cb\", {\n        get: function() {\n            return this[1];\n        },\n        set: function(newValue) {\n            this[1] = newValue;\n        },\n        enumerable: true\n    });\n    return res;\n}\n/**\r\n * @namespace utils\r\n *\r\n * @description\r\n * Namespace for general-purpose static functions, available as `pgp.utils`, before and after initializing the library.\r\n *\r\n * @property {function} camelize\r\n * {@link utils.camelize camelize} - camelizes a text string\r\n *\r\n * @property {function} camelizeVar\r\n * {@link utils.camelizeVar camelizeVar} - camelizes a text string as a variable\r\n *\r\n * @property {function} enumSql\r\n * {@link utils.enumSql enumSql} - enumerates SQL files in a directory\r\n *\r\n * @property {function} taskArgs\r\n * {@link utils.taskArgs taskArgs} - prepares arguments for tasks and transactions\r\n */ module.exports = {\n    camelize,\n    camelizeVar,\n    enumSql,\n    taskArgs\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-promise/lib/utils/public.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-promise/package.json":
/*!**********************************************!*\
  !*** ./node_modules/pg-promise/package.json ***!
  \**********************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"pg-promise","version":"11.5.4","description":"PostgreSQL interface for Node.js","main":"lib/index.js","typings":"typescript/pg-promise.d.ts","scripts":{"spelling":"cspell --config=.cspell.json \\"**/*.{md,ts,js}\\" --no-progress","coverage":"istanbul cover ./node_modules/jasmine-node/bin/jasmine-node --captureExceptions test","doc":"jsdoc -c ./jsdoc/jsdoc.js ./jsdoc/README.md -t ./jsdoc/templates/custom","lint":"eslint ./lib ./test/*.js ./test/db --fix","test":"jasmine-node --captureExceptions test","test:init":"node test/db/init.js","test:native":"jasmine-node test --config PG_NATIVE true","tslint":"tslint ./typescript/*.ts"},"files":["lib","typescript"],"homepage":"https://github.com/vitaly-t/pg-promise","repository":{"type":"git","url":"https://github.com/vitaly-t/pg-promise.git"},"bugs":{"url":"https://github.com/vitaly-t/pg-promise/issues","email":"vitaly.tomilov@gmail.com"},"keywords":["pg","promise","postgres"],"author":{"name":"Vitaly Tomilov","email":"vitaly.tomilov@gmail.com"},"license":"MIT","engines":{"node":">=14.0"},"dependencies":{"assert-options":"0.8.1","pg":"8.11.3","pg-minify":"1.6.3","spex":"3.3.0"},"devDependencies":{"@types/node":"20.5.2","bluebird":"3.7.2","coveralls":"3.1.1","cspell":"7.0.1","eslint":"8.47.0","istanbul":"0.4.5","jasmine-node":"3.0.0","jsdoc":"4.0.2","JSONStream":"1.3.5","pg-query-stream":"4.5.3","tslint":"6.1.3","typescript":"5.1.6"}}');

/***/ })

};
;