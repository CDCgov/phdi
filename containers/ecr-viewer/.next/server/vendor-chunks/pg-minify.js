"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pg-minify";
exports.ids = ["vendor-chunks/pg-minify"];
exports.modules = {

/***/ "(rsc)/./node_modules/pg-minify/lib/error.js":
/*!*********************************************!*\
  !*** ./node_modules/pg-minify/lib/error.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { EOL } = __webpack_require__(/*! os */ \"os\");\nconst { addInspection, messageGap } = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/pg-minify/lib/utils.js\");\nconst parsingErrorCode = {\n    unclosedMLC: 0,\n    unclosedText: 1,\n    unclosedQI: 2,\n    multiLineQI: 3 // Multi-line quoted identifiers are not supported.\n};\nObject.freeze(parsingErrorCode);\nconst errorMessages = [\n    {\n        name: \"unclosedMLC\",\n        message: \"Unclosed multi-line comment.\"\n    },\n    {\n        name: \"unclosedText\",\n        message: \"Unclosed text block.\"\n    },\n    {\n        name: \"unclosedQI\",\n        message: \"Unclosed quoted identifier.\"\n    },\n    {\n        name: \"multiLineQI\",\n        message: \"Multi-line quoted identifiers are not supported.\"\n    }\n];\nclass SQLParsingError extends Error {\n    constructor(code, position){\n        const err = errorMessages[code].message;\n        const message = `Error parsing SQL at {line:${position.line},col:${position.column}}: ${err}`;\n        super(message);\n        this.name = this.constructor.name;\n        this.error = err;\n        this.code = code;\n        this.position = position;\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\nSQLParsingError.prototype.toString = function(level) {\n    level = level > 0 ? parseInt(level) : 0;\n    const gap = messageGap(level + 1);\n    const lines = [\n        `SQLParsingError {`,\n        `${gap}code: parsingErrorCode.${errorMessages[this.code].name}`,\n        `${gap}error: \"${this.error}\"`,\n        `${gap}position: {line: ${this.position.line}, col: ${this.position.column}}`,\n        `${messageGap(level)}}`\n    ];\n    return lines.join(EOL);\n};\naddInspection(SQLParsingError.prototype, function() {\n    return this.toString();\n});\nmodule.exports = {\n    SQLParsingError,\n    parsingErrorCode\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctbWluaWZ5L2xpYi9lcnJvci5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxFQUFDQSxHQUFHLEVBQUMsR0FBR0MsbUJBQU9BLENBQUM7QUFDdEIsTUFBTSxFQUFDQyxhQUFhLEVBQUVDLFVBQVUsRUFBQyxHQUFHRixtQkFBT0EsQ0FBQztBQUU1QyxNQUFNRyxtQkFBbUI7SUFDckJDLGFBQWE7SUFDYkMsY0FBYztJQUNkQyxZQUFZO0lBQ1pDLGFBQWEsRUFBRSxtREFBbUQ7QUFDdEU7QUFFQUMsT0FBT0MsTUFBTSxDQUFDTjtBQUVkLE1BQU1PLGdCQUFnQjtJQUNsQjtRQUFDQyxNQUFNO1FBQWVDLFNBQVM7SUFBOEI7SUFDN0Q7UUFBQ0QsTUFBTTtRQUFnQkMsU0FBUztJQUFzQjtJQUN0RDtRQUFDRCxNQUFNO1FBQWNDLFNBQVM7SUFBNkI7SUFDM0Q7UUFBQ0QsTUFBTTtRQUFlQyxTQUFTO0lBQWtEO0NBQ3BGO0FBRUQsTUFBTUMsd0JBQXdCQztJQUMxQkMsWUFBWUMsSUFBSSxFQUFFQyxRQUFRLENBQUU7UUFDeEIsTUFBTUMsTUFBTVIsYUFBYSxDQUFDTSxLQUFLLENBQUNKLE9BQU87UUFDdkMsTUFBTUEsVUFBVSxDQUFDLDJCQUEyQixFQUFFSyxTQUFTRSxJQUFJLENBQUMsS0FBSyxFQUFFRixTQUFTRyxNQUFNLENBQUMsR0FBRyxFQUFFRixJQUFJLENBQUM7UUFDN0YsS0FBSyxDQUFDTjtRQUNOLElBQUksQ0FBQ0QsSUFBSSxHQUFHLElBQUksQ0FBQ0ksV0FBVyxDQUFDSixJQUFJO1FBQ2pDLElBQUksQ0FBQ1UsS0FBSyxHQUFHSDtRQUNiLElBQUksQ0FBQ0YsSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ0MsUUFBUSxHQUFHQTtRQUNoQkgsTUFBTVEsaUJBQWlCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQ1AsV0FBVztJQUNsRDtBQUNKO0FBRUFGLGdCQUFnQlUsU0FBUyxDQUFDQyxRQUFRLEdBQUcsU0FBVUMsS0FBSztJQUNoREEsUUFBUUEsUUFBUSxJQUFJQyxTQUFTRCxTQUFTO0lBQ3RDLE1BQU1FLE1BQU16QixXQUFXdUIsUUFBUTtJQUMvQixNQUFNRyxRQUFRO1FBQ1YsQ0FBQyxpQkFBaUIsQ0FBQztRQUNuQixDQUFDLEVBQUVELElBQUksdUJBQXVCLEVBQUVqQixhQUFhLENBQUMsSUFBSSxDQUFDTSxJQUFJLENBQUMsQ0FBQ0wsSUFBSSxDQUFDLENBQUM7UUFDL0QsQ0FBQyxFQUFFZ0IsSUFBSSxRQUFRLEVBQUUsSUFBSSxDQUFDTixLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzlCLENBQUMsRUFBRU0sSUFBSSxpQkFBaUIsRUFBRSxJQUFJLENBQUNWLFFBQVEsQ0FBQ0UsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUNGLFFBQVEsQ0FBQ0csTUFBTSxDQUFDLENBQUMsQ0FBQztRQUM3RSxDQUFDLEVBQUVsQixXQUFXdUIsT0FBTyxDQUFDLENBQUM7S0FDMUI7SUFDRCxPQUFPRyxNQUFNQyxJQUFJLENBQUM5QjtBQUN0QjtBQUVBRSxjQUFjWSxnQkFBZ0JVLFNBQVMsRUFBRTtJQUNyQyxPQUFPLElBQUksQ0FBQ0MsUUFBUTtBQUN4QjtBQUVBTSxPQUFPQyxPQUFPLEdBQUc7SUFDYmxCO0lBQ0FWO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odG1sLWNvbnZlcnRlci8uL25vZGVfbW9kdWxlcy9wZy1taW5pZnkvbGliL2Vycm9yLmpzP2Q3OGIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge0VPTH0gPSByZXF1aXJlKCdvcycpO1xyXG5jb25zdCB7YWRkSW5zcGVjdGlvbiwgbWVzc2FnZUdhcH0gPSByZXF1aXJlKCcuL3V0aWxzJyk7XHJcblxyXG5jb25zdCBwYXJzaW5nRXJyb3JDb2RlID0ge1xyXG4gICAgdW5jbG9zZWRNTEM6IDAsIC8vIFVuY2xvc2VkIG11bHRpLWxpbmUgY29tbWVudC5cclxuICAgIHVuY2xvc2VkVGV4dDogMSwgLy8gVW5jbG9zZWQgdGV4dCBibG9jay5cclxuICAgIHVuY2xvc2VkUUk6IDIsIC8vIFVuY2xvc2VkIHF1b3RlZCBpZGVudGlmaWVyLlxyXG4gICAgbXVsdGlMaW5lUUk6IDMgLy8gTXVsdGktbGluZSBxdW90ZWQgaWRlbnRpZmllcnMgYXJlIG5vdCBzdXBwb3J0ZWQuXHJcbn07XHJcblxyXG5PYmplY3QuZnJlZXplKHBhcnNpbmdFcnJvckNvZGUpO1xyXG5cclxuY29uc3QgZXJyb3JNZXNzYWdlcyA9IFtcclxuICAgIHtuYW1lOiAndW5jbG9zZWRNTEMnLCBtZXNzYWdlOiAnVW5jbG9zZWQgbXVsdGktbGluZSBjb21tZW50Lid9LFxyXG4gICAge25hbWU6ICd1bmNsb3NlZFRleHQnLCBtZXNzYWdlOiAnVW5jbG9zZWQgdGV4dCBibG9jay4nfSxcclxuICAgIHtuYW1lOiAndW5jbG9zZWRRSScsIG1lc3NhZ2U6ICdVbmNsb3NlZCBxdW90ZWQgaWRlbnRpZmllci4nfSxcclxuICAgIHtuYW1lOiAnbXVsdGlMaW5lUUknLCBtZXNzYWdlOiAnTXVsdGktbGluZSBxdW90ZWQgaWRlbnRpZmllcnMgYXJlIG5vdCBzdXBwb3J0ZWQuJ31cclxuXTtcclxuXHJcbmNsYXNzIFNRTFBhcnNpbmdFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGNvZGUsIHBvc2l0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgZXJyID0gZXJyb3JNZXNzYWdlc1tjb2RlXS5tZXNzYWdlO1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgRXJyb3IgcGFyc2luZyBTUUwgYXQge2xpbmU6JHtwb3NpdGlvbi5saW5lfSxjb2w6JHtwb3NpdGlvbi5jb2x1bW59fTogJHtlcnJ9YDtcclxuICAgICAgICBzdXBlcihtZXNzYWdlKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XHJcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycjtcclxuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcclxuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcclxuICAgIH1cclxufVxyXG5cclxuU1FMUGFyc2luZ0Vycm9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIChsZXZlbCkge1xyXG4gICAgbGV2ZWwgPSBsZXZlbCA+IDAgPyBwYXJzZUludChsZXZlbCkgOiAwO1xyXG4gICAgY29uc3QgZ2FwID0gbWVzc2FnZUdhcChsZXZlbCArIDEpO1xyXG4gICAgY29uc3QgbGluZXMgPSBbXHJcbiAgICAgICAgYFNRTFBhcnNpbmdFcnJvciB7YCxcclxuICAgICAgICBgJHtnYXB9Y29kZTogcGFyc2luZ0Vycm9yQ29kZS4ke2Vycm9yTWVzc2FnZXNbdGhpcy5jb2RlXS5uYW1lfWAsXHJcbiAgICAgICAgYCR7Z2FwfWVycm9yOiBcIiR7dGhpcy5lcnJvcn1cImAsXHJcbiAgICAgICAgYCR7Z2FwfXBvc2l0aW9uOiB7bGluZTogJHt0aGlzLnBvc2l0aW9uLmxpbmV9LCBjb2w6ICR7dGhpcy5wb3NpdGlvbi5jb2x1bW59fWAsXHJcbiAgICAgICAgYCR7bWVzc2FnZUdhcChsZXZlbCl9fWBcclxuICAgIF07XHJcbiAgICByZXR1cm4gbGluZXMuam9pbihFT0wpO1xyXG59O1xyXG5cclxuYWRkSW5zcGVjdGlvbihTUUxQYXJzaW5nRXJyb3IucHJvdG90eXBlLCBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgU1FMUGFyc2luZ0Vycm9yLFxyXG4gICAgcGFyc2luZ0Vycm9yQ29kZVxyXG59O1xyXG4iXSwibmFtZXMiOlsiRU9MIiwicmVxdWlyZSIsImFkZEluc3BlY3Rpb24iLCJtZXNzYWdlR2FwIiwicGFyc2luZ0Vycm9yQ29kZSIsInVuY2xvc2VkTUxDIiwidW5jbG9zZWRUZXh0IiwidW5jbG9zZWRRSSIsIm11bHRpTGluZVFJIiwiT2JqZWN0IiwiZnJlZXplIiwiZXJyb3JNZXNzYWdlcyIsIm5hbWUiLCJtZXNzYWdlIiwiU1FMUGFyc2luZ0Vycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsImNvZGUiLCJwb3NpdGlvbiIsImVyciIsImxpbmUiLCJjb2x1bW4iLCJlcnJvciIsImNhcHR1cmVTdGFja1RyYWNlIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJsZXZlbCIsInBhcnNlSW50IiwiZ2FwIiwibGluZXMiLCJqb2luIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-minify/lib/error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-minify/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/pg-minify/lib/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst parser = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/pg-minify/lib/parser.js\");\nconst error = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/pg-minify/lib/error.js\");\nparser.SQLParsingError = error.SQLParsingError;\nparser.parsingErrorCode = error.parsingErrorCode;\nmodule.exports = parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctbWluaWZ5L2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDdkIsTUFBTUMsUUFBUUQsbUJBQU9BLENBQUM7QUFFdEJELE9BQU9HLGVBQWUsR0FBR0QsTUFBTUMsZUFBZTtBQUM5Q0gsT0FBT0ksZ0JBQWdCLEdBQUdGLE1BQU1FLGdCQUFnQjtBQUVoREMsT0FBT0MsT0FBTyxHQUFHTiIsInNvdXJjZXMiOlsid2VicGFjazovL2h0bWwtY29udmVydGVyLy4vbm9kZV9tb2R1bGVzL3BnLW1pbmlmeS9saWIvaW5kZXguanM/MDZmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwYXJzZXIgPSByZXF1aXJlKCcuL3BhcnNlcicpO1xyXG5jb25zdCBlcnJvciA9IHJlcXVpcmUoJy4vZXJyb3InKTtcclxuXHJcbnBhcnNlci5TUUxQYXJzaW5nRXJyb3IgPSBlcnJvci5TUUxQYXJzaW5nRXJyb3I7XHJcbnBhcnNlci5wYXJzaW5nRXJyb3JDb2RlID0gZXJyb3IucGFyc2luZ0Vycm9yQ29kZTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gcGFyc2VyO1xyXG4iXSwibmFtZXMiOlsicGFyc2VyIiwicmVxdWlyZSIsImVycm9yIiwiU1FMUGFyc2luZ0Vycm9yIiwicGFyc2luZ0Vycm9yQ29kZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-minify/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-minify/lib/parser.js":
/*!**********************************************!*\
  !*** ./node_modules/pg-minify/lib/parser.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { parsingErrorCode, SQLParsingError } = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/pg-minify/lib/error.js\");\nconst { getIndexPos } = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/pg-minify/lib/utils.js\");\n// symbols that need no spaces around them:\nconst compressors = \".,;:()[]=<>+-*/|!?@#\";\n////////////////////////////////////////////\n// Parses and minimizes a PostgreSQL script.\nfunction minify(sql, options) {\n    if (typeof sql !== \"string\") {\n        throw new TypeError(\"Input SQL must be a text string.\");\n    }\n    if (!sql.length) {\n        return \"\";\n    }\n    sql = sql.replace(/\\r\\n/g, \"\\n\");\n    options = options || {};\n    let idx = 0, result = \"\", space = false; // add a space on the next step\n    const len = sql.length;\n    do {\n        const s = sql[idx], s1 = sql[idx + 1]; // next symbol;\n        if (isGap(s)) {\n            while(++idx < len && isGap(sql[idx]));\n            if (idx < len) {\n                space = true;\n            }\n            idx--;\n            continue;\n        }\n        if (s === \"-\" && s1 === \"-\") {\n            const lb = sql.indexOf(\"\\n\", idx + 2);\n            if (lb < 0) {\n                break;\n            }\n            idx = lb - 1;\n            skipGaps();\n            continue;\n        }\n        if (s === \"/\" && s1 === \"*\") {\n            let c = idx + 1, open = 0, close = 0, lastOpen, lastClose;\n            while(++c < len - 1 && close <= open){\n                if (sql[c] === \"/\" && sql[c + 1] === \"*\") {\n                    lastOpen = c;\n                    open++;\n                    c++;\n                } else {\n                    if (sql[c] === \"*\" && sql[c + 1] === \"/\") {\n                        lastClose = c;\n                        close++;\n                        c++;\n                    }\n                }\n            }\n            if (close <= open) {\n                idx = lastOpen;\n                throwError(parsingErrorCode.unclosedMLC);\n            }\n            if (sql[idx + 2] === \"!\" && !options.removeAll) {\n                if (options.compress) {\n                    space = false;\n                }\n                addSpace();\n                result += sql.substring(idx, lastClose + 2).replace(/\\n/g, \"\\r\\n\");\n            }\n            idx = lastClose + 1;\n            skipGaps();\n            continue;\n        }\n        let closeIdx, text;\n        if (s === '\"') {\n            closeIdx = sql.indexOf('\"', idx + 1);\n            if (closeIdx < 0) {\n                throwError(parsingErrorCode.unclosedQI);\n            }\n            text = sql.substring(idx, closeIdx + 1);\n            if (text.indexOf(\"\\n\") > 0) {\n                throwError(parsingErrorCode.multiLineQI);\n            }\n            if (options.compress) {\n                space = false;\n            }\n            addSpace();\n            result += text;\n            idx = closeIdx;\n            skipGaps();\n            continue;\n        }\n        if (s === `'`) {\n            closeIdx = idx;\n            do {\n                closeIdx = sql.indexOf(`'`, closeIdx + 1);\n                if (closeIdx > 0) {\n                    let i = closeIdx;\n                    while(sql[--i] === \"\\\\\");\n                    if ((closeIdx - i) % 2) {\n                        let step = closeIdx;\n                        while(++step < len && sql[step] === `'`);\n                        if ((step - closeIdx) % 2) {\n                            closeIdx = step - 1;\n                            break;\n                        }\n                        closeIdx = step === len ? -1 : step;\n                    }\n                }\n            }while (closeIdx > 0);\n            if (closeIdx < 0) {\n                throwError(parsingErrorCode.unclosedText);\n            }\n            if (options.compress) {\n                space = false;\n            }\n            addSpace();\n            text = sql.substring(idx, closeIdx + 1);\n            const hasLB = text.indexOf(\"\\n\") > 0;\n            if (hasLB) {\n                text = text.split(\"\\n\").map((m)=>{\n                    return m.replace(/^\\s+|\\s+$/g, \"\");\n                }).join(\"\\\\n\");\n            }\n            const hasTabs = text.indexOf(\"\t\") > 0;\n            if (hasLB || hasTabs) {\n                const prev = idx ? sql[idx - 1] : \"\";\n                if (prev !== \"E\" && prev !== \"e\") {\n                    const r = result ? result[result.length - 1] : \"\";\n                    if (r && r !== \" \" && compressors.indexOf(r) < 0) {\n                        result += \" \";\n                    }\n                    result += \"E\";\n                }\n                if (hasTabs) {\n                    text = text.replace(/\\t/g, \"\\\\t\");\n                }\n            }\n            result += text;\n            idx = closeIdx;\n            skipGaps();\n            continue;\n        }\n        if (options.compress && compressors.indexOf(s) >= 0) {\n            space = false;\n            skipGaps();\n        }\n        addSpace();\n        result += s;\n    }while (++idx < len);\n    return result;\n    function skipGaps() {\n        if (options.compress) {\n            while(idx < len - 1 && isGap(sql[idx + 1]) && idx++);\n        }\n    }\n    function addSpace() {\n        if (space) {\n            if (result.length) {\n                result += \" \";\n            }\n            space = false;\n        }\n    }\n    function throwError(code) {\n        const position = getIndexPos(sql, idx);\n        throw new SQLParsingError(code, position);\n    }\n}\n////////////////////////////////////\n// Identifies a gap / empty symbol.\nfunction isGap(s) {\n    return s === \" \" || s === \"\t\" || s === \"\\r\" || s === \"\\n\";\n}\nmodule.exports = minify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-minify/lib/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-minify/lib/utils.js":
/*!*********************************************!*\
  !*** ./node_modules/pg-minify/lib/utils.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { inspect } = __webpack_require__(/*! util */ \"util\");\n/////////////////////////////////////////////////////////////\n// Returns {line, column} of an index within multi-line text.\nfunction getIndexPos(text, index) {\n    let lineIdx = 0, colIdx = index, pos = 0;\n    do {\n        pos = text.indexOf(\"\\n\", pos);\n        if (pos === -1 || index < pos + 1) {\n            break;\n        }\n        lineIdx++;\n        pos++;\n        colIdx = index - pos;\n    }while (pos < index);\n    return {\n        line: lineIdx + 1,\n        column: colIdx + 1\n    };\n}\n///////////////////////////////////////////\n// Returns a space gap for console output.\nfunction messageGap(level) {\n    return \" \".repeat(level * 4);\n}\n////////////////////////////////////////////////////\n// Type inspection\nfunction addInspection(type, cb) {\n    type[inspect.custom] = cb;\n}\nmodule.exports = {\n    getIndexPos,\n    messageGap,\n    addInspection\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctbWluaWZ5L2xpYi91dGlscy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxFQUFDQSxPQUFPLEVBQUMsR0FBR0MsbUJBQU9BLENBQUM7QUFFMUIsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxTQUFTQyxZQUFZQyxJQUFJLEVBQUVDLEtBQUs7SUFDNUIsSUFBSUMsVUFBVSxHQUFHQyxTQUFTRixPQUFPRyxNQUFNO0lBQ3ZDLEdBQUc7UUFDQ0EsTUFBTUosS0FBS0ssT0FBTyxDQUFDLE1BQU1EO1FBQ3pCLElBQUlBLFFBQVEsQ0FBQyxLQUFLSCxRQUFRRyxNQUFNLEdBQUc7WUFDL0I7UUFDSjtRQUNBRjtRQUNBRTtRQUNBRCxTQUFTRixRQUFRRztJQUNyQixRQUFTQSxNQUFNSCxPQUFPO0lBQ3RCLE9BQU87UUFDSEssTUFBTUosVUFBVTtRQUNoQkssUUFBUUosU0FBUztJQUNyQjtBQUNKO0FBRUEsMkNBQTJDO0FBQzNDLDBDQUEwQztBQUMxQyxTQUFTSyxXQUFXQyxLQUFLO0lBQ3JCLE9BQU8sSUFBSUMsTUFBTSxDQUFDRCxRQUFRO0FBQzlCO0FBRUEsb0RBQW9EO0FBQ3BELGtCQUFrQjtBQUNsQixTQUFTRSxjQUFjQyxJQUFJLEVBQUVDLEVBQUU7SUFDM0JELElBQUksQ0FBQ2YsUUFBUWlCLE1BQU0sQ0FBQyxHQUFHRDtBQUMzQjtBQUVBRSxPQUFPQyxPQUFPLEdBQUc7SUFDYmpCO0lBQ0FTO0lBQ0FHO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odG1sLWNvbnZlcnRlci8uL25vZGVfbW9kdWxlcy9wZy1taW5pZnkvbGliL3V0aWxzLmpzPzkzZmUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge2luc3BlY3R9ID0gcmVxdWlyZSgndXRpbCcpO1xyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vLyBSZXR1cm5zIHtsaW5lLCBjb2x1bW59IG9mIGFuIGluZGV4IHdpdGhpbiBtdWx0aS1saW5lIHRleHQuXHJcbmZ1bmN0aW9uIGdldEluZGV4UG9zKHRleHQsIGluZGV4KSB7XHJcbiAgICBsZXQgbGluZUlkeCA9IDAsIGNvbElkeCA9IGluZGV4LCBwb3MgPSAwO1xyXG4gICAgZG8ge1xyXG4gICAgICAgIHBvcyA9IHRleHQuaW5kZXhPZignXFxuJywgcG9zKTtcclxuICAgICAgICBpZiAocG9zID09PSAtMSB8fCBpbmRleCA8IHBvcyArIDEpIHtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpbmVJZHgrKztcclxuICAgICAgICBwb3MrKztcclxuICAgICAgICBjb2xJZHggPSBpbmRleCAtIHBvcztcclxuICAgIH0gd2hpbGUgKHBvcyA8IGluZGV4KTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbGluZTogbGluZUlkeCArIDEsXHJcbiAgICAgICAgY29sdW1uOiBjb2xJZHggKyAxXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vIFJldHVybnMgYSBzcGFjZSBnYXAgZm9yIGNvbnNvbGUgb3V0cHV0LlxyXG5mdW5jdGlvbiBtZXNzYWdlR2FwKGxldmVsKSB7XHJcbiAgICByZXR1cm4gJyAnLnJlcGVhdChsZXZlbCAqIDQpO1xyXG59XHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vIFR5cGUgaW5zcGVjdGlvblxyXG5mdW5jdGlvbiBhZGRJbnNwZWN0aW9uKHR5cGUsIGNiKSB7XHJcbiAgICB0eXBlW2luc3BlY3QuY3VzdG9tXSA9IGNiO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGdldEluZGV4UG9zLFxyXG4gICAgbWVzc2FnZUdhcCxcclxuICAgIGFkZEluc3BlY3Rpb25cclxufTtcclxuIl0sIm5hbWVzIjpbImluc3BlY3QiLCJyZXF1aXJlIiwiZ2V0SW5kZXhQb3MiLCJ0ZXh0IiwiaW5kZXgiLCJsaW5lSWR4IiwiY29sSWR4IiwicG9zIiwiaW5kZXhPZiIsImxpbmUiLCJjb2x1bW4iLCJtZXNzYWdlR2FwIiwibGV2ZWwiLCJyZXBlYXQiLCJhZGRJbnNwZWN0aW9uIiwidHlwZSIsImNiIiwiY3VzdG9tIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-minify/lib/utils.js\n");

/***/ })

};
;