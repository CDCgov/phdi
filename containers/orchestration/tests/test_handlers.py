import json
from pathlib import Path
from unittest.mock import MagicMock
from unittest.mock import Mock

from app.handlers import build_fhir_converter_request
from app.handlers import build_message_parser_message_request
from app.handlers import build_message_parser_phdc_request
from app.handlers import unpack_fhir_converter_response
from app.handlers import unpack_message_parser_response
from lxml import etree


def test_build_fhir_converter_request():
    # Test case for an HL7 message
    message = open(
        Path(__file__).parent.parent.parent.parent
        / "tests"
        / "assets"
        / "fhir-converter"
        / "hl7v2"
        / "hl7_with_msh_3_set.hl7"
    ).read()
    orchestration_request = {
        "message_type": "elr",
        "data_type": "hl7",
        "config_file_name": "sample-hl7-test-config.json",
        "include_error_types": "error",
        "message": message,
    }
    result = build_fhir_converter_request(message, orchestration_request)
    assert result["input_type"] == "elr"
    assert result["root_template"] == "ORU_R01"
    assert result["input_data"] == message

    # Test case for an eCR message
    message = open(
        Path(__file__).parent.parent.parent.parent
        / "tests"
        / "assets"
        / "fhir-converter"
        / "ccda"
        / "ccda_sample.xml"
    ).read()
    orchestration_request = {
        "message_type": "ecr",
        "data_type": "ecr",
        "config_file_name": "sample-orchestration-config.json",
        "include_error_types": "error",
        "message": message,
    }
    result = build_fhir_converter_request(message, orchestration_request)
    assert result["input_type"] == "ecr"
    assert result["root_template"] == "EICR"


def test_unpack_fhir_converter_response():
    # Case for a failed conversion
    # The Mock here represents a Response object generated by FastAPI, which
    # we can't auto-generate because we don't actually make a post request
    # when using a handler, and we can't manually give a real Response object
    # the `.json()` attribute
    converter_result = Mock()
    converter_result.status_code = 400
    converter_result.content = {"fhir_conversion_failed": True}
    response = Mock()
    response.json.return_value = {"response": converter_result}
    result = unpack_fhir_converter_response(response)
    assert result[0] == 400
    assert "FHIR Converter request failed" in result[1]

    # Successful conversion response
    sample_bundle = json.load(
        open(
            Path(__file__).parent.parent.parent.parent
            / "tests"
            / "assets"
            / "general"
            / "patient_bundle.json"
        )
    )
    converter_result = MagicMock()
    converter_result.status_code = 200
    actual_bundle = {"FhirResource": sample_bundle}
    converter_result.get.side_effect = actual_bundle.get
    response = Mock()
    response.json.return_value = {"response": converter_result}
    result = unpack_fhir_converter_response(response)
    assert result == (200, sample_bundle)


def test_build_message_parser_message_request():
    # Test for /parse_message endpoint
    sample_json = json.load(
        open(
            Path(__file__).parent.parent.parent.parent
            / "tests"
            / "assets"
            / "general"
            / "patient_bundle.json"
        )
    )
    orchestration_request = {
        "message": sample_json,
        "message_type": "fhir",
        "parsing_schema_name": "ecr.json",
        "credential_manager": "azure",
    }
    result = build_message_parser_message_request(sample_json, orchestration_request)
    assert result["message"] == sample_json
    assert result["message_format"] == "fhir"
    assert result["parsing_schema_name"] == "ecr.json"
    assert result["credential_manager"] == "azure"


def test_build_message_parser_phdc_request():
    # Test for /fhir_to_phdc endpoint
    sample_xml = etree.parse(
        open(
            Path(__file__).parent.parent.parent
            / "message-parser"
            / "assets"
            / "demo_phdc.xml"
        )
    )
    orchestration_request = {
        "message": sample_xml,
        "phdc_report_type": "case_report",
    }
    result = build_message_parser_phdc_request(sample_xml, orchestration_request)
    assert result["message"] == sample_xml
    assert result["phdc_report_type"] == "case_report"


def test_unpack_message_parser_response():
    sample_json = json.load(
        open(
            Path(__file__).parent.parent.parent.parent
            / "tests"
            / "assets"
            / "general"
            / "patient_bundle.json"
        )
    )
    # Mock a JSON response
    response_content = {"response": {"status_code": 200, "FhirResource": sample_json}}

    response = MagicMock()
    response.status_code = 200
    response.headers = {"Content-Type": "application/json"}
    response.json.return_value = response_content
    status_code, parsed_message = unpack_message_parser_response(response)
    assert status_code == 200
    assert parsed_message == sample_json

    # Mock an XML response
    sample_xml = etree.parse(
        open(
            Path(__file__).parent.parent.parent
            / "message-parser"
            / "assets"
            / "demo_phdc.xml"
        )
    )
    response = MagicMock()
    response.status_code = 200
    response.headers = {"Content-Type": "application/xml"}
    response.content = etree.tostring(sample_xml)
    status_code, parsed_message = unpack_message_parser_response(response)
    assert status_code == 200
    assert parsed_message == etree.tostring(sample_xml)

    # Test failure case
    response_content = {
        "response": {"status_code": 400, "text": "Message Parser request failed"}
    }
    response = MagicMock()
    response.status_code = 400
    response.headers = {"Content-Type": "application/json"}
    response.json.return_value = response_content
    status_code, error_message = unpack_message_parser_response(response)
    assert status_code == 400
    assert "Message Parser request failed" in error_message
