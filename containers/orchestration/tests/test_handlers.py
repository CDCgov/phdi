import json
from pathlib import Path
from unittest.mock import MagicMock
from unittest.mock import Mock

from app.handlers import build_fhir_converter_request
from app.handlers import build_valiation_request
from app.handlers import unpack_fhir_converter_response
from app.handlers import unpack_validation_response
from app.handlers import build_message_parser_message_request
from app.handlers import build_message_parser_phdc_request
from app.handlers import unpack_fhir_to_phdc_response
from app.handlers import unpack_parsed_message_response
from lxml import etree


def test_build_fhir_converter_request():
    # Test case for an HL7 message
    message = open(
        Path(__file__).parent.parent.parent.parent
        / "tests"
        / "assets"
        / "fhir-converter"
        / "hl7v2"
        / "hl7_with_msh_3_set.hl7"
    ).read()
    orchestration_request = {
        "message_type": "elr",
        "data_type": "hl7",
        "config_file_name": "sample-hl7-test-config.json",
        "include_error_types": "error",
        "message": message,
    }
    result = build_fhir_converter_request(message, orchestration_request)
    assert result["input_type"] == "elr"
    assert result["root_template"] == "ORU_R01"
    assert result["input_data"] == message

    # Test case for an eCR message
    message = open(
        Path(__file__).parent.parent.parent.parent
        / "tests"
        / "assets"
        / "fhir-converter"
        / "ccda"
        / "ccda_sample.xml"
    ).read()
    orchestration_request = {
        "message_type": "ecr",
        "data_type": "ecr",
        "config_file_name": "sample-orchestration-config.json",
        "include_error_types": "error",
        "message": message,
    }
    result = build_fhir_converter_request(message, orchestration_request)
    assert result["input_type"] == "ecr"
    assert result["root_template"] == "EICR"


def test_build_validation_request():
    # Test case for an eCR message, since it's the only one currently
    # implemented
    message = open(
        Path(__file__).parent.parent.parent.parent
        / "tests"
        / "assets"
        / "fhir-converter"
        / "ccda"
        / "ccda_sample.xml"
    ).read()
    workflow_params = {"include_error_types": "error"}
    orchestration_request = {
        "message_type": "ecr",
        "data_type": "ecr",
        "config_file_name": "sample-orchestration-config.json",
        "include_error_types": "error",
        "message": message,
    }
    result = build_valiation_request(message, orchestration_request, workflow_params)
    assert result["message_type"] == "ecr"
    assert result["include_error_types"] == "error"
    assert result["message"] == message
    assert result["rr_data"] is None


def test_unpack_fhir_converter_response():
    # Case for a failed conversion
    # The Mock here represents a Response object generated by FastAPI, which
    # we can't auto-generate because we don't actually make a post request
    # when using a handler, and we can't manually give a real Response object
    # the `.json()` attribute
    converter_result = Mock()
    converter_result.status_code = 400
    converter_result.content = {"fhir_conversion_failed": True}
    response = Mock()
    response.json.return_value = {"response": converter_result}
    result = unpack_fhir_converter_response(response)
    assert result.status_code == 400
    assert "FHIR Converter request failed" in result.msg_content
    assert not result.should_continue

    # Successful conversion response
    sample_bundle = json.load(
        open(
            Path(__file__).parent.parent.parent.parent
            / "tests"
            / "assets"
            / "general"
            / "patient_bundle.json"
        )
    )
    converter_result = MagicMock()
    converter_result.status_code = 200
    actual_bundle = {"FhirResource": sample_bundle}
    converter_result.get.side_effect = actual_bundle.get
    response = Mock()
    response.json.return_value = {"response": converter_result}
    result = unpack_fhir_converter_response(response)
    assert result.status_code == 200
    assert result.msg_content == sample_bundle
    assert result.should_continue


def test_unpack_validation_response():
    # Case when the service fails before validating
    # The Mock here represents a Response object generated by FastAPI, which
    # we can't auto-generate because we don't actually make a post request
    # when using a handler, and we can't manually give a real Response object
    # the `.json()` attribute
    validator_result = Mock()
    validator_result.status_code = 400
    validator_result.text = "validation didn't work"
    response = Mock()
    response.json.return_value = validator_result
    result = unpack_validation_response(response)
    assert result.status_code == 400
    assert "Validation service failed" in result.msg_content
    assert not result.should_continue

    # Case where an eCR message isn't valid but the service completes
    # with errors to report
    expected_result_for_bad_eCR = {
        "message_valid": False,
        "validation_results": {
            "fatal": ["eCR Message is not valid XML!"],
            "errors": [],
            "warnings": [],
            "information": [],
            "message_ids": {},
        },
    }
    validator_result = MagicMock()
    validator_result.status_code = 200
    validator_result.get.side_effect = expected_result_for_bad_eCR.get
    response = MagicMock()
    response.json.return_value = validator_result
    actual_result = unpack_validation_response(response)
    assert actual_result.status_code == 200
    assert actual_result.msg_content == expected_result_for_bad_eCR.get(
        "validation_results"
    )
    assert not actual_result.should_continue

    # Case where the eCR is valid and well_formatted
    expected_result_for_good_ecr = {
        "message_valid": True,
        "validation_results": {
            "fatal": [],
            "errors": [],
            "warnings": [],
            "information": [],
            "message_ids": {},
        },
    }
    validator_result = MagicMock()
    validator_result.status_code = 200
    validator_result.get.side_effect = expected_result_for_good_ecr.get
    response = MagicMock()
    response.json.return_value = validator_result
    actual_result = unpack_validation_response(response)
    assert actual_result.status_code == 200
    assert actual_result.msg_content == expected_result_for_good_ecr.get(
        "validation_results"
    )
    assert actual_result.should_continue


def test_build_message_parser_message_request():
    # Test for /parse_message endpoint
    sample_json = json.load(
        open(
            Path(__file__).parent.parent.parent.parent
            / "tests"
            / "assets"
            / "general"
            / "patient_bundle.json"
        )
    )
    orchestration_request = {"message": sample_json, "message_type": "fhir"}
    workflow_params = {
        "parsing_schema_name": "ecr.json",
        "credential_manager": "azure",
    }
    result = build_message_parser_message_request(
        sample_json, orchestration_request, workflow_params
    )
    assert result["message"] == sample_json
    assert result["message_format"] == "fhir"
    assert result["parsing_schema_name"] == "ecr.json"
    assert result["credential_manager"] == "azure"


def test_build_message_parser_phdc_request():
    # Test for /fhir_to_phdc endpoint
    sample_xml = etree.parse(
        open(
            Path(__file__).parent.parent.parent
            / "message-parser"
            / "assets"
            / "demo_phdc.xml"
        )
    )
    orchestration_request = {
        "message": sample_xml,
    }
    workflow_params = {"phdc_report_type": "case_report"}
    result = build_message_parser_phdc_request(
        sample_xml, orchestration_request, workflow_params
    )
    assert result["message"] == sample_xml
    assert result["phdc_report_type"] == "case_report"


def test_unpack_parsed_message_response():
    sample_json = json.load(
        open(
            Path(__file__).parent.parent.parent
            / "message-parser"
            / "assets"
            / "sample_parse_message_response_full.json"
        )
    )
    # Mock a JSON response
    response_content = sample_json

    response = MagicMock()
    response.status_code = 200
    response.json.return_value = response_content
    status_code, parsed_message = unpack_parsed_message_response(response)
    assert status_code == 200
    assert parsed_message == sample_json.get("parsed_values")

    # Test failure case
    error_message = {"message": "Message Parser request failed"}
    response = MagicMock()
    response.status_code = 400
    response.json.return_value = error_message
    status_code, error_message = unpack_parsed_message_response(response)
    assert status_code == 400
    assert "Message Parser request failed" in error_message


def test_unpack_fhir_to_phdc_response():
    # Mock an XML response
    sample_xml = etree.parse(
        open(
            Path(__file__).parent.parent.parent
            / "message-parser"
            / "assets"
            / "demo_phdc.xml"
        )
    )
    response = MagicMock()
    response.status_code = 200
    response.content = etree.tostring(sample_xml)
    status_code, parsed_message = unpack_fhir_to_phdc_response(response)
    assert status_code == 200
    assert parsed_message == etree.tostring(sample_xml)

    # Test failure case
    response_content = {
        "response": {"status_code": 400, "text": "Message Parser request failed"}
    }
    response = MagicMock()
    response.status_code = 400
    response.json.return_value = response_content
    response.text = "Message Parser request failed"
    status_code, error_message = unpack_fhir_to_phdc_response(response)
    assert status_code == 400
    assert "Message Parser request failed" in error_message
