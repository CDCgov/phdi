import json
from pathlib import Path
from unittest.mock import MagicMock
from unittest.mock import Mock

import pytest
from app.handlers import build_fhir_converter_request
from app.handlers import unpack_fhir_converter_response
from fastapi import HTTPException

from phdi.fhir.conversion.convert import standardize_hl7_datetimes


def test_build_fhir_converter_request():
    # Test case for an HL7 message
    message = open(
        Path(__file__).parent.parent.parent.parent
        / "tests"
        / "assets"
        / "fhir-converter"
        / "hl7v2"
        / "hl7_with_msh_3_set.hl7"
    ).read()
    result = build_fhir_converter_request(input_msg=message)
    assert result["input_type"] == "hl7v2"
    assert result["root_template"] == "ADT_A01"
    assert result["input_data"] == standardize_hl7_datetimes(message)

    # Test case for an eCR message
    message = open(
        Path(__file__).parent.parent.parent.parent
        / "tests"
        / "assets"
        / "fhir-converter"
        / "ccda"
        / "ccda_sample.xml"
    ).read()
    result = build_fhir_converter_request(input_msg=message)
    assert result["input_type"] == "ccda"
    assert result["root_template"] == "ProcedureNote"


def test_unpack_fhir_converter_response():
    # Case for a failed conversion
    # The Mock here represents a Response object generated by FastAPI, which
    # we can't auto-generate because we don't actually make a post request
    # when using a handler, and we can't manually give a real Response object
    # the `.json()` attribute
    converter_result = Mock()
    converter_result.status_code = 400
    converter_result.content = {"fhir_conversion_failed": True}
    response = Mock()
    response.json.return_value = {"response": converter_result}
    with pytest.raises(HTTPException) as e:
        unpack_fhir_converter_response(response)
        assert "FHIR conversion failed" in str(e)

    # Successful conversion response
    sample_bundle = json.load(
        open(
            Path(__file__).parent.parent.parent.parent
            / "tests"
            / "assets"
            / "general"
            / "patient_bundle.json"
        )
    )
    converter_result = MagicMock()
    converter_result.status_code = 200
    actual_bundle = {"FhirResource": sample_bundle}
    converter_result.get.side_effect = actual_bundle.get
    response = Mock()
    response.json.return_value = {"response": converter_result}
    extracted_bundle = unpack_fhir_converter_response(response)
    assert extracted_bundle == sample_bundle
