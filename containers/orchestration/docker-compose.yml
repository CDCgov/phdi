version: "3.3"

services:
  orchestration-service:
    build:
      context: .
    depends_on:
      [
        validation-service,
        fhir-converter-service,
        ingestion-service,
        message-parser-service,
        ecr-viewer,
      ]
    ports:
      - "${ORCHESTRATION_PORT_NUMBER}:8080"
    logging:
      driver: "json-file"
    env_file:
      - .env
  validation-service:
    build:
      context: ../validation
    ports:
      - "${VALIDATION_PORT_NUMBER}:8080"
    logging:
      driver: "json-file"
  fhir-converter-service:
    build:
      context: ../fhir-converter
    ports:
      - "${FHIR_CONVERTER_PORT_NUMBER}:8080"
    logging:
      driver: "json-file"
  ingestion-service:
    build:
      context: ../ingestion
    ports:
      - "${INGESTION_PORT_NUMBER}:8080"
    logging:
      driver: "json-file"
    environment:
      SMARTY_AUTH_ID: ${SMARTY_AUTH_ID}
      SMARTY_AUTH_TOKEN: ${SMARTY_AUTH_TOKEN}
  message-parser-service:
    build:
      context: ../message-parser
    ports:
      - "${MESSAGE_PARSER_PORT_NUMBER}:8080"
    logging:
      driver: "json-file"
  ecr-viewer:
    build:
      context: ../ecr-viewer
    ports:
      - "${ECR_VIEWER_PORT_NUMBER}:3000"
    volumes:
      - ./src/app:/app
    environment:
      - DATABASE_URL=postgres://postgres:pw@db:5432/ecr_viewer_db
    depends_on:
      seed-db:
        condition: service_completed_successfully
      db:
        condition: service_healthy
  db:
    extends:
      file: docker-compose-ecr-viewer.yml
      service: db
  seed-db:
    extends:
      file: docker-compose-ecr-viewer.yml
      service: seed-db
    depends_on:
      db:
        condition: service_healthy
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: "otel-collector"
    volumes:
      - "./otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml"
    command: ["--config=/etc/otelcol-contrib/config.yaml"]
    ports:
      - "8888:8888" # Prometheus metrics exposed by collector
      - "8889:8889" # Endpoint prometheus will scrape
      - "4317:4317" # gRPC OTLP receiver
      - "4318:4318" # HTTP OTLP receiver
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
      - "prom_data:/prometheus"
  grafana:
    image: grafana/grafana-oss
    ports:
      - "4000:3000"
    volumes:
      - ./grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
volumes:
  prom_data:
  grafana_data:
