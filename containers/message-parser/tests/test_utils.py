import json
import os
from pathlib import Path
from unittest import mock

import pytest
from app.config import get_settings
from app.utils import convert_to_fhir
from app.utils import field_metadata
from app.utils import freeze_parsing_schema
from app.utils import freeze_parsing_schema_helper
from app.utils import get_credential_manager
from app.utils import get_metadata
from app.utils import get_parsers
from app.utils import load_parsing_schema
from app.utils import search_for_required_values
from frozendict import frozendict

def test_load_parsing_schema_success():
    test_schema_path = (
        Path(__file__).parent.parent / "app" / "default_schemas" / "test_schema.json"
    )
    with open(test_schema_path, "r") as file:
        test_schema = json.load(file)

    schema = load_parsing_schema("test_schema.json")
    assert schema == test_schema


def test_load_parsing_schema_fail():
    bad_schema_name = "schema-that-does-not-exist.json"
    with pytest.raises(FileNotFoundError) as error:
        load_parsing_schema(bad_schema_name)
    assert error.value.args == (
        f"A schema with the name '{bad_schema_name}' could not be found.",
    )


@mock.patch("app.utils.fhirpathpy")
def test_get_parsers(patched_fhirpathpy):
    # message = {
    #     "resourceType": "Bundle",
    #     "id": "06644b6371b61344be86600f2d0f4cd7",
    #     "meta": {"lastUpdated": "2022-06-07T14:13:02.511737+00:00"},
    #     "type": "batch",
    #     "entry": [
    #         {
    #             "fullUrl": "https://phdi-pilot.azurehealthcareapis.com/Composition/40234gi0-16h5-ffdf-n18d-d93jbn19dajj",
    #             "resource": {
    #                 "resourceType": "Composition",
    #                 "id": "40234gi0-16h5-ffdf-n18d-d93jbn19dajj",
    #                 "status": "registered",
    #                 "type": {
    #                     "coding": {
    #                         "system": "https://loinc.org",
    #                         "code": "100459-7",
    #                         "display": "Summary",
    #                     },
    #                     "text": "Patient COVID summary",
    #                 },
    #                 "date": "2022-08-08",
    #                 "author": [
    #                     {
    #                         "reference": "Practitioner/3nf82nby-js82-xnxw-1j39-js8143gzvs",
    #                         "type": "Practitioner",
    #                     }
    #                 ],
    #                 "custodian": {
    #                     "reference": "Organization/org800201",
    #                     "type": "Organization",
    #                 },
    #             },
    #         },
    #         {
    #             "fullUrl": "https://phdi-pilot.azurehealthcareapis.com/Organization/org800201",
    #             "resource": {
    #                 "resourceType": "Organization",
    #                 "id": "org800201",
    #                 "name": "Sunny Vale",
    #                 "telecom": [{"system": "phone", "value": "999-999-9999"}],
    #                 "address": [
    #                     {
    #                         "line": ["999 North Ridge Road", "Building 3"],
    #                         "city": "Amherst",
    #                         "state": "Massachusetts",
    #                         "district": "Duvall",
    #                         "postalCode": "33721",
    #                     }
    #                 ],
    #             },
    #         },
    #         {
    #             "fullUrl": "",
    #             "resource": {
    #                 "resourceType": "Practitioner",
    #                 "id": "3nf82nby-js82-xnxw-1j39-js8143gzvs",
    #                 "name": [
    #                     {
    #                         "prefix": "Doctor",
    #                         "given": ["Charles", "Macintyre-Downing"],
    #                         "family": "Britishmun",
    #                         "suffix": "III",
    #                     }
    #                 ],
    #             },
    #         },
    #         {
    #             "fullUrl": "https://phdi-pilot.azurehealthcareapis.com/Patient/907844f6-7c99-eabc-f68e-d92189729a55",
    #             "resource": {
    #                 "resourceType": "Patient",
    #                 "id": "907844f6-7c99-eabc-f68e-d92189729a55",
    #                 "meta": {
    #                     "versionId": "4",
    #                     "lastUpdated": "2022-04-07T17:28:03.804+00:00",
    #                 },
    #                 "text": {
    #                     "status": "generated",
    #                     "div": '<div xmlns="http://www.w3.org/1999/xhtml">Generated by <a href="https://github.com/synthetichealth/synthea">Synthea</a>.Version identifier: master-branch-latest\n .   Person seed: -3478791096395970992  Population seed: 1644867619216</div>',
    #                 },
    #                 "extension": [
    #                     {
    #                         "url": "http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName",
    #                         "valueString": "Bernarda685 Toy286",
    #                     },
    #                     {
    #                         "url": "http://hl7.org/fhir/StructureDefinition/patient-birthPlace",
    #                         "valueAddress": {
    #                             "city": "Boston",
    #                             "state": "Massachusetts",
    #                             "country": "US",
    #                         },
    #                     },
    #                     {
    #                         "url": "http://hl7.org/fhir/us/core/StructureDefinition/us-core-race",
    #                         "extension": [
    #                             {
    #                                 "url": "ombCategory",
    #                                 "valueCoding": {
    #                                     "system": "urn:oid:2.16.840.1.113883.6.238",
    #                                     "code": "2028-9",
    #                                     "display": "Asian",
    #                                 },
    #                             }
    #                         ],
    #                     },
    #                     {
    #                         "url": "http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity",
    #                         "extension": [
    #                             {
    #                                 "url": "ombCategory",
    #                                 "valueCoding": {
    #                                     "system": "urn:oid:2.16.840.1.113883.6.238",
    #                                     "code": "2186-5",
    #                                     "display": "Not Hispanic or Latino",
    #                                 },
    #                             }
    #                         ],
    #                     },
    #                     {
    #                         "url": "http://synthetichealth.github.io/synthea/disability-adjusted-life-years",
    #                         "valueDecimal": 0.0,
    #                     },
    #                     {
    #                         "url": "http://synthetichealth.github.io/synthea/quality-adjusted-life-years",
    #                         "valueDecimal": 25.0,
    #                     },
    #                 ],
    #                 "identifier": [
    #                     {
    #                         "system": "https://github.com/synthetichealth/synthea",
    #                         "value": "907844f6-7c99-eabc-f68e-d92189729a55",
    #                     },
    #                     {
    #                         "type": {
    #                             "coding": [
    #                                 {
    #                                     "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
    #                                     "code": "MR",
    #                                     "display": "Medical Record Number",
    #                                 }
    #                             ],
    #                             "text": "Medical Record Number",
    #                         },
    #                         "system": "http://hospital.smarthealthit.org",
    #                         "value": "907844f6-7c99-eabc-f68e-d92189729a55",
    #                     },
    #                     {
    #                         "type": {
    #                             "coding": [
    #                                 {
    #                                     "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
    #                                     "code": "SS",
    #                                     "display": "Social Security Number",
    #                                 }
    #                             ],
    #                             "text": "Social Security Number",
    #                         },
    #                         "system": "http://hl7.org/fhir/sid/us-ssn",
    #                         "value": "999-99-8692",
    #                     },
    #                     {
    #                         "type": {
    #                             "coding": [
    #                                 {
    #                                     "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
    #                                     "code": "DL",
    #                                     "display": "Driver's License",
    #                                 }
    #                             ],
    #                             "text": "Driver's License",
    #                         },
    #                         "system": "urn:oid:2.16.840.1.113883.4.3.25",
    #                         "value": "S99969586",
    #                     },
    #                     {
    #                         "type": {
    #                             "coding": [
    #                                 {
    #                                     "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
    #                                     "code": "PPN",
    #                                     "display": "Passport Number",
    #                                 }
    #                             ],
    #                             "text": "Passport Number",
    #                         },
    #                         "system": "http://standardhealthrecord.org/fhir/StructureDefinition/passportNumber",
    #                         "value": "X31532007X",
    #                     },
    #                 ],
    #                 "name": [
    #                     {
    #                         "use": "official",
    #                         "family": "Price",
    #                         "given": ["Kimberley", "Annette"],
    #                         "prefix": ["Mrs."],
    #                     },
    #                     {
    #                         "use": "maiden",
    #                         "family": "Levinson",
    #                         "given": ["Kim"],
    #                         "prefix": ["Ms."],
    #                         "period": {"start": "1996-04-17", "end": "2022-12-03"},
    #                     },
    #                 ],
    #                 "telecom": [
    #                     {
    #                         "system": "phone",
    #                         "value": "555-690-3898",
    #                         "use": "home",
    #                         "period": {"start": "2004-01-01", "end": "2010-02-02"},
    #                     },
    #                     {
    #                         "system": "phone",
    #                         "value": "863-507-9999",
    #                         "use": "mobile",
    #                         "period": {"start": "2008-03-18"},
    #                     },
    #                     {"system": "email", "value": "kp73@gmail.com"},
    #                 ],
    #                 "gender": "female",
    #                 "birthDate": "1996-04-17",
    #                 "address": [
    #                     {
    #                         "use": "official",
    #                         "extension": [
    #                             {
    #                                 "extension": [
    #                                     {
    #                                         "url": "latitude",
    #                                         "valueDecimal": 42.40321758681465,
    #                                     },
    #                                     {
    #                                         "url": "longitude",
    #                                         "valueDecimal": -71.21421065106027,
    #                                     },
    #                                 ],
    #                                 "url": "http://hl7.org/fhir/StructureDefinition/geolocation",
    #                             }
    #                         ],
    #                         "line": ["165 Eichmann Crossing", "Suite 25"],
    #                         "buildingNumber": "165",
    #                         "city": "Waltham",
    #                         "state": "Massachusetts",
    #                         "country": "US",
    #                         "district": "Franklin",
    #                         "postalCode": "46239",
    #                     }
    #                 ],
    #                 "maritalStatus": {
    #                     "coding": [
    #                         {
    #                             "system": "http://terminology.hl7.org/CodeSystem/v3-MaritalStatus",
    #                             "code": "M",
    #                             "display": "Married",
    #                         }
    #                     ],
    #                     "text": "Married",
    #                 },
    #                 "communication": [
    #                     {
    #                         "language": {
    #                             "coding": [
    #                                 {
    #                                     "system": "urn:ietf:bcp:47",
    #                                     "code": "en-US",
    #                                     "display": "English",
    #                                 }
    #                             ],
    #                             "text": "English",
    #                         }
    #                     }
    #                 ],
    #             },
    #             "search": {"mode": "match"},
    #         },
    #         {
    #             "fullUrl": "https://phdi-pilot.azurehealthcareapis.com/Observation/f001",
    #             "resource": {
    #                 "resourceType": "Observation",
    #                 "id": "f001",
    #                 "text": {
    #                     "status": "generated",
    #                     "div": '<div xmlns="http://www.w3.org/1999/xhtml"><p><b>Generated Narrative: Observation</b><a name="f001"> </a></p><div style="display: inline-block; background-color: #d9e0e7; padding: 6px; margin: 4px; border: 1px solid #8da1b4; border-radius: 5px; line-height: 60%"><p style="margin-bottom: 0px">Resource Observation &quot;f001&quot; </p></div><p><b>identifier</b>: id:\u00a06323\u00a0(use:\u00a0OFFICIAL)</p><p><b>status</b>: final</p><p><b>code</b>: Glucose [Moles/volume] in Blood <span style="background: LightGoldenRodYellow; margin: 4px; border: 1px solid khaki"> (<a href="https://loinc.org/">LOINC</a>#15074-8)</span></p><p><b>subject</b>: <a href="patient-example-f001-pieter.html">Patient/f001: P. van de Heuvel</a> &quot;Pieter VAN DE HEUVEL&quot;</p><p><b>effective</b>: 2013-04-02T09:30:10+01:00</p><p><b>issued</b>: Apr 3, 2013, 2:30:10 PM</p><p><b>performer</b>: <a href="practitioner-example-f005-al.html">Practitioner/f005: A. Langeveld</a> &quot;Langeveld ANNE&quot;</p><p><b>value</b>: 6.3 mmol/l<span style="background: LightGoldenRodYellow"> (Details: UCUM code mmol/L = \'mmol/L\')</span></p><p><b>interpretation</b>: High <span style="background: LightGoldenRodYellow; margin: 4px; border: 1px solid khaki"> (<a href="http://terminology.hl7.org/5.4.0/CodeSystem-v3-ObservationInterpretation.html">ObservationInterpretation</a>#H)</span></p><h3>ReferenceRanges</h3><table class="grid"><tr><td style="display: none">-</td><td><b>Low</b></td><td><b>High</b></td></tr><tr><td style="display: none">*</td><td>3.1 mmol/l<span style="background: LightGoldenRodYellow"> (Details: UCUM code mmol/L = \'mmol/L\')</span></td><td>6.2 mmol/l<span style="background: LightGoldenRodYellow"> (Details: UCUM code mmol/L = \'mmol/L\')</span></td></tr></table></div>',
    #                 },
    #                 "identifier": [
    #                     {
    #                         "use": "official",
    #                         "system": "http://www.bmc.nl/zorgportal/identifiers/observations",
    #                         "value": "6323",
    #                     }
    #                 ],
    #                 "status": "final",
    #                 "category": [
    #                     {
    #                         "coding": [
    #                             {
    #                                 "system": "http://terminology.hl7.org/CodeSystem/observation-category",
    #                                 "code": "vital-signs",
    #                                 "display": "Vital Signs",
    #                             }
    #                         ],
    #                         "text": "Vital Signs",
    #                     }
    #                 ],
    #                 "code": {
    #                     "coding": [
    #                         {
    #                             "system": "http://loinc.org",
    #                             "code": "15074-8",
    #                             "display": "Glucose [Moles/volume] in Blood",
    #                         }
    #                     ]
    #                 },
    #                 "effectiveDateTime": "2013-04-02T09:30:10+01:00",
    #                 "issued": "2013-04-03T15:30:10+01:00",
    #                 "valueQuantity": {
    #                     "value": 6.3,
    #                     "unit": "mmol/l",
    #                     "system": "http://unitsofmeasure.org",
    #                     "code": "mmol/L",
    #                 },
    #                 "interpretation": [
    #                     {
    #                         "coding": [
    #                             {
    #                                 "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    #                                 "code": "H",
    #                                 "display": "High",
    #                             }
    #                         ]
    #                     }
    #                 ],
    #                 "referenceRange": [
    #                     {
    #                         "low": {
    #                             "value": 3.1,
    #                             "unit": "mmol/l",
    #                             "system": "http://unitsofmeasure.org",
    #                             "code": "mmol/L",
    #                         },
    #                         "high": {
    #                             "value": 6.2,
    #                             "unit": "mmol/l",
    #                             "system": "http://unitsofmeasure.org",
    #                             "code": "mmol/L",
    #                         },
    #                     }
    #                 ],
    #             },
    #         },
    #         {
    #             "fullUrl": "https://phdi-pilot.azurehealthcareapis.com/Observation/f206",
    #             "resource": {
    #                 "resourceType": "Observation",
    #                 "id": "f206",
    #                 "text": {
    #                     "status": "generated",
    #                     "div": '<div xmlns="http://www.w3.org/1999/xhtml"><p><b>Generated Narrative: Observation</b><a name="f206"> </a></p><div style="display: inline-block; background-color: #d9e0e7; padding: 6px; margin: 4px; border: 1px solid #8da1b4; border-radius: 5px; line-height: 60%"><p style="margin-bottom: 0px">Resource Observation &quot;f206&quot; </p></div><p><b>status</b>: final</p><p><b>code</b>: Blood culture <span style="background: LightGoldenRodYellow; margin: 4px; border: 1px solid khaki"> (acmelabs.org#104177; <a href="https://loinc.org/">LOINC</a>#600-7 &quot;Bacteria identified in Blood by Culture&quot;)</span></p><p><b>subject</b>: <span title="  No identifier could be provided to this observation  "><a href="patient-example-f201-roel.html">Patient/f201: Roel</a> &quot;Roel&quot;</span></p><p><b>issued</b>: Mar 11, 2013, 9:28:00 AM</p><p><b>performer</b>: <a href="practitioner-example-f202-lm.html">Practitioner/f202: Luigi Maas</a> &quot;Luigi Maas&quot;</p><p><b>value</b>: Staphylococcus aureus <span style="background: LightGoldenRodYellow; margin: 4px; border: 1px solid khaki"> (<a href="https://browser.ihtsdotools.org/">SNOMED CT</a>#3092008)</span></p><p><b>interpretation</b>: Positive <span style="background: LightGoldenRodYellow; margin: 4px; border: 1px solid khaki"> (<a href="http://terminology.hl7.org/5.4.0/CodeSystem-v3-ObservationInterpretation.html">ObservationInterpretation</a>#POS)</span></p><p><b>method</b>: <span title="  BodySite not relevant  ">Blood culture for bacteria, including anaerobic screen <span style="background: LightGoldenRodYellow; margin: 4px; border: 1px solid khaki"> (<a href="https://browser.ihtsdotools.org/">SNOMED CT</a>#104177005)</span></span></p></div>',
    #                 },
    #                 "status": "final",
    #                 "category": [
    #                     {
    #                         "coding": [
    #                             {
    #                                 "system": "http://terminology.hl7.org/CodeSystem/observation-category",
    #                                 "code": "laboratory",
    #                                 "display": "Laboratory",
    #                             }
    #                         ],
    #                         "text": "Laboratory",
    #                     }
    #                 ],
    #                 "code": {
    #                     "coding": [
    #                         {
    #                             "system": "http://acmelabs.org",
    #                             "code": "104177",
    #                             "display": "Blood culture",
    #                         },
    #                         {
    #                             "system": "http://loinc.org",
    #                             "code": "600-7",
    #                             "display": "Bacteria identified in Blood by Culture",
    #                         },
    #                     ]
    #                 },
    #                 "valueCodeableConcept": {
    #                     "coding": [
    #                         {
    #                             "system": "http://snomed.info/sct",
    #                             "code": "3092008",
    #                             "display": "Staphylococcus aureus",
    #                         }
    #                     ]
    #                 },
    #                 "interpretation": [
    #                     {
    #                         "coding": [
    #                             {
    #                                 "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation",
    #                                 "code": "POS",
    #                             }
    #                         ]
    #                     }
    #                 ],
    #                 "method": {
    #                     "coding": [
    #                         {
    #                             "system": "http://snomed.info/sct",
    #                             "code": "104177005",
    #                             "display": "Blood culture for bacteria, including anaerobic screen",
    #                         }
    #                     ]
    #                 },
    #             },
    #         },
    #         {
    #             "fullUrl": "https://phdi-pilot.azurehealthcareapis.com/Observation/f207",
    #             "resource": {
    #                 "resourceType": "Observation",
    #                 "id": "f207",
    #                 "text": {
    #                     "status": "generated",
    #                     "div": '<div xmlns="http://www.w3.org/1999/xhtml"><p><b>Generated Narrative: Observation</b><a name="f206"> </a></p><div style="display: inline-block; background-color: #d9e0e7; padding: 6px; margin: 4px; border: 1px solid #8da1b4; border-radius: 5px; line-height: 60%"><p style="margin-bottom: 0px">Resource Observation &quot;f206&quot; </p></div><p><b>status</b>: final</p><p><b>code</b>: Blood culture <span style="background: LightGoldenRodYellow; margin: 4px; border: 1px solid khaki"> (acmelabs.org#104177; <a href="https://loinc.org/">LOINC</a>#600-7 &quot;Bacteria identified in Blood by Culture&quot;)</span></p><p><b>subject</b>: <span title="  No identifier could be provided to this observation  "><a href="patient-example-f201-roel.html">Patient/f201: Roel</a> &quot;Roel&quot;</span></p><p><b>issued</b>: Mar 11, 2013, 9:28:00 AM</p><p><b>performer</b>: <a href="practitioner-example-f202-lm.html">Practitioner/f202: Luigi Maas</a> &quot;Luigi Maas&quot;</p><p><b>value</b>: Staphylococcus aureus <span style="background: LightGoldenRodYellow; margin: 4px; border: 1px solid khaki"> (<a href="https://browser.ihtsdotools.org/">SNOMED CT</a>#3092008)</span></p><p><b>interpretation</b>: Positive <span style="background: LightGoldenRodYellow; margin: 4px; border: 1px solid khaki"> (<a href="http://terminology.hl7.org/5.4.0/CodeSystem-v3-ObservationInterpretation.html">ObservationInterpretation</a>#POS)</span></p><p><b>method</b>: <span title="  BodySite not relevant  ">Blood culture for bacteria, including anaerobic screen <span style="background: LightGoldenRodYellow; margin: 4px; border: 1px solid khaki"> (<a href="https://browser.ihtsdotools.org/">SNOMED CT</a>#104177005)</span></span></p></div>',
    #                 },
    #                 "status": "final",
    #                 "category": [
    #                     {
    #                         "coding": [
    #                             {
    #                                 "system": "http://terminology.hl7.org/CodeSystem/observation-category",
    #                                 "code": "social-history",
    #                                 "display": "Social History",
    #                             }
    #                         ],
    #                         "text": "Social History",
    #                     }
    #                 ],
    #                 "code": {
    #                     "coding": [
    #                         {
    #                             "system": "http://acme-rehab.org",
    #                             "code": "alcohol-type",
    #                             "display": "Type of alcohol consumed",
    #                         }
    #                     ],
    #                     "text": "Type of alcohol consumed",
    #                 },
    #                 "component": [
    #                     {
    #                         "code": {
    #                             "coding": [
    #                                 {
    #                                     "system": "http://acme-rehab.org",
    #                                     "code": "alcohol-type",
    #                                 }
    #                             ]
    #                         },
    #                         "valueCodeableConcept": {
    #                             "coding": [
    #                                 {
    #                                     "system": "http://snomed.info/sct",
    #                                     "code": "35748005",
    #                                     "display": "Wine (substance)",
    #                                 }
    #                             ],
    #                             "text": "Wine",
    #                         },
    #                     },
    #                     {
    #                         "code": {
    #                             "coding": [
    #                                 {
    #                                     "system": "http://acme-rehab.org",
    #                                     "code": "alcohol-type",
    #                                 }
    #                             ]
    #                         },
    #                         "valueCodeableConcept": {
    #                             "coding": [
    #                                 {
    #                                     "system": "http://snomed.info/sct",
    #                                     "code": "53410008",
    #                                     "display": "Beer (substance)",
    #                                 }
    #                             ],
    #                             "text": "Beer",
    #                         },
    #                     },
    #                     {
    #                         "code": {
    #                             "coding": [
    #                                 {
    #                                     "system": "http://acme-rehab.org",
    #                                     "code": "alcohol-type",
    #                                 }
    #                             ]
    #                         },
    #                         "valueCodeableConcept": {
    #                             "coding": [
    #                                 {
    #                                     "system": "http://snomed.info/sct",
    #                                     "code": "6524003",
    #                                     "display": "Distilled spirits (substance)",
    #                                 }
    #                             ],
    #                             "text": "Liquor",
    #                         },
    #                     },
    #                 ],
    #             },
    #         },
    #     ],
    # }

    # extraction_schema = load_parsing_schema("phdc_case_report_schema.json")

    # DIBBS_REFERENCE_SIGNIFIER = "DIBBs"
    # parsers = {}

    # for field, field_definition in extraction_schema.items():
    #     parser = {}
    #     parser["primary_parser"] = fhirpathpy.compile(field_definition["fhir_path"])
    #     if "secondary_schema" in field_definition:
    #         secondary_parsers = {}
    #         for secondary_field, secondary_field_definition in field_definition[
    #             "secondary_schema"
    #         ].items():
    #             # Base case: secondary field is located on this resource
    #             if not secondary_field_definition["fhir_path"].startswith("Bundle"):
    #                 if "secondary_schema" in secondary_field_definition:
    #                     tertiary_parser = {}
    #                     tertiary_parsers = {}
    #                     tertiary_parser["primary_parser"] = fhirpathpy.compile(
    #                         secondary_field_definition["fhir_path"]
    #                     )
    #                     for (
    #                         tertiary_field,
    #                         tertiary_field_definition,
    #                     ) in secondary_field_definition["secondary_schema"].items():
    #                         tertiary_parsers[tertiary_field] = {
    #                             "secondary_fhir_path": fhirpathpy.compile(
    #                                 tertiary_field_definition["fhir_path"]
    #                             )
    #                         }
    #                     secondary_parsers[secondary_field] = {
    #                         "primary_parser": tertiary_parser['primary_parser'],
    #                         "secondary_parsers": tertiary_parsers
    #                     }

    #                 else:
    #                     secondary_parsers[secondary_field] = {
    #                         "secondary_fhir_path": fhirpathpy.compile(
    #                             secondary_field_definition["fhir_path"]
    #                         )
    #                     }
    #             # Reference case: secondary field is located on a different resource,
    #             # so we can't compile the fhir_path proper; instead, compile the
    #             # reference for quick access later
    #             else:
    #                 secondary_parsers[secondary_field] = {
    #                     "secondary_fhir_path": secondary_field_definition["fhir_path"],
    #                     "reference_path": fhirpathpy.compile(
    #                         secondary_field_definition["reference_lookup"]
    #                     ),
    #                 }
    #         parser["secondary_parsers"] = secondary_parsers
    #     parsers[field] = parser

    # # parsers = get_parsers(frozendict(extraction_schema))

    # # print(
    # #     parsers["observations"]["secondary_parsers"]["components"]["secondary_parsers"]
    # # )

    # # # extract

    # parsed_values = {}

    # # Iterate over each parser and make the appropriate path call
    # for field, parser in parsers.items():
    #     if "secondary_parsers" not in parser:
    #         value = parser["primary_parser"](message)
    #         if len(value) == 0:
    #             value = None
    #         else:
    #             value = ",".join(map(str, value))
    #         parsed_values[field] = value

    #     # Use the secondary field data structure, remembering that some
    #     # fhir paths might not be compiled yet
    #     else:
    #         initial_values = parser["primary_parser"](message)
    #         values = []

    #         # This check allows us to use secondary schemas on fields that
    #         # are just datatype structs, rather than full arrays. This is
    #         # useful when we want multiple fields of information from a
    #         # referenced resource, but there's only one instance of the
    #         # resource type referencing another resource in the bundle
    #         # (e.g. we want multiple values about the Bundle's Custodian:
    #         # bundle.custodian is a dict with a reference, so we only need
    #         # to find that reference once)
    #         if type(initial_values) is not list:
    #             initial_values = [initial_values]

    #         for initial_value in initial_values:
    #             value = {}
    #             for secondary_field, secondary_path_struct in parser[
    #                 "secondary_parsers"
    #             ].items():
    #                 if "reference_path" not in secondary_path_struct:
    #                     # Check for tertiary values
    #                     if "secondary_parsers" in secondary_path_struct:
    #                         tertiary_parser = secondary_path_struct['primary_parser']
    #                         tertiary_values = []
    #                         for v in tertiary_parser(initial_value):
    #                             tv = {}
    #                             print()
    #                             print(v)
    #                             for (
    #                                 tertiary_field,
    #                                 tertiary_path_struct,
    #                             ) in secondary_path_struct["secondary_parsers"].items():
    #                                 tv_parser = tertiary_path_struct['secondary_fhir_path']
    #                                 if len(tv_parser(v)) == 0:
    #                                     tv[tertiary_field] = None
    #                                 else:
    #                                     tv[tertiary_field] = ",".join(
    #                                         map(str, tv_parser(v))
    #                                     )
    #                             tertiary_values.append(tv)
    #                         value[secondary_field] = tertiary_values
    #                     else:
    #                         try:
    #                             secondary_parser = secondary_path_struct[
    #                                 "secondary_fhir_path"
    #                             ]
    #                             if len(secondary_parser(initial_value)) == 0:
    #                                 value[secondary_field] = None
    #                             else:
    #                                 value[secondary_field] = ",".join(
    #                                     map(str, secondary_parser(initial_value))
    #                                 )
    #                         # By default, fhirpathpy will compile such that *only*
    #                         # actual resources can be accessed, rather than data types.
    #                         # This is fine for most cases, but sometimes the actual data
    #                         # we want is in a list of structs rather than a list of
    #                         # resources, such as a list of patient addresses. This
    #                         # exception catches that and allows an ordinary property
    #                         # search.
    #                         except KeyError:
    #                             try:
    #                                 accessors = (
    #                                     secondary_parser.parsedPath.get("children")[0]
    #                                     .get("text")
    #                                     .split(".")[1:]
    #                                 )
    #                                 val = initial_value
    #                                 for acc in accessors:
    #                                     if "[" not in acc:
    #                                         val = val[acc]
    #                                     else:
    #                                         sub_acc = acc.split("[")[1].split("]")[0]
    #                                         val = val[acc.split("[")[0].strip()][
    #                                             int(sub_acc)
    #                                         ]
    #                                 value[secondary_field] = str(val)
    #                             except:  # noqa
    #                                 value[secondary_field] = None

    #                 # Reference case: information is contained on another
    #                 # resource that we have to look up
    #                 else:
    #                     reference_parser = secondary_path_struct["reference_path"]
    #                     if len(reference_parser(initial_value)) == 0:
    #                         response.status_code = status.HTTP_400_BAD_REQUEST
    #                         return {
    #                             "message": "Provided `reference_lookup` location does "
    #                             "not point to a referencing identifier",
    #                             "parsed_values": {},
    #                         }
    #                     else:
    #                         reference_to_find = ",".join(
    #                             map(str, reference_parser(initial_value))
    #                         )

    #                         # FHIR references are prefixed with resource type
    #                         reference_to_find = reference_to_find.split("/")[-1]

    #                         # Build the resultant concatenated reference path
    #                         reference_path = secondary_path_struct[
    #                             "secondary_fhir_path"
    #                         ].replace(DIBBS_REFERENCE_SIGNIFIER, reference_to_find)
    #                         reference_path = fhirpathpy.compile(reference_path)
    #                         referenced_value = reference_path(message)
    #                         if len(referenced_value) == 0:
    #                             value[secondary_field] = None
    #                         else:
    #                             value[secondary_field] = ",".join(
    #                                 map(str, referenced_value)
    #                             )

    #             values.append(value)
    #         parsed_values[field] = values

    # for k,val in parsed_values.items():
    #     for obs in val:
    #         if "components" in obs:
    #             print(obs['components'])
    #             print()


    parsing_schema = load_parsing_schema("test_reference_schema.json")
    get_parsers.cache_clear()
    get_parsers(frozendict(parsing_schema))

    expected_number_of_calls = 0
    for field, field_definition in parsing_schema.items():
        expected_number_of_calls += 1
        if "secondary_schema" in field_definition:
            expected_number_of_calls += len(field_definition["secondary_schema"])

    assert len(patched_fhirpathpy.compile.call_args_list) == expected_number_of_calls


def test_search_for_required_values_success():
    input = {"salt_str": "request-value"}
    required_values = ["fhir_converter_url"]
    os.environ["FHIR_CONVERTER_URL"] = "my-fhir-converter-url"
    os.environ["SALT_STR"] = "environment-value"

    get_settings.cache_clear()
    message = search_for_required_values(input, required_values)

    os.environ.pop("CRED_MANAGER", None)
    os.environ.pop("SALT_STR", None)
    assert input == {
        "salt_str": "request-value",
        "fhir_converter_url": "my-fhir-converter-url",
    }
    assert message == "All values were found."


def test_search_for_required_values_failure():
    input = {"salt_str": "request-value"}
    required_values = ["cred_manager"]
    os.environ.pop("CRED_MANAGER", None)
    os.environ["SALT_STR"] = "environment-value"

    get_settings.cache_clear()
    message = search_for_required_values(input, required_values)
    os.environ.pop("CRED_MANAGER", None)
    os.environ.pop("SALT_STR", None)

    assert input == {"salt_str": "request-value"}
    assert message == (
        "The following values are required, but were not included in the request and "
        "could not be read from the environment. Please resubmit the request including "
        "these values or add them as environment variables to this service. missing "
        "values: cred_manager."
    )


def test_get_credential_manager_azure():
    fhir_url = "Some URL"
    actual_result = get_credential_manager("azure", fhir_url)
    assert hasattr(actual_result, "__class__")
    assert hasattr(actual_result, "resource_location")
    assert hasattr(actual_result, "access_token")


def test_get_credential_manager_gcp():
    actual_result = get_credential_manager("gcp")
    assert hasattr(actual_result, "__class__")
    assert hasattr(actual_result, "scoped_credentials")


def test_get_credential_manager_invalid():
    expected_result = None
    actual_result = get_credential_manager("myown")
    assert actual_result == expected_result


@mock.patch("app.utils.http_request_with_reauth")
def test_convert_fhir_cred_manager(patched_requests_with_reauth):
    credential_manager = mock.Mock()
    credential_manager.get_access_token.return_value = "some-access-token"
    parameters = {
        "message": "some message to convert",
        "message_type": "elr",
        "fhir_converter_url": "some FHIR converter URL",
        "headers": {},
        "credential_manager": credential_manager,
    }
    convert_to_fhir(**parameters)
    patched_requests_with_reauth.assert_called_with(
        credential_manager=credential_manager,
        url="some FHIR converter URL/convert-to-fhir",
        retry_count=3,
        request_type="POST",
        allowed_methods=["POST"],
        headers={"Authorization": "Bearer some-access-token"},
        data={
            "input_data": "some message to convert",
            "input_type": "hl7v2",
            "root_template": "ORU_R01",
        },
    )


@mock.patch("app.utils.http_request_with_retry")
def test_convert_fhir_no_cred_manager(patched_requests_with_retryh):
    parameters = {
        "message": "some message to convert",
        "message_type": "elr",
        "fhir_converter_url": "some FHIR converter URL",
        "headers": {},
    }
    convert_to_fhir(**parameters)
    patched_requests_with_retryh.assert_called_with(
        url="some FHIR converter URL/convert-to-fhir",
        retry_count=3,
        request_type="POST",
        allowed_methods=["POST"],
        headers={},
        data={
            "input_data": "some message to convert",
            "input_type": "hl7v2",
            "root_template": "ORU_R01",
        },
    )


def test_freeze_parsing_schema():
    test_schema_path = (
        Path(__file__).parent.parent / "app" / "default_schemas" / "test_schema.json"
    )
    with open(test_schema_path, "r") as file:
        test_schema = json.load(file)

    frozen_schema = freeze_parsing_schema(test_schema)

    for key in test_schema:
        for subkey in test_schema[key]:
            assert test_schema[key][subkey] == frozen_schema[key][subkey]


def test_field_metadata():
    expected_result = {
        "value": "foo",
        "fhir_path": "bar",
        "data_type": "biz",
        "resource_type": "baz",
    }
    assert (
        field_metadata(
            value="foo", fhir_path="bar", data_type="biz", resource_type="baz"
        )
        == expected_result
    )
    expected_result2 = {
        "value": "",
        "fhir_path": "",
        "data_type": "",
        "resource_type": "",
    }
    assert field_metadata() == expected_result2


def test_get_metadata():
    example_parsed_values = {"foo": "bar", "fiz": "biz", "baz": "Null"}
    example_schema = {
        "foo": {
            "fhir_path": "Bundle.entry.resource.where(resourceType='Foo').biz",
            "data_type": "string",
            "nullable": False,
            "metadata": {"metaFoo": "metaFooData", "metaFiz": "metaFizData"},
        },
        "baz": {},
    }
    expected_result = {
        "foo": {
            "value": "bar",
            "fhir_path": "Bundle.entry.resource.where(resourceType='Foo').biz",
            "data_type": "string",
            "resource_type": "Foo",
            "metaFoo": "metaFooData",
            "metaFiz": "metaFizData",
        },
        "fiz": {"value": "biz", "fhir_path": "", "data_type": "", "resource_type": ""},
        "baz": {"value": "Null", "fhir_path": "", "data_type": "", "resource_type": ""},
    }
    result = get_metadata(parsed_values=example_parsed_values, schema=example_schema)
    assert result == expected_result


def test_freeze_parsing_schema_helper():
    input = {"foo": "bar", "fiz": {"foo": "bar", "fiz": {"foo": "bar"}}}
    output = freeze_parsing_schema_helper(input)
    assert isinstance(output, frozendict)
    assert isinstance(output["fiz"], frozendict)
    assert isinstance(output["fiz"]["fiz"], frozendict)
    assert isinstance(output["foo"], str)
