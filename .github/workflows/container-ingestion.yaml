name: Test ingestion Container

on:
  pull_request:
    branches:
      - "**"
    paths:
      - containers/ingestion/**
      - containers/dibbs/**
      - containers/fhir-converter/**
  merge_group:
    types:
      - checks_requested
  push:
    branches:
      - main
    paths-ignore:
      - pyproject.toml
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TEST_RUNNER_PYTHON_VERSION: 3.11
  CONTAINER: ingestion

jobs:
  python-linting:
    uses: ./.github/workflows/linting-python.yaml
    with:
      python_runner_version: 3.11 # must be hardcoded; cannot pass in from env

  unit-test-python-containers:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup python ${{env.TEST_RUNNER_PYTHON_VERSION}}
        uses: actions/setup-python@v5
        with:
          python-version: ${{env.TEST_RUNNER_PYTHON_VERSION}}
          cache: pip
      - name: Install pytest and pytest-cov
        run: pip install pytest pytest-cov
      - name: Install dependencies
        working-directory: ./containers/${{env.CONTAINER}}
        run: |
          commit_hash=$(git rev-parse HEAD)
          find ./ -name requirements.txt -exec sed -i -e "s/phdi@main/phdi@${commit_hash}/g" {} \;
          pip install -r requirements.txt
          if [ -f dev-requirements.txt ]; then
            pip install -r dev-requirements.txt
          fi
      - name: Run unit tests for container with coverage
        working-directory: ./containers/${{env.CONTAINER}}
        run: |
          python -m pytest --cov-report xml --cov=. -m "not integration" tests/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ env.CONTAINER }}
  integration-test-python-containers:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup python ${{env.TEST_RUNNER_PYTHON_VERSION}}
        uses: actions/setup-python@v5
        with:
          python-version: ${{env.TEST_RUNNER_PYTHON_VERSION}}
          cache: pip
      - name: Install pytest
        run: pip install pytest
      - name: Install dependencies
        working-directory: ./containers/${{env.CONTAINER}}
        # When running as a PR check, instead of importing the SDK from @main,
        # import it from the current commit. (Need to do this for all containers)
        run: |
          if [[ $GITHUB_REF != "refs/heads/main" ]]; then
            commit_hash=$(git rev-parse HEAD)
            find ./ -name requirements.txt -exec sed -i -e "s/phdi@main/phdi@${commit_hash}/g" {} \;
          fi
          pip install -r requirements.txt
          if [ -f dev-requirements.txt ]; then
            pip install -r dev-requirements.txt
          fi
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
      - name: Run integration tests for containers
        working-directory: ./containers/${{env.CONTAINER}}/tests/integration
        run: |
          python -m pytest -m "integration"
  build-container:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build ${{ env.CONTAINER }} Container
        uses: docker/build-push-action@v3
        with:
          context: ./containers/${{ env.CONTAINER }}
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            "INGESTION_URL=${{secrets.INGESTION_URL}}"
            "SMARTY_AUTH_ID=${{secrets.SMARTY_AUTH_ID}}"
            "SMARTY_AUTH_TOKEN=${{secrets.SMARTY_AUTH_TOKEN}}"
