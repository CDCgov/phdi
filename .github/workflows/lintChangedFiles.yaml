name: Lint Changed Files

on:
  workflow_call:
    inputs:
      changed-files-data:
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  TEST_RUNNER_PYTHON_VERSION: 3.10.12

jobs:
  filter-lint-files:
    runs-on: ubuntu-latest
    outputs:
      python-files-present: ${{ steps.filter-lint-files.outputs.python-files-present }}
      changed-python-files: ${{ steps.filter-lint-files.outputs.changed-python-files }}
      js-files-present: ${{ steps.filter-lint-files.outputs.js-files-present }}
      changed-js-files: ${{ steps.filter-lint-files.outputs.changed-js-files }}
      yaml-files-present: ${{ steps.filter-lint-files.outputs.yaml-files-present }}
      changed-yaml-files: ${{ steps.filter-lint-files.outputs.changed-yaml-files }}
    steps:
      - name: Filter changed files
        id: filter-lint-files
        run: |
          CHANGED_FILES_JSON='${{ inputs.changed-files-data }}'

          # Use jq to extract file paths based on extension and add print statements for each step
          CHANGED_PY_FILES=$(echo "$CHANGED_FILES_JSON" | \
            jq -r '.[] | select(.extension == "py") | .file' | \
            tr '\n' ' ')
          echo "Changed Python Files: $CHANGED_PY_FILES"
          echo "changed-python-files=$CHANGED_PY_FILES" >> $GITHUB_OUTPUT

          CHANGED_JS_FILES=$(echo "$CHANGED_FILES_JSON" | \
            jq -r '.[] | select(.extension == "js" or .extension == "jsx") | .file' | \
            tr '\n' ' ')
          echo "Changed JS Files: $CHANGED_JS_FILES"
          echo "changed-js-files=$CHANGED_JS_FILES" >> $GITHUB_OUTPUT

          CHANGED_YAML_FILES=$(echo "$CHANGED_FILES_JSON" | \
            jq -r '.[] | select(.extension == "yaml" or .extension == "yml") | .file' | \
            tr '\n' ' ')
          echo "Changed YAML files: CHANGED_YAML_FILES"
          echo "changed-yaml-files=$CHANGED_YAML_FILES" >> $GITHUB_OUTPUT

          # create flags for job conditionals downstream
          if [[ -n "$CHANGED_PY_FILES" ]]; then
            echo "python-files-present=true"
            echo "python-files-present=true" >> $GITHUB_ENV;
          else
            echo "python-files-present=false"
            echo "python-files-present=false" >> $GITHUB_ENV;
          fi
          if [[ -n "$CHANGED_JS_FILES" ]]; then
            echo "js-files-present=true"
            echo "js-files-present=true" >> $GITHUB_ENV;
          else
            echo "js-files-present=false"
            echo "js-files-present=false" >> $GITHUB_ENV;
          fi
          if [[ -n "$CHANGED_YAML_FILES" ]]; then
            echo "yaml-files-present=true"
            echo "yaml-files-present=true" >> $GITHUB_ENV;
          else
            echo "yaml-files-present=false"
            echo "yaml-files-present=false" >> $GITHUB_ENV;
          fi

  lint:
    needs: filter-lint-files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        if: needs.filter-lint-files.outputs.python-files-present == 'true'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.TEST_RUNNER_PYTHON_VERSION }}

      - name: Lint Python files
        if: needs.filter-lint-files.outputs.python-files-present == 'true'
        run: |
          pip install -U pip
          pip install black flake8
          python_files="${{ needs.filter-lint-files.outputs.changed-python-files }}"
          for file in $python_files; do
            black --check $file
            flake8 $file
          done

      - name: Setup Node.js
        if: needs.filter-lint-files.outputs.js-files-present == 'true'
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Lint JavaScript files
        if: needs.filter-lint-files.outputs.js-files-present == 'true'
        run: |
          npm ci
          js_files="${{ needs.filter-lint-files.outputs.changed-js-files }}"
          for file in $js_files; do
            npm run lint -- $file
          done

      - name: Install YAML Linter and Lint YAML
        if: needs.filter-lint-files.outputs.yaml-files-present == 'true'
        run: |
          sudo apt-get install yamllint
          echo "rules:" > .yamllint.yml
          echo "  line-length:" >> .yamllint.yml
          echo "    max: 120" >> .yamllint.yml
          echo "    level: error" >> .yamllint.yml
          yaml_files="${{ needs.filter-lint-files.outputs.changed-yaml-files }}"
          for file in $yaml_files; do
            yamllint $file
          done
