name: Test orchestration Container

on:
  pull_request:
    branches:
      - "**"
  merge_group:
    types:
      - checks_requested
  push:
    branches:
      - main
    paths-ignore:
      - pyproject.toml
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TEST_RUNNER_PYTHON_VERSION: 3.11
  CONTAINER: orchestration

jobs:
  orchestration-python-linting: # This job is the same as the python-linting job in linting-python.yaml but does not run if using linting-python.yaml
    uses: ./.github/workflows/linting-python.yaml
    with:
      python_runner_version: 3.11 # must be hardcoded; cannot pass in from env

  orchestration-unit-test-python:
    runs-on: ubuntu-latest
    services:
      test-db:
        image: postgres:13-alpine3.16
        env:
          POSTGRES_PASSWORD: pw
          POSTGRES_DB: testdb
          POSTGRES_USER: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name testdb
        ports:
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup python ${{env.TEST_RUNNER_PYTHON_VERSION}}
        uses: actions/setup-python@v5
        with:
          python-version: ${{env.TEST_RUNNER_PYTHON_VERSION}}
          cache: pip
      - name: Install pytest and pytest-cov
        run: pip install pytest pytest-cov
      - name: Install dependencies
        working-directory: ./containers/${{env.CONTAINER}}
        run: |
          commit_hash=$(git rev-parse HEAD)
          find ./ -name requirements.txt -exec sed -i -e "s/phdi@main/phdi@${commit_hash}/g" {} \;
          pip install -r requirements.txt
          if [ -f dev-requirements.txt ]; then
            pip install -r dev-requirements.txt
          fi
      - name: Run unit tests for container with coverage
        working-directory: ./containers/${{env.CONTAINER}}
        run: |
          python -m pytest --cov-report xml --cov=. -m "not integration" tests/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ env.CONTAINER }}
  orchestration-integration-test-python:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup python ${{env.TEST_RUNNER_PYTHON_VERSION}}
        uses: actions/setup-python@v5
        with:
          python-version: ${{env.TEST_RUNNER_PYTHON_VERSION}}
          cache: pip
      - name: Install pytest
        run: pip install pytest
      - name: Install dependencies
        working-directory: ./containers/${{env.CONTAINER}}
        # When running as a PR check, instead of importing the SDK from @main,
        # import it from the current commit. (Need to do this for all containers)
        run: |
          if [[ $GITHUB_REF != "refs/heads/main" ]]; then
            commit_hash=$(git rev-parse HEAD)
            find ./ -name requirements.txt -exec sed -i -e "s/phdi@main/phdi@${commit_hash}/g" {} \;
          fi
          pip install -r requirements.txt
          if [ -f dev-requirements.txt ]; then
            pip install -r dev-requirements.txt
          fi
      - name: Run integration tests for containers
        env:
          MPI_DBNAME: testdb
          MPI_PASSWORD: pw
          MPI_DB_TYPE: postgres
          MPI_HOST: localhost
          MPI_USER: postgres
          MPI_PORT: 5432
        working-directory: ./containers/${{env.CONTAINER}}/tests/integration
        run: |
          python -m pytest -m "integration"
  build-orchestration-container:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build ${{ env.CONTAINER }} Container
        uses: docker/build-push-action@v3
        with:
          context: ./containers/${{ env.CONTAINER }}
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            "INGESTION_URL=${{secrets.INGESTION_URL}}"
            "MESSAGE_PARSER_URL=${{secrets.MESSAGE_PARSER_URL}}"
            "SMARTY_AUTH_ID=${{secrets.SMARTY_AUTH_ID}}"
            "SMARTY_AUTH_TOKEN=${{secrets.SMARTY_AUTH_TOKEN}}"
