name: Create New Release
on:
  workflow_dispatch:
    inputs:
      custom_tag:
        description: "Enter version number for release tag below. Don't forget the v! Example: v2.23.9"
        type: string
        required: true

# Run all tests before making a release
jobs:
  list-containers:
    uses: ./.github/workflows/listContainers.yaml
  test-for-release:
    uses: ./.github/workflows/test.yaml
  update-version-tag-release:
    name: Update phdi init version number
    needs: test-for-release
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
          ref: 'main'
      - name: Install poetry and dependencies
        run: |
          pip install poetry
      # update the version number in the phdi/__init.py__ file
      - name: Update PHDI Version
        run: |
          poetry version ${{ github.event.inputs.custom_tag }}
      # Create new release tag based upon user input
      - uses: EndBug/add-and-commit@v9
        with:
          message: Create release ${{ github.event.inputs.custom_tag }}
          add: pyproject.toml
          tag: ${{ github.event.inputs.custom_tag }}
      # Create new release based upon the latest created tag
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.custom_tag }}
          release_name: Release ${{ github.event.inputs.custom_tag }}   
          
  release-to-pypi:
    name: Build and publish PHDI to PyPI
    needs: update-version-tag-release
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
          ref: ${{ github.event.inputs.custom_tag }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install pypa/build
        run: >-
          python -m
          pip install
          build
          --user
      - name: Build a binary wheel and a source tarball
        run: >-
          python -m
          build
          --sdist
          --wheel
          --outdir dist/
          .
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

# Rebuild all containers for the new release
  build-containers-for-release:
    needs: update-version-tag-release
    permissions:
      contents: read
      packages: write
      id-token: write
    uses: ./.github/workflows/buildReleaseContainers.yaml
    with:
      container-tag: ${{ github.event.inputs.custom_tag }}

# Create updated PHDI docs for the latest release
  generate-and-update-phdi-docs:
    needs: build-containers-for-release
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
          ref: ${{ github.event.inputs.custom_tag }}

      - name: Install poetry and dependencies
        run: |
          pip install poetry
          poetry install

      - name: Generate docs and move to docs branch
        run: |
          poetry run pdoc ./phdi -o ./docs/${{ github.event.inputs.custom_tag }}/sdk

      - uses: actions/upload-artifact@v3
        with:
          name: phdi-docs
          path: ./docs/${{ github.event.inputs.custom_tag }}/sdk

  # Create updated container docs for the latest release
  generate-and-update-container-docs:
    needs:
      - list-containers
      - generate-and-update-phdi-docs
    permissions:
      contents: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container: ${{fromJson(needs.list-containers.outputs.containers)}}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
          ref: ${{ github.event.inputs.custom_tag }}

      - name: Update Container Documenation
        run: |
          npm i -g redoc-cli
          CONTAINER=${{ matrix.container }}
          cd $GITHUB_WORKSPACE/containers/$CONTAINER
          cp $GITHUB_WORKSPACE/utils/make_openapi_json.py .
          pip install -r requirements.txt
          python make_openapi_json.py
          redoc-cli build -o $GITHUB_WORKSPACE/docs/${{ github.event.inputs.custom_tag }}/containers/$CONTAINER.html openapi.json

      - uses: actions/upload-artifact@v3
        with:
          name: container-docs
          path: ./docs/${{ github.event.inputs.custom_tag }}/containers

  commit-docs:
    needs:
      - generate-and-update-phdi-docs
      - generate-and-update-container-docs
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: docs

      - name: Download phdi docs from artifacts
        uses: actions/download-artifact@v2
        with:
          name: phdi-docs
          path: ./docs/${{ github.event.inputs.custom_tag }}/sdk

      - name: Download container docs from artifacts
        uses: actions/download-artifact@v2
        with:
          name: container-docs
          path: ./docs/${{ github.event.inputs.custom_tag }}/containers

      - name: Copy to latest folder
        run: |
          rm -rf ./docs/latest
          mkdir -p ./docs/latest/sdk
          mkdir -p ./docs/latest/containers
          cp -r ./docs/${{ github.event.inputs.custom_tag }}/sdk/* ./docs/latest/sdk
          cp -r ./docs/${{ github.event.inputs.custom_tag }}/containers/* ./docs/latest/containers

      - name: Commit New Documentation
        uses: EndBug/add-and-commit@v9
        with:
          add: docs
          message: Automated update of docs for ${{ github.event.inputs.custom_tag }} release.
